{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Notes","text":"<ul> <li> <p>Programming</p> <ul> <li>Arrays</li> <li>Conditionals and Loops</li> <li>Input Validation</li> <li>Menus</li> <li>Methods</li> <li>Object-Oriented Programming</li> <li>Resources</li> <li>Ternary</li> </ul> </li> <li> <p>Arduino</p> <ul> <li>Arduino Labs (Lab 0 to Lab 5)</li> <li>How To Install A Library</li> <li>Hot To Install A Sketch</li> <li>Arduino Additional Resources</li> </ul> </li> <li> <p>How-Tos</p> <ul> <li>How-Tos - CSC110</li> <li>How-Tos - CSC205</li> <li>How-Tos - CSC240</li> </ul> </li> </ul>","boost":1},{"location":"arduino/","title":"Arduino - Index","text":"","boost":1},{"location":"arduino/#labs","title":"Labs","text":"<ul> <li>Lab 0 - System Verification Test</li> <li>Lab 1 - Passive Buzzer</li> <li>Lab 2 - Servo Motor</li> <li>Lab 3 - Ultrasonic Sensor</li> <li>Lab 4 - Stepper Motor Control</li> <li>Lab 5 - Collision Avoidance</li> </ul>","boost":1},{"location":"arduino/#additional-resources","title":"Additional Resources","text":"<ul> <li>How To Install A Library Using The Arduino IDE</li> <li>How To Upload A Sketch Using The Arduino IDE</li> <li>Arduino Resources</li> </ul>","boost":1},{"location":"arduino/arduino-resources/","title":"Arduino Resources","text":"","boost":1},{"location":"arduino/arduino-resources/#arduino-hardware","title":"Arduino Hardware","text":"<ul> <li> <p>Arduino Uno Rev3 (Board Only)</p> </li> <li> <p>Arduino UNO R3 Documentation</p> </li> <li> <p>Arduino UNO R3 Datasheet</p> </li> <li> <p>Arduino UNO R3 Pinout Guide</p> </li> </ul>","boost":1},{"location":"arduino/arduino-resources/#elegoo-hardware","title":"Elegoo Hardware","text":"<ul> <li> <p>ELEGOO UNO Project Super Starter Kit with Tutorial and UNO R3 Compatible with Arduino IDE</p> </li> <li> <p>ELEGOO Super Starter Kit for UNO V1.0.2022.08.04 Download Link</p> </li> </ul>","boost":1},{"location":"arduino/arduino-resources/#arduino-ide","title":"Arduino IDE","text":"<ul> <li> <p>Arduino IDE 2 Download Link</p> </li> <li> <p>Getting Started with Arduino IDE 2</p> </li> <li> <p>Downloading and Installing the Arduino IDE 2</p> </li> <li> <p>How to upload a sketch with the Arduino IDE 2</p> </li> <li> <p>The Autocomplete Feature</p> </li> <li> <p>Using the Board Manager</p> </li> <li> <p>Synchronizing Sketches between IDE 2 and Arduino Cloud</p> </li> <li> <p>Customizing the Auto Formatter Feature</p> </li> <li> <p>Debugging with the Arduino IDE 2</p> </li> <li> <p>Updating Firmware version and Uploading Certificates</p> </li> <li> <p>Installing libraries</p> </li> <li> <p>Security of Arduino IDE</p> </li> <li> <p>Using the Serial Monitor tool</p> </li> <li> <p>Using the Serial Plotter Tool</p> </li> </ul>","boost":1},{"location":"arduino/arduino-resources/#arduino-programming","title":"Arduino Programming","text":"<ul> <li> <p>Arduino Language Reference</p> </li> <li> <p>Arduino Libraries</p> </li> <li> <p>Arduino Built-in Examples</p> </li> </ul>","boost":1},{"location":"arduino/how-to-install-a-library-using-the-arduino-ide/","title":"How To Install A Library Using The Arduino IDE","text":"<p>Info</p> <ul> <li>Source: Arduino.cc Installing libraries</li> </ul> <p>A large part of the Arduino programming experience is the use of libraries. There are thousands of libraries that can be found online, and the best documented ones can be found and installed directly through the editor.</p> <p>In this tutorial, we will go through how to install a library using the library manager in the Arduino IDE 2. We will also show how to access examples from a library that you have installed.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/how-to-install-a-library-using-the-arduino-ide/#requirements","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/how-to-install-a-library-using-the-arduino-ide/#why-use-libraries","title":"Why Use Libraries?","text":"<p>Libraries are incredibly useful when creating a project of any type. They make our development experience much smoother, and there almost an infinite amount out there. They are used to interface with many different sensors, RTCs, Wi-Fi modules, RGB matrices and of course with other components on your board.</p> <p>Arduino has many official libraries, but the real heroes are the Arduino community, who develop, maintain and improve their libraries on a regular basis.</p>","boost":1},{"location":"arduino/how-to-install-a-library-using-the-arduino-ide/#installing-a-library","title":"Installing a Library","text":"<p>Installing a library is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the left column. Here, we can see a couple of icons. Let's click the on the \"library\" icon.</p> </li> </ol> <p></p> <ol> <li>A list will now appear of all available libraries, where we can also search for the library we want to use. In this example, we are going to install the RTCZero library. Click on the \"INSTALL\" button to install the library.</li> </ol> <p></p> <ol> <li>This process should not take too long, but allow up to a minute to install it.</li> </ol> <p></p> <ol> <li>When it is finished, we can take a look at the library in the library manager column, where it should say \"INSTALLED\".</li> </ol> <p></p> <p>Congratulations! You have now successfully downloaded and installed a library on your machine.</p>","boost":1},{"location":"arduino/how-to-install-a-library-using-the-arduino-ide/#including-a-library","title":"Including a Library","text":"<p>To use a library, you first need to include the library at the top of the sketch.</p> <p></p> <p>Almost all libraries come with already made examples that you can use. These are accessible through File &gt; Examples &gt; {Library} &gt; {Example}. In this example, we are choosing the RTCZero &gt; SimpleRTC.</p> <p></p> <p>You can also access library examples directly in the library manager, by clicking the three dots next to the installed library, like this:</p> <p></p> <p>The chosen example will now open up in a new window, and you can start using it however you want to.</p> <p></p>","boost":1},{"location":"arduino/how-to-upload-a-sketch-using-the-arduino-ide/","title":"How To Upload A Sketch Using The Arduino IDE","text":"<p>Info</p> <ul> <li>Source:  Arduino.cc How to upload a sketch with the Arduino IDE 2</li> </ul> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/how-to-upload-a-sketch-using-the-arduino-ide/#requirements","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/how-to-upload-a-sketch-using-the-arduino-ide/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/how-to-upload-a-sketch-using-the-arduino-ide/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/how-to-upload-a-sketch-using-the-arduino-ide/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor.</p>","boost":1},{"location":"arduino/labs/","title":"Arduino - Labs - Index","text":"<ul> <li>Arduino Lab 0 - System Verification Test</li> <li>Arduino Lab 1 - Passive Buzzer</li> <li>Arduino Lab 2 - Servo Motor</li> <li>Arduino Lab 3 - Ultrasonic Sensor</li> <li>Arduino Lab 4 - Stepper Motor Control</li> <li>Arduino Lab 5 - Collision Avoidance</li> </ul>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/","title":"Arduino Lab 0 - System Verification Test","text":"","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#overview","title":"Overview","text":"<p>In this lab, you will install the Arduino IDE 2 onto your computer. You will open the provided source code file and upload it to the UNO R3 controller board using a USB 2.0 Type A to USB 2.0 Type B Cable to blink the Arduino's built-in LED.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#requirements","title":"Requirements:","text":"<ul> <li>Arduino IDE (Arduino IDE 2 was used for this document)</li> <li>Arduino UNO R3 or Elegoo UNO R3 Board</li> <li>(1) x USB 2.0 Type A to USB 2.0 Type B Cable</li> </ul>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#datasheets","title":"Datasheets:","text":"<ul> <li>Arduino UNO R3 Datasheet</li> <li>ELEGOO UNO R3 Datasheet</li> </ul>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#downloading-and-installing-the-arduino-ide-2","title":"Downloading and installing the Arduino IDE 2","text":"<p>Info</p> <p>Source: Arduino.cc Downloading and installing the Arduino IDE 2</p> <p>A quick guide on how to install the IDE 2 on your operating system.</p> <p>You can easily download the editor from the Arduino Software page.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#requirements_1","title":"Requirements","text":"<ul> <li>Windows - Win 10 and newer, 64 bits</li> <li>Linux - 64 bits</li> <li>Mac OS X - Version 10.14: \"Mojave\" or newer, 64 bits</li> </ul>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#the-arduino-ide-2","title":"The Arduino IDE 2","text":"<p>The Arduino IDE 2 is an open-source project. It is a big step from its sturdy predecessor, Arduino IDE 1.x, and comes with revamped UI, improved board &amp; library manager, debugger, autocomplete feature and much more.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#download-the-editor","title":"Download the Editor","text":"<p>Downloading the Arduino IDE 2 is done through the Arduino Software page. Here you will also find information on the other editors available to use.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#installation","title":"Installation","text":"","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#windows","title":"Windows","text":"<p>To install the Arduino IDE 2 on a Windows computer, simply run the file downloaded from the software page.</p> <p></p> <p>Running the installation file.</p> <p>Follow the instructions in the installation guide. The installation may take several minutes.</p> <p></p> <p>Instructions for installing the IDE 2</p> <p>You can now use the Arduino IDE 2 on your Windows computer!</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#macos","title":"macOS","text":"<p>To install the Arduino IDE 2 on a macOS computer, simply copy the downloaded file into your application folder.</p> <p></p> <p>Installation on macOS.</p> <p>You can now use the Arduino IDE 2 on your macOS computer!</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#linux","title":"Linux","text":"<p>To install the Arduino IDE 2 on Linux, first download the AppImage 64 bits (X86-64) from the Arduino Software page.</p> <p>Before we can launch the editor, we need to first make it an executable file. This is done by:</p> <ul> <li>right-click the file,</li> <li>choose Properties,</li> <li>select Permissions tab,</li> <li>tick the Allow executing file as program box.</li> </ul> <p></p> <p>You can now double click the file to launch the Arduino IDE 2 on your Linux machine. In case you cannot run the AppImage file, make sure that FUSE is installed on your system.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#in-ubuntu-2204","title":"In Ubuntu (&gt;= 22.04):","text":"<pre><code>sudo add-apt-repository universe\nsudo apt install libfuse2\n</code></pre>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#in-fedora","title":"In Fedora","text":"<pre><code>dnf install fuse\n</code></pre> <p>See instructions for installing FUSE on your distribution here.</p> <p>To enable the Arduino IDE to access the serial port and upload code to your board, the following rule can be added to <code>/etc/udev/rules.d/99-arduino.rules</code>.</p> <pre><code>SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"2341\", GROUP=\"plugdev\", MODE=\"0666\"\n</code></pre>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#systems-verification-test","title":"Systems Verification Test","text":"<p>Download the Arduino source code file (also known as a sketch) Lab0SystemVerificationTest.ino and save it to your computer.</p> Arduino <pre><code>/*\n  Lab0SystemVerificationTest.ino\n\n  Turns an on-board LED on for 100 milliseconds, then off for 100 milliseconds, \n  repeatedly.\n\n  Most Arduinos have an on-board LED you can control. On the UNO, MEGA and ZERO\n  it is attached to digital pin 13, on MKR1000 on pin 6. LED_BUILTIN is set to\n  the correct LED pin independent of which board is used.\n  If you want to know what pin the on-board LED is connected to on your Arduino\n  model, check the Technical Specs of your board at:\n  https://www.arduino.cc/en/Main/Products\n\n  modified 21 Feburary 2023\n  by Steve Ellermann\n  modified 8 May 2014\n  by Scott Fitzgerald\n  modified 2 Sep 2016\n  by Arturo Guadalupi\n  modified 8 Sep 2016\n  by Colby Newman\n\n  This code is based on example code in the public domain.\n\n  https://www.arduino.cc/en/Tutorial/BuiltInExamples/Blink\n*/\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);  // turn the LED on (HIGH is the voltage level)\n  delay(100);                      // wait for 100 milliseconds\n  digitalWrite(LED_BUILTIN, LOW);   // turn the LED off by making the voltage LOW\n  delay(500);                      // wait for 500 milliseconds\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#principle","title":"Principle","text":"<p>The UNO R3 board has rows of connectors along both sides that are used to connect to several electronic devices and plug-in 'shields' that extends its capability.</p> <p>It also has a single LED that you can control from your sketches. This LED is built onto the UNO R3 board and is often referred to as the 'L' LED as this is how it is labeled on the board.</p> <p></p> <p>You may find that your UNO R3 board's 'L' LED already blinks when you connect it to a USB plug. This is because the boards are generally shipped with the 'Blink' sketch pre-installed.</p> <p>We will reprogram the UNO R3 board with our own Blink sketch and then change the rate at which it blinks.</p> <p>The time has now come to put that connection to the test and program your UNO R3 board.</p> <p>Attach your Arduino board to your computer with the USB cable.</p> <p>Open the file Lab0_SystemVerificationTest.ino that you downloaded with Arduino IDE 2</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#how-to-upload-a-sketch-with-the-arduino-ide-2","title":"How to upload a sketch with the Arduino IDE 2","text":"<p>Info</p> <p>Source: Arduino.cc How to upload a sketch with the Arduino IDE 2</p> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#requirements_2","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor. Results</p> <p>If you see the Arduino onboard LED blinking (100ms ON, 500ms OFF). Congratulations! Your PC / Arduino have passed the System Verification Test.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/","title":"Arduino Lab 1 - Passive Buzzer","text":"","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#overview","title":"Overview","text":"<p>In this lab, you will learn how to use a passive buzzer. The purpose of the experiment is to generate eight different sounds, each sound lasting 0.5 seconds: from Alto Do (523Hz), Re (587Hz), Mi (659Hz), Fa (698Hz), So (784Hz), La (880Hz), Si (988Hz) to Treble Do (1047Hz).</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#requirements","title":"Requirements","text":"<ul> <li>Arduino IDE (Arduino 2 was used for this document)</li> <li>(1) x Arduino Uno R3 or Elegoo Uno R3</li> <li>(1) x Passive buzzer</li> <li>(2) x F-M wires (Female to Male DuPont wires)</li> <li>(1) x USB 2.0 Type A to USB 2.0 Type B Cable</li> <li>(Optional) (1) x Apple USB-C to USB Adapter for macOS Users</li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#datasheets","title":"Datasheets","text":"<ul> <li>Arduino UNO R3 Datasheet</li> <li>ELEGOO UNO R3 Datasheet</li> <li>Passive Buzzer Data Sheet</li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#required-libraries","title":"Required Libraries","text":"<ul> <li>Library File: pitches.zip</li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#component-introduction","title":"Component Introduction","text":"","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#passive-buzzer","title":"Passive Buzzer","text":"<p>The working principle of passive buzzer is using PWM generating audio to make the air to vibrate. Appropriately changed as long as the vibration frequency, it can generate different sounds. For example, sending a pulse of 523Hz, it can generate Alto Do, pulse of 587Hz, it can generate mid-range Re, pulse of 659Hz, it can produce mid-range Mi. By the buzzer, you can play a song.</p> <p>We should be careful not to use the UNO R3 board analog Write () function to generate a pulse to the buzzer, because the pulse output of analog Write () is fixed (500Hz).</p> <p></p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#connection","title":"Connection","text":"","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#schematic","title":"Schematic","text":"","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#wiring-diagram","title":"Wiring Diagram","text":"<p>Wiring the buzzer connected to the UNO R3 board, the red (positive) to the pin8, black wire (negative) to the GND.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#example-picture","title":"Example Picture","text":"","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#sample-code","title":"Sample Code","text":"<ul> <li> <p>Ardunio Sample Source Code File: Lab01ArduinoSampleCode.ino</p> </li> <li> <p>Library File: pitches.zip</p> </li> </ul> <pre><code>// Lab01ArduinoSampleCode.ino\n// www.elegoo.com\n// 2016.12.08\n\n#include \"pitches.h\"\n\n// notes in the melody:\nint melody[] = {\n  NOTE_C5, NOTE_D5, NOTE_E5, NOTE_F5, NOTE_G5, NOTE_A5, NOTE_B5, NOTE_C6};\nint duration = 500;  // 500 milliseconds\n\nvoid setup() {\n\n}\n\nvoid loop() {  \n  for (int thisNote = 0; thisNote &lt; 8; thisNote++) {\n    // pin8 output the voice, every scale is 0.5 sencond\n    tone(8, melody[thisNote], duration);     \n\n    delay(1000);\n  }\n\n  // restart after two seconds \n  delay(2000);\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#upload-the-source-code-and-library-to-the-arduino","title":"Upload the source code and library to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#modify-the-code-for-the-lab","title":"Modify The Code For The Lab","text":"<p>Modify the code to do the following:</p> <p>Modify the code to have buzzer turn ON 100ms, turn OFF 1000ms, continuously.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#modified-source-code-for-lab-1","title":"Modified Source Code For Lab 1","text":"<p>Modified Ardunio Source Code File: Lab01ArduinoPassiveBuzzer.ino</p> <p>Library File: pitches.zip</p> <pre><code>// Lab01ArduinoPassiveBuzzer.ino\n//\n// Author: Steve Ellermannn\n// Modified: 2023-03-04\n//\n// Required Library: pitches.zip\n\n#include \"pitches.h\"\n\n// notes in the melody:\nint melody[] = {\n  NOTE_C5, NOTE_D5, NOTE_E5, NOTE_F5, NOTE_G5, NOTE_A5, NOTE_B5, NOTE_C6};\nint duration = 100;  // 100 milliseconds\n\nvoid setup() {\n\n}\n\nvoid loop() {  \n  for (int thisNote = 0; thisNote &lt; 8; thisNote++) {\n    // pin8 output the voice, every scale is 0.5 second\n    tone(8, melody[thisNote], duration);\n\n    // Output the voice after several minutes\n    delay(1000); // 1000 milliseconds\n  }\n\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#upload-the-source-code-and-library-to-the-arduino_1","title":"Upload the source code and library to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#how-to-upload-a-sketch-with-the-arduino-ide-2","title":"How to upload a sketch with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc How to upload a sketch with the Arduino IDE 2</li> </ul> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#requirements_1","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor. Results</p> <p>If you see the Arduino onboard LED blinking (100ms ON, 500ms OFF). Congratulations! Your PC / Arduino have passed the System Verification Test.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#how-to-add-library-files-to-the-arduino-ide-2","title":"How To Add Library Files To The Arduino IDE 2","text":"<p>From within the Arduino IDE, with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the pitches.zip file downloaded from this page.</p> <ul> <li>Library File: pitches.zip</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#how-to-install-a-library-with-the-arduino-ide-2","title":"How to install a library with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc Installing libraries</li> </ul> <p>A large part of the Arduino programming experience is the use of libraries. There are thousands of libraries that can be found online, and the best documented ones can be found and installed directly through the editor.</p> <p>In this tutorial, we will go through how to install a library using the library manager in the Arduino IDE 2. We will also show how to access examples from a library that you have installed.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#requirements_2","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#why-use-libraries","title":"Why Use Libraries?","text":"<p>Libraries are incredibly useful when creating a project of any type. They make our development experience much smoother, and there almost an infinite amount out there. They are used to interface with many different sensors, RTCs, Wi-Fi modules, RGB matrices and of course with other components on your board.</p> <p>Arduino has many official libraries, but the real heroes are the Arduino community, who develop, maintain and improve their libraries on a regular basis.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#installing-a-library","title":"Installing a Library","text":"<p>Installing a library is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the left column. Here, we can see a couple of icons. Let's click the on the \"library\" icon.</p> </li> </ol> <p></p> <ol> <li>A list will now appear of all available libraries, where we can also search for the library we want to use. In this example, we are going to install the RTCZero library. Click on the \"INSTALL\" button to install the library.</li> </ol> <p></p> <ol> <li>This process should not take too long, but allow up to a minute to install it.</li> </ol> <p></p> <ol> <li>When it is finished, we can take a look at the library in the library manager column, where it should say \"INSTALLED\".</li> </ol> <p></p> <p>Congratulations! You have now successfully downloaded and installed a library on your machine.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#including-a-library","title":"Including a Library","text":"<p>To use a library, you first need to include the library at the top of the sketch.</p> <p></p> <p>Almost all libraries come with already made examples that you can use. These are accessible through File &gt; Examples &gt; {Library} &gt; {Example}. In this example, we are choosing the RTCZero &gt; SimpleRTC.</p> <p></p> <p>You can also access library examples directly in the library manager, by clicking the three dots next to the installed library, like this: </p> <p></p> <p>The chosen example will now open up in a new window, and you can start using it however you want to.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/","title":"Arduino Lab 2 - Servo Motor","text":"","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#overview","title":"Overview","text":"<p>Servo is a type of geared motor that can only rotate 180 degrees. It is controlled by sending electrical pulses from your UNO R3 board. These pulses tell the servo what position it should move to. The Servo has three wires, of which the brown one is the ground wire and should be connected to the GND port of UNO, the red one is the power wire and should be connected to the 5v port, and the orange one is the signal wire and should be connected to the Dig #9 port.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#requirements","title":"Requirements:","text":"<ul> <li>Arduino IDE (Arduino 2 was used for this document)</li> <li>(1) x Arduino Uno R3 or Elegoo Uno R3</li> <li>(1) x Servo Motor SG90</li> <li>(3) x M-M wires (Male to Male jumper wires)</li> <li>(1) x USB 2.0 Type A to USB 2.0 Type B Cable</li> <li>(Optional) Phillips #0 Screwdriver to attach one of the three horns (arms) to the servo. They can be press-fit on for the purpose of this lab.</li> <li>(Optional) (1) x Apple USB-C to USB Adapter for macOS Users</li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#datasheets","title":"Datasheets:","text":"<ul> <li>Arduino UNO R3 Datasheet</li> <li>ELEGOO UNO R3 Datasheet</li> <li>Servo Motor SG90 Datasheet</li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#component-introduction","title":"Component Introduction","text":"<p>Servo Motor SG90 - Universal for JR and FP connector - Cable length : 25cm - No load; Operating speed: 0.12 sec / 60 degree (4.8V), 0.10 sec / 60 degree (6.0V) - Stall torque (4.8V): 1.6kg/cm - Temperature : -30~60'C - Dead band width: 5us - Working voltage: 3.5~6V - Dimension : 1.26 in x 1.18 in x 0.47 in (3.2 cm x 3 cm x 1.2 cm) - Weight : 4.73 oz (134 g)</p> <p></p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#connection","title":"Connection","text":"","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#schematic","title":"Schematic","text":"","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#wiring-diagram","title":"Wiring diagram","text":"<p>Note For Servo Motor SG90:</p> <ul> <li>The BROWN wire from the servo motor connects to GND on the Elegoo Uno R3 board with an M-M wire.</li> <li>The RED wire from the servo motor connects to 5V on the Elegoo Uno R3 board with an M-M wire.</li> <li>The ORANGE wire from the servo motor connects to ~9 on the Elegoo Uno R3 board with an M-M wire.</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#example-picture","title":"Example Picture","text":"<p>In the picture, the brown wire of servo is connected via the black M-M wires, the red one is connected via the red M-M wires, and the orange one is connected via the yellow M-M wires.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#example-code","title":"Example Code","text":"<ul> <li> <p>Ardunio Example Source Code File: Lab02ArduinoServoExampleCode.ino</p> </li> <li> <p>Library File: Servo.zip</p> </li> </ul> <pre><code>//www.elegoo.com\n//2016.12.08\n#include &lt;Servo.h&gt;\n\nServo myservo;  // create servo object to control a servo\n// twelve servo objects can be created on most boards\n\nint pos = 0;    // variable to store the servo position\n\nvoid setup() {\n  Serial.begin(9600);\n  myservo.attach(9);  // attaches the servo on pin 9 to the servo object\n}\n\nvoid loop() {\n  for (pos = 0; pos &lt;= 180; pos += 1) { // goes from 0 degrees to 180 degrees\n    // in steps of 1 degree\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\n    delay(15);                       // waits 15ms for the servo to reach the position\n  }\n  for (pos = 180; pos &gt;= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\n    delay(15);                       // waits 15ms for the servo to reach the position\n  }\n\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#upload-the-code-to-the-arduino","title":"Upload the code to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#modify-the-code-for-the-lab","title":"Modify The Code For The Lab","text":"<p>Modify the code to do the following:</p> <ul> <li> <p>Move Servo Motor Clockwise 180 deg</p> </li> <li> <p>Stop 1 second</p> </li> <li> <p>Move Servo Motor Counterclockwise 180 deg</p> </li> <li> <p>Stop 1 second</p> </li> <li> <p>repeat continuously</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#source-code-for-lab-2","title":"Source Code For Lab 2","text":"<ul> <li> <p>Modified Ardunio Source Code File: Lab02ArduinoServo.ino</p> </li> <li> <p>Library file: Servo.zip</p> </li> </ul> <pre><code>// Lab02ArduinoServo.ino\n//\n// Modified by: Steve Ellermann\n// Modified date:  2023-03-01\n// \n// Original code by: www.elegoo.com\n// Original date: 2016-12-18\n//\n// Library Required: Servo.zip\n// https://github.com/arduino-libraries/Servo\n\n#include &lt;Servo.h&gt;\n\nServo myservo;                             // create servo object to control a servo\n                                           // twelve servo objects can be created on most boards\n\nint pos = 0;                               // variable to store the servo position\n\nvoid setup() {\n  Serial.begin(9600);\n  myservo.attach(9);                       // attaches the servo on pin 9 to the servo object\n}\n\nvoid loop() {\n  for (pos = 0; pos &lt;= 180; pos += 1) {    // goes from 0 degrees to 180 degrees\n                                           // in steps of 1 degree\n    myservo.write(pos);                    // tell servo to go to position in variable 'pos'\n    delay(5);                              // waits 15ms for the servo to reach the position\n  }\n\n  delay(1000);                             // wait 1 second\n\n  for (pos = 180; pos &gt;= 0; pos -= 1) {    // goes from 180 degrees to 0 degrees\n    myservo.write(pos);                    // tell servo to go to position in variable 'pos'\n    delay(5);                              // waits 15ms for the servo to reach the position\n  }\n\n  delay(1000);                             // wait 1 second\n\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#upload-the-code-to-the-arduino_1","title":"Upload the code to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#how-to-upload-a-sketch-with-the-arduino-ide-2","title":"How to upload a sketch with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc How to upload a sketch with the Arduino IDE 2</li> </ul> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#requirements_1","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor. Results</p> <p>If you see the Arduino onboard LED blinking (100ms ON, 500ms OFF). Congratulations! Your PC / Arduino have passed the System Verification Test.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#how-to-add-library-files-to-the-arduino-ide-2","title":"How To Add Library Files To The Arduino IDE 2","text":"<p>From within the Arduino IDE, with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the pitches.zip file downloaded from this page.</p> <ul> <li>Library File: Servo.zip</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#how-to-install-a-library-with-the-arduino-ide-2","title":"How to install a library with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc Installing libraries</li> </ul> <p>A large part of the Arduino programming experience is the use of libraries. There are thousands of libraries that can be found online, and the best documented ones can be found and installed directly through the editor.</p> <p>In this tutorial, we will go through how to install a library using the library manager in the Arduino IDE 2. We will also show how to access examples from a library that you have installed.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#requirements_2","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#why-use-libraries","title":"Why Use Libraries?","text":"<p>Libraries are incredibly useful when creating a project of any type. They make our development experience much smoother, and there almost an infinite amount out there. They are used to interface with many different sensors, RTCs, Wi-Fi modules, RGB matrices and of course with other components on your board.</p> <p>Arduino has many official libraries, but the real heroes are the Arduino community, who develop, maintain and improve their libraries on a regular basis.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#installing-a-library","title":"Installing a Library","text":"<p>Installing a library is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the left column. Here, we can see a couple of icons. Let's click the on the \"library\" icon.</p> </li> </ol> <p></p> <ol> <li>A list will now appear of all available libraries, where we can also search for the library we want to use. In this example, we are going to install the RTCZero library. Click on the \"INSTALL\" button to install the library.</li> </ol> <p></p> <ol> <li>This process should not take too long, but allow up to a minute to install it.</li> </ol> <p></p> <ol> <li>When it is finished, we can take a look at the library in the library manager column, where it should say \"INSTALLED\".</li> </ol> <p></p> <p>Congratulations! You have now successfully downloaded and installed a library on your machine.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#including-a-library","title":"Including a Library","text":"<p>To use a library, you first need to include the library at the top of the sketch.</p> <p></p> <p>Almost all libraries come with already made examples that you can use. These are accessible through File &gt; Examples &gt; {Library} &gt; {Example}. In this example, we are choosing the RTCZero &gt; SimpleRTC.</p> <p></p> <p>You can also access library examples directly in the library manager, by clicking the three dots next to the installed library, like this: </p> <p></p> <p>The chosen example will now open up in a new window, and you can start using it however you want to.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/","title":"Arduino Lab 3 - Ultrasonic Sensor","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#overview","title":"Overview","text":"<p>Ultrasonic sensor is great for all kind of projects that need distance measurements, avoiding obstacles as examples.</p> <p>The HC-SR04 is inexpensive and easy to use since we will be using a Library specifically designed for these sensor. </p> <p>In this lab, you will learn how to use an ultrasonic sensor in conjunction with a passive buzzer to measure the distance of an object from the ultrasonic sensor with sound and text text as output.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#requirements","title":"Requirements:","text":"<ul> <li>Arduino IDE (Arduino 2 was used for this document)</li> <li>(1) x Arduino Uno R3 or Elegoo Uno R3</li> <li>(1) x Passive buzzer</li> <li>(1) x Ultrasonic sensor module HC-SR04</li> <li>(6) x F-M wires (Female to Male DuPont wires)</li> <li>(1) x USB 2.0 Type A to USB 2.0 Type B Cable</li> </ul>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#datasheets","title":"Datasheets:","text":"<ul> <li>Arduino UNO R3 Datasheet</li> <li>ELEGOO UNO R3 Datasheet</li> <li>HC-SR04 Ultrasonic Sensor Module Datasheet</li> <li>Passive Buzzer Datasheet</li> </ul>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#component-introduction","title":"Component Introduction","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#ultrasonic-sensor","title":"Ultrasonic sensor","text":"<p>Ultrasonic sensor module HC-SR04 provides 2cm-400cm non-contact measurement function, the ranging accuracy can reach to 3mm. The modules includes ultrasonic transmitters, receiver and control circuit. The basic principle of work:</p> <ol> <li>Using IO trigger for at least 10us high level signal,</li> <li>The Module automatically sends eight 40 kHz and detect whether there is a pulse signal back.</li> <li>IF the signal back, through high level , time of high output IO duration is the time from sending ultrasonic tore turning.</li> </ol> <p>Test distance = (high level time \u00d7 velocity of sound (340m/s) /2</p> <p>The Timing diagram is shown below. You only need to supply a short 10us pulse to the trigger input to start the ranging, and then the module will send out an 8 cycle burst of ultrasound at 40 kHz and raise its echo. The Echo is a distance object that is pulse width and the range in proportion .You can calculate the range through the time interval between sending trigger signal and receiving echo signal. Formula: us / 58 = centimeters or us / 148 =inch; or: the range = high level time * velocity (340M/S) / 2; we suggest to use over 60ms measurement cycle, in order to prevent trigger signal to the echo signal.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#ultrasonic-sensor-module-timing-diagram","title":"Ultrasonic Sensor Module Timing Diagram","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#ultrasonic-sensor-module-connection","title":"Ultrasonic Sensor Module Connection","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#schematic","title":"Schematic","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#wiring-diagram","title":"Wiring Diagram","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#example-picture","title":"Example Picture","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#code","title":"Code","text":"<p>Using a Library designed for these sensors will make our code short and simple. We include the library at the beginning of our code, and then by using simple commands we can control the behavior of the sensor.</p> <p>After wiring, please type in or open the program Lab03ArduinoSR04Example.ino in the Arduino IDE code and click UPLOAD to upload the program.</p> <p>Before you can run this, make sure that you have installed the HC-SR04.zip library or re-install it, if necessary. Otherwise, your code won't work.</p> <p>For details about loading the library file, see \"How To Insall A Library\" at the bottom of this document.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#example-ultrasonic-sensor-code","title":"Example Ultrasonic Sensor Code","text":"<ul> <li>Ardunio Example Source Code File: Lab03ArduinoSR04Example.ino</li> <li>Library File: HC-SR04.zip</li> </ul> <pre><code>// Example ultrasonic sensor module code\n// Lab03ArduinoSR04Example.ino\n//\n// Library Required: HC-SR04.zip\n//\n//  www.elegoo.com\n//  2016.12.08\n#include \"SR04.h\"\n#define TRIG_PIN 12\n#define ECHO_PIN 11\nSR04 sr04 = SR04(ECHO_PIN,TRIG_PIN);\nlong a;\n\nvoid setup() {\n   Serial.begin(9600);\n   delay(1000);\n}\n\nvoid loop() {\n   a=sr04.Distance();\n   Serial.print(a);\n   Serial.println(\"cm\");\n   delay(1000);\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#upload-the-code-to-the-arduino","title":"Upload the code to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#passive-buzzer","title":"Passive Buzzer:","text":"<p>The working principle of passive buzzer is using PWM generating audio to make the air to vibrate. Appropriately changed as long as the vibration frequency, it can generate different sounds. For example, sending a pulse of 523Hz, it can generate Alto Do, pulse of 587Hz, it can generate mid-range Re, pulse of 659Hz, it can produce mid-range Mi. By the buzzer, you can play a song. </p> <p>We should be careful not to use the UNO R3 board analog Write () function to generate a pulse to the buzzer, because the pulse output of analog Write () is fixed (500Hz).</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#passive-buzzer-connection","title":"Passive Buzzer Connection","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#schematic_1","title":"Schematic","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#wiring-diagram_1","title":"Wiring Diagram","text":"<p>Wiring the buzzer connected to the UNO R3 board, the red (positive) to the pin 8, black wire (negative) to the GND.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#example-picture_1","title":"Example Picture","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#code_1","title":"Code","text":"<p>After wiring, please type in or open the program Lab03ArduinoPassiveBuzzerExample.ino in the Arduino IDE code and click UPLOAD to upload the program.</p> <p>Before you can run this, make sure that you have installed the pitches.zip library or re-install it, if necessary. Otherwise, your code won't work.</p> <p>For details about loading the library file, see \"How To Insall A Library\" at the bottom of this document.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#example-passive-buzzer-code","title":"Example Passive Buzzer Code","text":"<ul> <li>Ardunio Example Source Code File: Lab03ArduinoPassiveBuzzerExample.ino</li> <li>Library File: pitches.zip</li> </ul> <pre><code>// Lab03ArduinoPassiveBuzzerExample.ino\n// Example passive buzzer code\n//\n// Library Required: pitches.zip\n//\n// www.elegoo.com\n// 2016.12.08\n\n#include \"pitches.h\"\n\n// notes in the melody:\nint melody[] = {\n  NOTE_C5, NOTE_D5, NOTE_E5, NOTE_F5, NOTE_G5, NOTE_A5, NOTE_B5, NOTE_C6};\nint duration = 500;  // 500 miliseconds\n\nvoid setup() {\n\n}\n\nvoid loop() {  \n  for (int thisNote = 0; thisNote &lt; 8; thisNote++) {\n    // pin8 output the voice, every scale is 0.5 sencond\n    tone(8, melody[thisNote], duration);\n\n    // Output the voice after several minutes\n    delay(1000);\n  }\n\n  // restart after two seconds \n  delay(2000);\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#upload-the-source-code-and-library-to-the-arduino","title":"Upload the source code and library to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#modify-the-code-for-the-lab","title":"Modify The Code For The Lab","text":"<p>Modify the code to do the following:</p> <pre><code>Read distance (between your hand and the sensor) using Ultrasonic sensor:\n\nif (distance &gt; 5 cm)\n{\n    turn Onboard LED ON;\n    Buzzer On;\n    delay(100 ms);\n    turn Onboard LED OFF;\n    Buzzer OFF;\n    delay(1000 ms);\n}\n\nif (distance &lt;= 5 cm)\n{\n    turn Onboard LED ON; \n    Buzzer On;\n    delay(100 ms);\n    turn Onboard LED OFF;\n    Buzzer OFF\n    delay(100 ms);\n}\nrepeat continuously\n</code></pre>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#putting-it-all-together-ultrasonic-sensor-and-the-passive-buzzer","title":"Putting it all together, Ultrasonic Sensor and the Passive Buzzer","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#wiring-diagram_2","title":"Wiring Diagram","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#source-code-for-lab-3","title":"Source Code For Lab 3","text":"<ul> <li>Modified Ardunio Source Code File: Lab03ArduinoLibrariesRequired.ino</li> <li>Library File: HC-SR04.zip</li> <li>Library File: pitches.zip</li> </ul> <pre><code>// Lab03ArduinoLibrariesRequired.ino\n// \n// Author: Steve Ellermannn\n// Modified: 2023-02-28\n//\n// Library required: HC-SR04.zip\n// Library required: pitches.zip\n//\n// https://www.arduino.cc/reference/en/\n//\n// Ardunio (Elegoo) Uno R3 Board\n// 5V Passive Buzzer\n// HC-SR04 Ultrasonic Module\n//\n// Passive Bussier Wiring\n// + to Digital \"8\"\n// - to Digital \"GND\"\n//\n// HC-SR04 Ultrasonic Module Wiring\n// VCC to Power \"5V\"\n// TRIG to Digital \"12\"\n// ECHO to Ditial \"11\"\n// GND to Power \"GND\" \n\n// Library for Ultrasonic Sennsor\n#include \"SR04.h\"\n// Library for Passive Buzzer\n#include \"pitches.h\"\n\n// For the ultrasonic sensor\n#define TRIG_PIN 12\n#define ECHO_PIN 11\n\n// For the passive buzzer\n#define BUZZER_PIN 8\n\nSR04 sr04 = SR04(ECHO_PIN,TRIG_PIN);\n\nlong distance;\n\nvoid setup() {\n   Serial.begin(9600);\n}\n\n// repeat infinitely \nvoid loop() {\n   distance=sr04.Distance();\n   Serial.print(\"Distance: \");\n   Serial.print(distance);\n   Serial.println(\" cm\");\n   delay(100);\n\n   if (distance &gt; 5) {\n     // turn the LED on (HIGH is the voltage level)\n     digitalWrite(LED_BUILTIN, HIGH);\n\n     // play a tone on the passive buzzer\n     tone(8, NOTE_C5, 100);\n\n     // wait for 100 milliseconds\n     delay(100);\n\n     // turn the LED off by making the voltage LOW                      \n     digitalWrite(LED_BUILTIN, LOW);\n\n     // turn the tone off\n     noTone(8);\n\n    // wait for 1000 milliseconds\n      delay(1000);\n   }\n\n  if (distance &lt;= 5) {\n     // turn the LED on (HIGH is the voltage level)\n     digitalWrite(LED_BUILTIN, HIGH);\n\n     // play a tone on the passive buzzer\n     tone(8, NOTE_G5, 100);\n\n     // wait for 100 milliseconds\n     delay(100);\n\n     // turn the LED off by making the voltage LOW                      \n     digitalWrite(LED_BUILTIN, LOW);\n\n     // turn the tone off\n     noTone(8);\n\n    // wait for 100 milliseconds\n      delay(100);\n  }\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#how-to-upload-a-sketch-with-the-arduino-ide-2","title":"How to upload a sketch with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc How to upload a sketch with the Arduino IDE 2</li> </ul> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#requirements_1","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor. Results</p> <p>If you see the Arduino onboard LED blinking (100ms ON, 500ms OFF). Congratulations! Your PC / Arduino have passed the System Verification Test.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#how-to-add-library-files-to-the-arduino-ide-2","title":"How To Add Library Files To The Arduino IDE 2","text":"<p>From within the Arduino IDE, with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the pitches.zip file downloaded from this page.</p> <ul> <li>Library File: HC-SR04.zip</li> <li>Library File: pitches.zip</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#how-to-install-a-library-with-the-arduino-ide-2","title":"How to install a library with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc Installing libraries</li> </ul> <p>A large part of the Arduino programming experience is the use of libraries. There are thousands of libraries that can be found online, and the best documented ones can be found and installed directly through the editor.</p> <p>In this tutorial, we will go through how to install a library using the library manager in the Arduino IDE 2. We will also show how to access examples from a library that you have installed.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#requirements_2","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#why-use-libraries","title":"Why Use Libraries?","text":"<p>Libraries are incredibly useful when creating a project of any type. They make our development experience much smoother, and there almost an infinite amount out there. They are used to interface with many different sensors, RTCs, Wi-Fi modules, RGB matrices and of course with other components on your board.</p> <p>Arduino has many official libraries, but the real heroes are the Arduino community, who develop, maintain and improve their libraries on a regular basis.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#installing-a-library","title":"Installing a Library","text":"<p>Installing a library is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the left column. Here, we can see a couple of icons. Let's click the on the \"library\" icon.</p> </li> </ol> <p></p> <ol> <li>A list will now appear of all available libraries, where we can also search for the library we want to use. In this example, we are going to install the RTCZero library. Click on the \"INSTALL\" button to install the library.</li> </ol> <p></p> <ol> <li>This process should not take too long, but allow up to a minute to install it.</li> </ol> <p></p> <ol> <li>When it is finished, we can take a look at the library in the library manager column, where it should say \"INSTALLED\".</li> </ol> <p></p> <p>Congratulations! You have now successfully downloaded and installed a library on your machine.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#including-a-library","title":"Including a Library","text":"<p>To use a library, you first need to include the library at the top of the sketch.</p> <p></p> <p>Almost all libraries come with already made examples that you can use. These are accessible through File &gt; Examples &gt; {Library} &gt; {Example}. In this example, we are choosing the RTCZero &gt; SimpleRTC.</p> <p></p> <p>You can also access library examples directly in the library manager, by clicking the three dots next to the installed library, like this: </p> <p></p> <p>The chosen example will now open up in a new window, and you can start using it however you want to.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/","title":"Arduino Lab 4 - Stepper Motor Control","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#overview","title":"Overview","text":"<p>In this lab, you will learn to drive a stepper motor.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#requirements","title":"Requirements:","text":"<ul> <li>Arduino IDE (Arduino 2 was used for this document)</li> <li>(1) x Arduino Uno R3 or Elegoo Uno R3</li> <li>(1) x 830 tie-point plug -in Solderless Breadboard</li> <li>(1) x ULN2003 stepper motor driver module PCB</li> <li>(1) x 28BYJ-48 \u2013 5V Stepper Motor</li> <li>(1) x 9V 1A Snap-On Connector Clip Adapter</li> <li>(1) x 9V battery</li> <li>(1) x MB-V2 Breadboard Power Supply Module</li> <li>(6) x F-M wires (Female to Male DuPont wires)</li> <li>(1) x M-M wire (Male to Male jumper wire)</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#datasheets","title":"Datasheets:","text":"<ul> <li>Arduino UNO R3 Datasheet</li> <li>ELEGOO UNO R3 Datasheet</li> <li>830 tie-point plug -in Solderless Breadboard</li> <li>ULN2003 stepper motor driver module PCB</li> <li>28BYJ-48 \u2013 5V Stepper Motor Datasheet</li> <li>9V battery</li> <li>MB-V2 Breadboard Power Supply Module</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#required-libraries","title":"Required Libraries:","text":"<ul> <li>Stepper.zip version 1.1.3 was used for this document. More info can be found at https://www.arduino.cc/reference/en/libraries/stepper/ and the GitHub repository is located at https://github.com/arduino-libraries/Stepper.</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#component-introduction","title":"Component Introduction","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#28byj-48-5v-stepper-motor","title":"28BYJ-48 \u2013 5V Stepper Motor","text":"<p>A stepper motor is an electromechanical device which converts electrical pulses into discrete mechanical movements. The shaft or spindle of a stepper motor rotates in discrete step increments when electrical command pulses are applied to it in the proper sequence. The motors rotation has several direct relationships to these applied input pulses. The sequence of the applied pulses is directly related to the direction of motor shafts rotation. The speed of the motor shafts rotation is directly related to the frequency of the input pulses and the length of rotation is directly related to the number of input pulses applied. One of the most significant advantages of a stepper motor is its ability to be accurately controlled in an open loop system. Open loop control means no feedback information about position is needed. This type of control eliminates the need for expensive sensing and feedback devices such as optical encoders. Your position is known simply by keeping track of the input step pulses.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#stepper-motor-28byj-48-parameters","title":"Stepper motor 28BYJ-48 Parameters","text":"<ul> <li>Model: 28BYJ-48</li> <li>Rated voltage: 5V DC</li> <li>Number of Phase: 4</li> <li>Speed Variation Ratio: 1 / 64</li> <li>Stride Angle: 5.625\u00b0 / 64</li> <li>Frequency: 100Hz</li> <li>DC resistance: 50\u03a9 \u00b17% (25\u00b0C)</li> <li>Idle In-traction Frequency: &gt; 600Hz</li> <li>Idle Out-traction Frequency: &gt; 1000Hz</li> <li>In-traction Torque &gt; 34.3mN.m (120Hz)</li> <li>Self-positioning Torque &gt; 34.3mN.m</li> <li>Friction torque: 600-1200 gf.cm</li> <li>Pull in torque: 300 gf.cm</li> <li>Insulated resistance &gt; 10M\u03a9 (500V)</li> <li>Insulated electricity power: 600VAC / 1mA / 1s</li> <li>Insulation grade: A</li> <li>Rise in Temperature &lt; 40K(120Hz)</li> <li>Noise &lt; 35dB (120Hz, No load, 10cm)</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#interfacing-circuits","title":"Interfacing Circuits","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#wiring-diagram","title":"Wiring Diagram","text":"<p>The bipolar stepper motor usually has four wires coming out of it. Unlike unipolar steppers, bipolar steppers have no common center connection. They have two independent sets of coils instead. You can distinguish them from unipolar steppers by measuring the resistance between the wires. You should find two pairs of wires with equal resistance. If you\u2019ve got the leads of your meter connected to two wires that are not connected (i.e. not attached to the same coil), you should see infinite resistance (or no continuity).</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#breadboard-power-supply","title":"Breadboard Power Supply","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#mb-v2-breadboard-power-supply-module","title":"MB-V2 Breadboard Power Supply Module","text":"<p>The small DC motor is likely to use more power than an UNO R3 board digital output can handle directly. If we tried to connect the motor straight to an UNO R3 board pin, there is a good chance that it could damage the UNO R3 board. So we use a power supply module provides power supply.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#product-specifications","title":"Product Specifications:","text":"<ul> <li>Locking On/Off Switch</li> <li>LED Power Indicator</li> <li>Input voltage: 6.5-9v (DC) via 5.5mm x 2.1mm plug</li> <li>Output voltage: 3.3V/5v</li> <li>Maximum output current: 700 mA</li> <li>Independent control rail output. 0v, 3.3v, 5v to breadboard</li> <li>Output header pins for convenient external use</li> <li>Size: 2.1 in x 1.4 in</li> <li>USB device connector onboard to power external device</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#setting-up-output-voltage-of-the-breadboard-power-supply-module","title":"Setting up output voltage of the breadboard power supply module:","text":"<p>The left and right voltage output can be configured independently. To select the output voltage, move jumper to the corresponding pins. Note: power indicator LED and the breadboard power rails will not power on if both jumpers are in the \u201cOFF\u201d position.</p> <p></p> <p>Warning</p> <p>Make sure that you align the module correctly on the breadboard. The negative pin(-) on module lines up with the blue line(-) on breadboard and that the positive pin(+) lines up with the red line(+). Failure to do so could result in you accidentally reversing the power to your project.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#uln2003-driver-board","title":"ULN2003 Driver Board","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#uln2003-stepper-motor-driver-module-pcb","title":"ULN2003 Stepper Motor Driver Module PCB","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#product-description","title":"Product Description","text":"<ul> <li>Size: 42 mm x 30 mm</li> <li>Use ULN2003 driver chip, 500mA</li> <li>A B C D LED indicating the four phase stepper motor working condition.</li> <li>White jack is the four phase stepper motor standard jack.</li> <li>Power pins are separated</li> <li>We kept the rest pins of the ULN2003 chip for your further prototyping.</li> </ul> <p>The simplest way of interfacing a unipolar stepper to Arduino is to use a breakout for ULN2003A transistor array chip. The ULN2003A contains seven Darlington transistor drivers and is somewhat like having seven TIP120 transistors all in one package. The ULN2003A can pass up to 500 mA per channel and has an internal voltage drop of about 1V when on. It also contains internal clamp diodes to dissipate voltage spikes when driving inductive loads. To control the stepper, apply voltage to each of the coils in a specific sequence.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#the-sequence-would-go-like-this","title":"The sequence would go like this:","text":"<p>Here are schematics showing how to interface a unipolar stepper motor to four controller pins using a ULN2003A, and showing how to interface using four com.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#connection","title":"Connection","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#schematic","title":"Schematic","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#wiring-diagram_1","title":"Wiring Diagram","text":"<p>We are using 4 pins to control the Stepper. </p> <p>Pin 8-11 are controlling the Stepper motor. </p> <p>We connect the Ground from to UNO to the Stepper motor.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#example-photo","title":"Example Photo","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#code","title":"Code","text":"<p>After wiring, please open the example program Lab04ArduinoStepperExample.ino in the Arduino IDE and click UPLOAD to upload the program from the Arduino IDE.</p> <p>Before you can run this, make sure that you have installed the Stepper-1.1.3.zip library or re-install it to the Arduino IDE, if necessary. Otherwise, your code won't work.</p> <p>For details about loading the library file, see \"How To Add Library Files To The Arduino IDE\" at the bottom of this document.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#example-code","title":"Example Code","text":"<ul> <li> <p>Ardunio Example Source Code File: Lab04ArduinoStepperExample.ino</p> </li> <li> <p>Library File: Stepper-1.1.3.zip</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#lab04arduinostepperexampleino","title":"Lab04ArduinoStepperExample.ino","text":"<pre><code>// Lab04ArduinoStepperExample.ino\n//\n// Library Required: Stepper.zip\n//\n//www.elegoo.com\n//2018.10.25\n\n/*\n  Stepper Motor Control - one revolution\n\n  This program drives a unipolar or bipolar stepper motor.\n  The motor is attached to digital pins 8 - 11 of the Arduino.\n\n  The motor should revolve one revolution in one direction, then\n  one revolution in the other direction.\n\n*/\n\n#include &lt;Stepper.h&gt;\n\nconst int stepsPerRevolution = 2048;  // change this to fit the number of steps per revolution\nconst int rolePerMinute = 15;         // Adjustable range of 28BYJ-48 stepper is 0~17 rpm\n\n// initialize the stepper library on pins 8 through 11:\nStepper myStepper(stepsPerRevolution, 8, 10, 9, 11);\n\nvoid setup() {\n  myStepper.setSpeed(rolePerMinute);\n  // initialize the serial port:\n  Serial.begin(9600);\n}\n\nvoid loop() {  \n  // step one revolution  in one direction:\n  Serial.println(\"clockwise\");\n  myStepper.step(stepsPerRevolution);\n  delay(500);\n\n  // step one revolution in the other direction:\n  Serial.println(\"counterclockwise\");\n  myStepper.step(-stepsPerRevolution);\n  delay(500);\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#upload-the-code-to-the-arduino","title":"Upload the code to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#modify-the-code-for-the-lab","title":"Modify The Code For The Lab","text":"<p>Below is the pseudocode of the changes that need to be made.</p> <pre><code>Initialize direction = 0     \nloop()\n{ \n    toggle direction;\n\n    if (direction==1)\n      {\n       move stepper motor clockwise for 10 seconds;\n      }\n\n    if (direction==0) \n            { \n       move stepper motor counterclockwise for 10 seconds; \n       }\n} \nrepeat continuously\n</code></pre>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#source-code-for-lab-4","title":"Source Code For Lab 4:","text":"<ul> <li> <p>Download Ardunio Source Code File: Lab04Arduino.ino</p> </li> <li> <p>Download Library File: Stepper-1.1.3.zip</p> </li> </ul> <pre><code>// Lab04Arduino.ino\n// -----------------------------------\n// Author: Steve Ellermann\n// Created: 2023-03-21\n// Modified: 2023-03-22\n// -----------------------------------\n// This program drives a unipolar or bipolar stepper motor.\n// The motor is attached to digital pins 8 - 11 of the Arduino.\n//\n// The stepper motor should revolve clockwise for 10 seconds, then stepper\n// motor should revolve counterclockwise for 10 seconds.\n// -----------------------------------\n// Library Required: Stepper.zip\n// https://github.com/arduino-libraries/Stepper\n// -----------------------------------\n// Components Used:\n// -----------------------------------\n// Arduino UNO R3 or Elegoo UNO R3\n// 28BYJ-48 Stepper Motor\n// 4 Phase ULN2003A Stepper Motor Driver PCB\n// MB-V2 Breadboard Power Supply Module\n// 830 Tie Point Solderless Plug-In Breadboard\n// 9V Battery\n// 9V Battery Snap-On Connector Clip\n// USB A to USB B connector Cable\n// (6) x F-M wires (Female to Male DuPont wires)\n// (1) x M-M wire (Male to Male jumper wire)\n// (1) x wire twist tie\n//\n// -----------------------------------\n// Wiring\n// -----------------------------------\n// Stepper Motor Driver PCB INT1 to 11\n// Stepper Motor Driver PCB INT2 to 10\n// Stepper Motor Driver PCB INT3 to 9\n// Stepper Motor Driver PCB INT4 to 8\n// Stepper Motor Driver PCB - to Breadboard -5V \n// Stepper Motor Driver PCB + to Breadboard +5V\n// Stepper Motor Driver PCB: Stepper moto plugs into stepper motor driver PCB\n// Arduino UNO R3 or Elegoo UNO R3 Power GND to Breadboard -3.3V\n//\n// -----------------------------------\n\n// libraries\n#include &lt;Stepper.h&gt;\n\n// constants won't change.\nconst int stepsPerRevolution = 2048;   // change this to fit the number of steps per revolution\nconst int revolutionsPerMinute = 6;    // Adjustable range of 28BYJ-48 stepper is 0~17 rpm\nconst long interval = 10000;           // interval at which to rotate (milliseconds)\n\n// variables will change:\nunsigned long previousMillis = 0;      // will store last time stepper motor was updated\nunsigned long rotationDirection = 0;   // Initialize rotation direction to zero\n\n// initialize the stepper library on pins 8 through 11:\nStepper myStepper(stepsPerRevolution, 8, 10, 9, 11);\n\nvoid setup() {\n  // set the stepper motor speed\n  myStepper.setSpeed(revolutionsPerMinute);\n  // initialize the serial port:\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  // will store the number of milliseconds passed since the program begain running\n  unsigned long currentMillis = millis();\n\n  if (currentMillis - previousMillis &gt;= interval) {\n    // save the last time you changed rotation direction in milliseconds\n    previousMillis = currentMillis;\n\n    // toggle rotation direction\n    rotationDirection = 1 - rotationDirection;\n  }\n\n  // if rotation direction = 1, move stepper motor clockwise\n  if (rotationDirection == 1) {\n    // print rotation direction\n    Serial.println(\"clockwise\");    \n    // step in clockwise direction\n    myStepper.step(stepsPerRevolution);\n  } \n\n  // if rotation direction = 0, move stepper motor counterclockwise\n  if (rotationDirection == 0) {\n    // print rotation direction\n    Serial.println(\"counterclockwise\");\n    // step in counterclockwise direction\n    myStepper.step(-stepsPerRevolution);\n  }\n\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#upload-the-source-code-and-library-to-the-arduino","title":"Upload the source code and library to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#how-to-upload-a-sketch-with-the-arduino-ide-2","title":"How to upload a sketch with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc How to upload a sketch with the Arduino IDE 2</li> </ul> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#requirements_1","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor. Results</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#how-to-add-library-files-to-the-arduino-ide","title":"How To Add Library Files To The Arduino IDE","text":"<p>Arduino IDE 2</p> <p>From within the Arduino IDE with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the Stepper.zip file downloaded from this page.</p> <ul> <li>Download Library File: Stepper-1.1.3.zip</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#how-to-add-library-files-to-the-arduino-ide-2","title":"How To Add Library Files To The Arduino IDE 2","text":"<p>From within the Arduino IDE, with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the Stepper.zip file downloaded from this page.</p> <p>Stepper.zip</p> <p></p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#how-to-install-a-library-with-the-arduino-ide-2","title":"How to install a library with the Arduino IDE 2","text":"<p>Note</p> <ul> <li>Source: Arduino.cc Installing libraries</li> </ul> <p>A large part of the Arduino programming experience is the use of libraries. There are thousands of libraries that can be found online, and the best documented ones can be found and installed directly through the editor.</p> <p>In this tutorial, we will go through how to install a library using the library manager in the Arduino IDE 2. We will also show how to access examples from a library that you have installed.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#requirements_2","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#why-use-libraries","title":"Why Use Libraries?","text":"<p>Libraries are incredibly useful when creating a project of any type. They make our development experience much smoother, and there almost an infinite amount out there. They are used to interface with many different sensors, RTCs, Wi-Fi modules, RGB matrices and of course with other components on your board.</p> <p>Arduino has many official libraries, but the real heroes are the Arduino community, who develop, maintain and improve their libraries on a regular basis.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#installing-a-library","title":"Installing a Library","text":"<p>Installing a library is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the left column. Here, we can see a couple of icons. Let's click the on the \"library\" icon.</p> </li> </ol> <p></p> <ol> <li>A list will now appear of all available libraries, where we can also search for the library we want to use. In this example, we are going to install the RTCZero library. Click on the \"INSTALL\" button to install the library.</li> </ol> <p></p> <ol> <li>This process should not take too long, but allow up to a minute to install it.</li> </ol> <p></p> <ol> <li>When it is finished, we can take a look at the library in the library manager column, where it should say \"INSTALLED\".</li> </ol> <p></p> <p>Congratulations! You have now successfully downloaded and installed a library on your machine.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#including-a-library","title":"Including a Library","text":"<p>To use a library, you first need to include the library at the top of the sketch.</p> <p></p> <p>Almost all libraries come with already made examples that you can use. These are accessible through File &gt; Examples &gt; {Library} &gt; {Example}. In this example, we are choosing the RTCZero &gt; SimpleRTC.</p> <p></p> <p>You can also access library examples directly in the library manager, by clicking the three dots next to the installed library, like this: </p> <p></p> <p>The chosen example will now open up in a new window, and you can start using it however you want to.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/","title":"Arduino Lab 5 - Simulation of Collision Avoidance System","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#overview","title":"Overview","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#requirements","title":"Requirements","text":"<ul> <li>Arduino IDE (Arduino 2 was used for this document)</li> <li>(1) x SG90 Servo Motor</li> <li>(1) x HC-SR04 Ultrasonic Sensor Module</li> <li>(1) x MB-V2 Breadboard Power Supply Module</li> <li>(1) x 5V Passive Buzzer</li> <li>(1) x 28BYJ-48 5V Stepper Motor</li> <li>(1) x 830 tie-points breadboard</li> <li>(1) x 9V 1A Battery Adapter</li> <li>(1) x 9V Battery</li> <li>(8) x F-M wires (Female to Male DuPont wires)</li> <li>(8) x M-M wire (Male to Male jumper wire)</li> <li>(1) x USB 2.0 Type A to USB 2.0 Type B Cable</li> <li>(Optional) (1) x USB-C to USB Adapter</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#datasheets","title":"Datasheets","text":"<ul> <li>Arduino UNO R3 Datasheet</li> <li>ELEGOO UNO R3</li> <li>830 tie-point plug -in Solderless Breadboard</li> <li>ULN2003 stepper motor driver module PCB</li> <li>28BYJ-48 \u2013 5V Stepper Motor Datasheet</li> <li>Servo Motor SG90 Datasheet</li> <li>HC-SR04 Ultrasonic Sensor Module Datasheet</li> <li>Passive Buzzer Datasheet</li> <li>9V battery</li> <li>MB-V2 Breadboard Power Supply Module</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#required-libraries","title":"Required Libraries","text":"<ul> <li>pitches.zip</li> <li>HC-SR04.zip</li> <li>Servo-1.2.1.zip</li> <li>Stepper.zip</li> </ul> <p>More information about the Servo library is located at https://www.arduino.cc/reference/en/libraries/servo/</p> <p>The GitHub repository for the Servo library is located at https://github.com/arduino-libraries/Servo</p> <p>More info about the Stepper library can be found at https://www.arduino.cc/reference/en/libraries/stepper/ </p> <p>The GitHub repository for the Stepper library is located at https://github.com/arduino-libraries/Stepper</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#28byj-48-5v-stepper-motor","title":"28BYJ-48 \u2013 5V Stepper Motor","text":"<p>A stepper motor is an electromechanical device which converts electrical pulses into discrete mechanical movements. The shaft or spindle of a stepper motor rotates in discrete step increments when electrical command pulses are applied to it in the proper sequence. The motors rotation has several direct relationships to these applied input pulses. The sequence of the applied pulses is directly related to the direction of motor shafts rotation. The speed of the motor shafts rotation is directly related to the frequency of the input pulses and the length of rotation is directly related to the number of input pulses applied. One of the most significant advantages of a stepper motor is its ability to be accurately controlled in an open loop system. Open loop control means no feedback information about position is needed. This type of control eliminates the need for expensive sensing and feedback devices such as optical encoders. Your position is known simply by keeping track of the input step pulses.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#stepper-motor-28byj-48-parameters","title":"Stepper Motor 28BYJ-48 Parameters","text":"<ul> <li>Model: 28BYJ-48</li> <li>Rated voltage: 5V DC</li> <li>Number of Phase: 4</li> <li>Speed Variation Ratio: 1 / 64</li> <li>Stride Angle: 5.625\u00b0 / 64</li> <li>Frequency: 100Hz</li> <li>DC resistance: 50\u03a9 \u00b17% (25\u00b0C)</li> <li>Idle In-traction Frequency: &gt; 600Hz</li> <li>Idle Out-traction Frequency: &gt; 1000Hz</li> <li>In-traction Torque &gt; 34.3mN.m (120Hz)</li> <li>Self-positioning Torque &gt; 34.3mN.m</li> <li>Friction torque: 600-1200 gf.cm</li> <li>Pull in torque: 300 gf.cm</li> <li>Insulated resistance &gt; 10M\u03a9 (500V)</li> <li>Insulated electricity power: 600VAC / 1mA / 1s</li> <li>Insulation grade: A</li> <li>Rise in Temperature &lt; 40K(120Hz)</li> <li>Noise &lt; 35dB (120Hz, No load, 10cm)</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#stepper-motor-wiring-diagram","title":"Stepper Motor Wiring Diagram","text":"<p>The bipolar stepper motor usually has four wires coming out of it. Unlike unipolar steppers, bipolar steppers have no common center connection. They have two independent sets of coils instead. You can distinguish them from unipolar steppers by measuring the resistance between the wires. You should find two pairs of wires with equal resistance. If you\u2019ve got the leads of your meter connected to two wires that are not connected (i.e. not attached to the same coil), you should see infinite resistance (or no continuity).</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#mb-v2-breadboard-power-supply-module","title":"MB-V2 Breadboard Power Supply Module","text":"<p>The small DC motor is likely to use more power than an UNO R3 board digital output can handle directly. If we tried to connect the motor straight to an UNO R3 board pin, there is a good chance that it could damage the UNO R3 board. So we use a power supply module provides power supply.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#product-specifications","title":"Product Specifications","text":"<ul> <li>Locking On/Off Switch</li> <li>LED Power Indicator</li> <li>Input voltage: 6.5-9v (DC) via 5.5mm x 2.1mm plug</li> <li>Output voltage: 3.3V/5v</li> <li>Maximum output current: 700 mA</li> <li>Independent control rail output. 0v, 3.3v, 5v to breadboard</li> <li>Output header pins for convenient external use</li> <li>Size: 2.1 in x 1.4 in</li> <li>USB device connector onboard to power external device</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#setting-up-output-voltage","title":"Setting up output voltage:","text":"<p>The left and right voltage output can be configured independently. To select the output voltage, move jumper to the corresponding pins.</p> <p>Note</p> <p>The power indicator LED and the breadboard power rails will not power on if both jumpers are in the \u201cOFF\u201d position.</p> <p></p> <p>Warning</p> <p>Make sure that you align the module correctly on the breadboard. The negative pin(-) on module lines up with the blue line(-) on breadboard and that the positive pin(+) lines up with the red line(+). Failure to do so could result in you accidentialy reversing the power to your project</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#uln2003-stepper-motor-driver-module-pcb","title":"ULN2003 Stepper Motor Driver Module PCB","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#product-description","title":"Product Description","text":"<ul> <li>Size: 42mmx30mm</li> <li>Use ULN2003 driver chip, 500mA</li> <li>A, B, C, and D LED lights indicating the four phase stepper motor working condition. </li> <li>White jack is the four phase stepper motor standard jack.</li> <li>Power pins are separated</li> <li>The rest pins of the ULN2003 chip for your further prototyping.</li> </ul> <p>The simplest way of interfacing a unipolar stepper to Arduino is to use a breakout for ULN2003A transistor array chip. The ULN2003A contains seven Darlington transistor drivers and is somewhat like having seven TIP120 transistors all in one package. The ULN2003A can pass up to 500 mA per channel and has an internal voltage drop of about 1V when on. It also contains internal clamp diodes to dissipate voltage spikes when driving inductive loads. To control the stepper, apply voltage to each of the coils in a specific sequence.</p> <p>The sequence would go like this</p> <p></p> <p>Here are schematics showing how to interface a unipolar stepper motor to four controller pins using a ULN2003A, and showing how to interface using four com</p> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#connection","title":"Connection","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#schematic","title":"Schematic","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#wiring-diagram","title":"Wiring Diagram","text":"<p>We are using 4 pins to control the Stepper.</p> <p>Pin 8-11 are controlling the Stepper motor.</p> <p>We connect the Ground from to UNO to the Stepper motor.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#example-photo","title":"Example Photo","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#servo-motor-sg90","title":"Servo Motor SG90","text":"<ul> <li>Universal for JR and FP connector</li> <li>Cable length: 25cm</li> <li>No load; Operating speed: 0.12 sec / 60 degree (4.8V), 0.10 sec / 60 degree (6.0V)</li> <li>Stall torque (4.8V): 1.6kg/cm</li> <li>Temperature : -30 ~ 60'C</li> <li>Dead band width: 5us</li> <li>Working voltage: 3.5~6V</li> <li>Dimension : 1.26 in x 1.18 in x 0.47 in (3.2 cm x 3 cm x 1.2 cm)</li> <li>Weight : 4.73 oz (134 g)</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#connection-schematic","title":"Connection Schematic","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#wiring-diagram_1","title":"Wiring Diagram","text":"<p>Note For Servo Motor SG90</p> <ul> <li>The BROWN wire from the servo motor connects to GND on the Uno R3 board with an M-M wire.</li> <li>The RED wire from the servo motor connects to 5V on the Uno R3 board with an M-M wire.</li> <li>The ORANGE wire from the servo motor connects to ~9 on the Uno R3 board with an M-M wire.</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#example-picture","title":"Example Picture","text":"<p>In the picture, the BROWN wire of servo is connected via the BLACK M-M wires, the RED one is connected via the RED M-M wires, and the ORANGE one is connected via the YELLOW M-M wires.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#hc-sr04-ultrasonic-sensor-module","title":"HC-SR04 Ultrasonic Sensor Module","text":"<p>Ultrasonic sensor module HC-SR04 provides 2cm-400cm non-contact measurement function, the ranging accuracy can reach to 3mm. The modules includes ultrasonic transmitters, receiver and control circuit. The basic principle of work:</p> <ol> <li>Using IO trigger for at least 10us high level signal,</li> <li>The Module automatically sends eight 40 kHz and detect whether there is a pulse signal back.</li> <li>If the signal back, through high level , time of high output IO duration is the time from sending ultrasonic tore turning.</li> </ol> <p>Test distance = (high level time \u00d7 velocity of sound (340m/s) /2)</p> <p>The Timing diagram is shown below. You only need to supply a short 10us pulse to the trigger input to start the ranging, and then the module will send out an 8 cycle burst of ultrasound at 40 kHz and raise its echo. The Echo is a distance object that is pulse width and the range in proportion .You can calculate the range through the time interval between sending trigger signal and receiving echo signal. Formula: us / 58 = centimeters or us / 148 =inch; or: the range = high level time * velocity (340M/S) / 2; we suggest to use over 60ms measurement cycle, in order to prevent trigger signal to the echo signal.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#ultrasonic-sensor-module-timing-diagram","title":"Ultrasonic Sensor Module Timing Diagram","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#ultrasonic-sensor-module-connection","title":"Ultrasonic Sensor Module Connection","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#ultrasonic-sensor-schematic","title":"Ultrasonic Sensor Schematic","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#ultrasonic-sensor-wiring-diagram","title":"Ultrasonic Sensor Wiring Diagram","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#ultrasonic-sensor-example-picture","title":"Ultrasonic Sensor Example Picture","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#passive-buzzer","title":"Passive Buzzer","text":"<p>The working principle of passive buzzer is using PWM generating audio to make the air to vibrate. Appropriately changed as long as the vibration frequency, it can generate different sounds. For example, sending a pulse of 523Hz, it can generate Alto Do, pulse of 587Hz, it can generate mid-range Re, pulse of 659Hz, it can produce mid-range Mi. By the buzzer, you can play a song.</p> <p>We should be careful not to use the UNO R3 board analog <code>Write()</code> function to generate a pulse to the buzzer, because the pulse output of analog <code>Write()</code> is fixed (500Hz).</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#passive-buzzer-connection","title":"Passive Buzzer Connection","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#passive-buzzer-schematic","title":"Passive Buzzer Schematic","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#wiring-diagram_2","title":"Wiring Diagram","text":"<p>Wiring the buzzer connected to the UNO R3 board, the RED  Wire (positive) to the PIN 8, BLACK Wire (negative) to the GND.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#passive-buzzer-example-picture","title":"Passive Buzzer Example Picture","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#putting-it-all-together-breadboard-power-supply-stepper-motor-stepper-motor-driver-module-pcb-servo-motor-ultrasonic-sensor-and-the-passive-buzzer","title":"Putting it all together, Breadboard Power Supply, Stepper Motor, Stepper Motor Driver Module PCB, Servo Motor, Ultrasonic Sensor, and the Passive Buzzer","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#flow-chart","title":"Flow Chart","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#wiring-diagram_3","title":"Wiring Diagram","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#code","title":"Code","text":"<p>After wiring, please open the example program Lab05ArduinoCollisionAvoidance.ino in the Arduino IDE and click UPLOAD to upload the program from the Arduino IDE.</p> <p>Before you can run this, make sure that you have installed all of the the library files (Stepper-1.1.3.zip, HC-SR04.zip, pitches.zip, Servo-1.2.1.zip) or re-install it to the Arduino IDE, if necessary. Otherwise, your code will not work.</p> <p>For details about loading the library file, see How \"How To Add Library Files To The Arduino IDE\" at the bottom of this document.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#source-code-for-lab-5","title":"Source Code For Lab 5","text":"<ul> <li>Download Ardunio Source Code File: Lab05ArduinoCollisionAvoidance.ino</li> </ul> <p>Lab05ArduinoCollisionAvoidance.ino</p> Arduino <pre><code>// Lab05ArduinoCollisionAvoidance.ino\n//\n// Collision Avoidance System\n//\n// Author: Steve Ellermann\n// \n// Created:  2023-03-24\n// Modified: 2023-04-01\n//\n// Libraries Required:\n// Stepper.zip\n// HC-SR04.zip\n// pitches.zip\n// Servo.zip\n//\n//  Wiring:\n// -------------------------------------------------\n// Pin Digital GND | Breadboard 5V\n// Pin 13          | Echo - Ultrasonic Sensor\n// Pin 12          | Trig - Ultrasonic Sensor\n// Pin 11          | IN1 - ULN2003 Driver Board\n// Pin 10          | IN2 - ULN2003 Driver Board\n// Pin  9          | IN3 - ULN2003 Driver Board\n// Pin  8          | IN4 - ULN2003 Driver Board\n// Pin  7          | + on Passive Buzzer\n// Pin  6          | Orange Wire - SG90 Servo Motor\n// Power GND       | GND - Ultrasonic Sensor\n// Power 5V        | Breadboard 5V\n// -------------------------------------------------\n//\n// Supplies\n//\n// Software:\n// (1) x Arduino IDE (ver 2 was used)\n//\n// Hardware:\n// (1) x Elegoo UNO R3\n// (1) x SG90 Servo Motor\n// (1) x HC-SR04 Ultrasonic Sensor Module\n// (1) x MB-V2 Breadboard Power Supply Module\n// (1) x 5V Passive Buzzer\n// (1) x 28BYJ-48 5V Stepper Motor\n// (1) x 830 tie-points breadboard\n// (1) x 9V 1A Battery Adapter\n// (1) x 9V Battery\n// (8) x F-M wires (Female to Male DuPont wires)\n// (8) x M-M wire (Male to Male jumper wire)\n// (1) x USB 2.0 Type A to USB 2.0 Type B Cable\n// (Optional) (1) x USB-C to USB Adapter\n//\n\n// Libraries\n// #include \"Stepper.h\"         // library for stepper motor\n#include \"AccelStepper.h\"    // library for stepper motor\n#include \"SR04.h\"            // library for ultrasonic sensor\n#include \"pitches.h\"         // library for passive buzzer\n#include \"Servo.h\"           // library for servo motor\n\n// Definitions\n#define SERVO_PIN 6          // Pin for servo motor\n#define BUZZER_PIN 7         // Pin for passive buzzer\n#define STEPPER_PIN_1 8      // Pin for stepper motor\n#define STEPPER_PIN_2 9      // Pin for stepper motor\n#define STEPPER_PIN_3 10     // Pin for stepper motor\n#define STEPPER_PIN_4 11     // Pin for stepper motor\n#define ECHO_PIN 12          // Pin for ultrasonic sensor\n#define TRIG_PIN 13          // Pin for ultrasonic sensor\n#define STEPPER_STEPS 32     // Number of steps per revolution of stepper motor internal shaft\n#define MotorInterfaceType 8 // Define the AccelStepper interface type; 4 wire motor in half step mode:\n\n// Constants\nconst int STEPPER_STEPS_TO_TAKE = 30;               // 2048 = 1 Revolution of stepper motor\n// const int STEPPER_SPEED = 500;                      // Stepper motor speed max seems to be 500\nconst int STEPPER_SPEED = 500;                      // Stepper motor speed\nconst int STEPPER_MAX_SPEED = 1000;                 // Stepper motor speed max speed\nconst int THRESHOLD = 5;                            // Threshold distance in cm\nconst bool DEBUG = false;                           // Display debug information\n\n// Variables\nint servoPosition = 0;                              // variable to store the servo position\nunsigned long ultrasonicDistance;                   // initialize ultrasonic sensor variable for distance\nunsigned int toggleStepperRotation = 0;             // toggle stepper rotation\nbool hasRunOnce = 0;                                // has the program run once\n\n\n// Objects\n\n// Instantiate the stepper library\n// Setup of proper sequencing for Motor Driver Pins\n// In1, In2, In3, In4 in the sequence 1-3-2-4 for the 28BYJ-48 stepper motor\n//Stepper myStepper(STEPPER_STEPS, STEPPER_PIN_0, STEPPER_PIN_2, STEPPER_PIN_1, STEPPER_PIN_3);\n\n// Initialize with pin sequence IN1-IN3-IN2-IN4 for using the AccelStepper library with 28BYJ-48 stepper motor:\nAccelStepper  myStepper = AccelStepper(MotorInterfaceType, STEPPER_PIN_1, STEPPER_PIN_3, STEPPER_PIN_2, STEPPER_PIN_4);\n\n// Instantiate servo object to control a servo\nServo myServo;  \n\n// Instantiate the ultrasonic sensor\nSR04 myUltrasonic = SR04(ECHO_PIN,TRIG_PIN);\n\n// Run once\nvoid setup() {\n  Serial.begin(9600);\n  myServo.attach(SERVO_PIN);                        // attaches the servo on SERVO_PIN to the servo object\n\n  // Set the maximum steps per second:\n  myStepper.setMaxSpeed(STEPPER_MAX_SPEED);\n}\n\n// Run repeatedly\nvoid loop() {\n\n  if (hasRunOnce == 0) {\n\n    if (DEBUG) {                                                         // print information for debugging\n      Serial.println(\"hasRunOnce: No\");                                  // print if program has run once\n      Serial.println(\"Stepper Motor Rotation: clockwise\");               // print stepper motor rotation direction\n    }\n\n    hasRunOnce = 1;                                                   // update the variable\n\n    stepperRotateClockwise();                                            // rotate stepper motor clockwise\n\n  } else {\n\n    ultrasonicDistance = myUltrasonic.Distance();                        // update ultrasonic sensor variable\n\n    if (DEBUG) {                                                         // print information for debugging\n      Serial.print(\"Ultrasonic Sensor Distance: \");                      // print the distance from the ultrasonic sensor in cm\n      Serial.print(ultrasonicDistance);                                  // print the distance from the ultrasonic sensor in cm\n      Serial.println(\" cm\");                                             // print the distance from the ultrasonic sensor in cm\n    }\n\n    if (ultrasonicDistance &lt;= THRESHOLD) {                               // toggle the variable based on distance from ultrasonic sensor\n\n      toggleStepperRotation = 1;\n\n    } else {\n\n      toggleStepperRotation = 0;\n\n    }\n\n    /*\n    switch(toggleStepperRotation) {                                      // decision loop\n\n      case 0:\n        if (DEBUG) { \n          Serial.println(\"Stepper Motor Rotation: clockwise\");             // print stepper motor rotation direction\n        }\n        muteBuzzer();\n        servoRotateToZero();\n        stepperRotateClockwise();\n        break;\n\n      case 1:\n        if (DEBUG) {       \n          Serial.println(\"Stepper Motor Rotation: counterclockwise\");      // print stepper motor rotation direction\n        }\n        playBuzzer();\n        servoRotateToOneEighy();\n        stepperRotateCounterClockwise();\n        break;\n\n      default:\n        break;\n    }\n    */\n\n  }\n\n}\n\n// Rotate stepper motor clockwise\nvoid stepperRotateClockwise() {\n  myStepper.setSpeed(STEPPER_SPEED);                                     // stepper motor speed\n  //myStepper.step(STEPPER_STEPS_TO_TAKE);                                 // rotate clockwise\n  myStepper.runSpeed();                                                  // rotate clockwise\n}\n\n// Rotate stepper motor counter clockwise\nvoid stepperRotateCounterClockwise() {\n  myStepper.setSpeed(-STEPPER_SPEED);                                     // stepper motor speed\n  //myStepper.step(-STEPPER_STEPS_TO_TAKE);                                // rotate counterclockwise\n  myStepper.runSpeed();                                                  // rotate clockwise\n}\n\n// Play a tone\nvoid playBuzzer() {\n  tone(BUZZER_PIN, NOTE_G5, 100);                                        // play a tone on the passive buzzer\n}\n\n// Mute the tone\nvoid muteBuzzer() {\n  noTone(BUZZER_PIN);                                                    // turn the tone off\n}\n\n// Rotate servo motor to 0 degrees\nvoid servoRotateToZero() {                                               // rotate servo to 0 degree position\n  for (servoPosition = 180; servoPosition &gt;= 0; servoPosition -= 1) {    // goes from 180 degrees to 0 degrees in steps of 1 degree\n    myServo.write(servoPosition);                                        // tell servo to go to position in variable 'pos'\n  }\n}\n\n// Rotate servo motor to 180 degrees\nvoid servoRotateToOneEighy() {                                           // rotate servo to 180 degree position\n  for (servoPosition = 0; servoPosition &lt;= 180; servoPosition += 1) {    // goes from 0 degrees to 180 degrees in steps of 1 degree\n    myServo.write(servoPosition);                                        // tell servo to go to position in variable 'servoPosition'\n  }  \n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#upload-the-source-code-and-library-to-the-arduino","title":"Upload the source code and library to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#how-to-upload-a-sketch-with-the-arduino-ide-2","title":"How To Upload A Sketch With The Arduino IDE 2","text":"<p>Note</p> <ul> <li>Source: Arduino.cc How to upload a sketch with the Arduino IDE 2</li> </ul> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#requirements_1","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor. Results</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#how-to-add-library-files-to-the-arduino-ide","title":"How To Add Library Files To The Arduino IDE","text":"<p>Arduino IDE 2</p> <p>From within the Arduino IDE with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the Stepper.zip file downloaded from this page.</p> <ul> <li>Download Library File: Stepper-1.1.3.zip</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#how-to-add-library-files-to-the-arduino-ide-2","title":"How To Add Library Files To The Arduino IDE 2","text":"<p>From within the Arduino IDE, with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the pitches.zip file downloaded from this page. Repeat for the additional library files.</p> <ul> <li>Download Library File: pitches.zip</li> <li>Download Library File: HC-SR04.zip</li> <li>Download Library File: Servo-1.2.1.zip</li> <li>Download Library File: Stepper.zip</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#how-to-install-a-library-with-the-arduino-ide-2","title":"How to install a library with the Arduino IDE 2","text":"<p>Note</p> <ul> <li>Source: Arduino.cc Installing libraries</li> </ul> <p>A large part of the Arduino programming experience is the use of libraries. There are thousands of libraries that can be found online, and the best documented ones can be found and installed directly through the editor.</p> <p>In this tutorial, we will go through how to install a library using the library manager in the Arduino IDE 2. We will also show how to access examples from a library that you have installed.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#requirements_2","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#why-use-libraries","title":"Why Use Libraries?","text":"<p>Libraries are incredibly useful when creating a project of any type. They make our development experience much smoother, and there almost an infinite amount out there. They are used to interface with many different sensors, RTCs, Wi-Fi modules, RGB matrices and of course with other components on your board.</p> <p>Arduino has many official libraries, but the real heroes are the Arduino community, who develop, maintain and improve their libraries on a regular basis.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#installing-a-library","title":"Installing a Library","text":"<p>Installing a library is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the left column. Here, we can see a couple of icons. Let's click the on the \"library\" icon.</p> </li> </ol> <p></p> <ol> <li>A list will now appear of all available libraries, where we can also search for the library we want to use. In this example, we are going to install the RTCZero library. Click on the \"INSTALL\" button to install the library.</li> </ol> <p></p> <ol> <li>This process should not take too long, but allow up to a minute to install it.</li> </ol> <p></p> <ol> <li>When it is finished, we can take a look at the library in the library manager column, where it should say \"INSTALLED\".</li> </ol> <p></p> <p>Congratulations! You have now successfully downloaded and installed a library on your machine.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#including-a-library","title":"Including a Library","text":"<p>To use a library, you first need to include the library at the top of the sketch.</p> <p></p> <p>Almost all libraries come with already made examples that you can use. These are accessible through File &gt; Examples &gt; {Library} &gt; {Example}. In this example, we are choosing the RTCZero &gt; SimpleRTC.</p> <p></p> <p>You can also access library examples directly in the library manager, by clicking the three dots next to the installed library, like this: </p> <p></p> <p>The chosen example will now open up in a new window, and you can start using it however you want to.</p> <p></p>","boost":1},{"location":"aws/","title":"AWS Amazon Web Services - Index","text":"<ul> <li>AWS Certifications</li> </ul>","boost":1},{"location":"aws/aws-certifications/","title":"AWS Amazon Web Services Certifications Master Study List","text":"<p>Added:</p> <ul> <li>Amazon AWS Certification exam preparation</li> <li>Tutorials Dojo</li> </ul> <p>Source</p> <p>r/AWSCertifications 4 yr. ago canadian-sysadmin</p> <p>Master List: I Compiled Every Major AWS Studying Resource Here!</p> <p>If you are looking to materials to study for AWS certifications, you've come to the right post! Numbered lists are ranked in descending order of value (my opinion of course).</p> <p>I recommend taking notes on a video course, book and three practice exams to comfortably pass each certification.</p> <p>If you just want the linked training resources for a given cert and don't care about the platform, skip to that section.</p> <p>Let me know what I've missed. Happy studying!</p> <p>PSA: after passing any AWS certification exam, you can redeem a voucher for 50% off your next exam, and get an Official AWS Practice Exam for free. Go to aws.training for the codes. Resource Platforms</p> <p>Computer Based Training (CBT) Video Platforms:</p> <pre><code>[Udemy.com](https://udemy.com) - free market (like YouTube) of self-posted courses and practice exams. Buy for lifetime access with site-wide 30-day money back guarantee. Courses have fake prices of ~$150 but go on sale every other week for ~$20 (lifetime access). Also sells practice exams. You'll find the excellent Maarek ( u/stephanemaarek )and Davis ( u/neal-davis ) videos and Bonso exams here.\n\n[learn.cantrill.io](https://learn.cantrill.io) - Adrian Cantrill's ( [u/acantrill](https://www.reddit.com/user/acantrill/) ) in-depth video series for people who want to go beyond just passing the certification. Has extremely well-done graphics. Courses sell for $40-$80 for lifetime access.\n\n[ACloud.Guru](https://ACloud.Guru) - the ubiquitous training platform with videos, labs, and practice exams from various highly-qualified instructors. Recently acquired LinuxAcademy. $40 per month.\n\nCBTNuggets.com - whiteboard style lessons from enthusiastic instructors. $59 per month.\n\nCloudAcademy.com - videos, labs, and practice exams. $39 per month.\n\nLynda.com - AKA LinkedIn learning. Many libraries offer this service for free, or $25 per month.\n\nYouTube.com - miscellaneous video series and single topic explanation videos. Some are excellent, all are free.\n</code></pre> <p>Book Vendors:</p> <pre><code>McGraw Hill's All-in-One Series - highly organized, readable, and thorough books. Included practice exams can be done on the TotalTester online test engine.\n\nWiley's Sybex Series - organized and thorough books that sometimes cover topics All-in-One skims. Usually has a study book and a practice exam book. Confusingly, there are sometimes two Sybex study books for the same exam, one official and one not.\n\nIndependent Vendors - see specific certification for relevant titles.\n</code></pre> <p>Practice Exam Platforms:</p> <pre><code>Tutorials Dojo (Udemy &amp; Website) - Jon Bonso's ( u/jon-bonso-tdojo ) exams are simply the best. Include detailed explanations on every question. You can't go wrong with these. Buying directly on the website supports Jon.\n\nSybex - Kindle or print books with ~1000 questions. Test bank is available online on their excellent test engine for automatic test generation and grading.\n\nCloudAcademy.com - exams for each certification and topic-specific.\n\nUdemy.com - various.\n</code></pre> <p>Lab Platforms:</p> <pre><code>Qwiklabs - the official AWS platform with many guided labs on real AWS architectures.\n\nACloud.Guru - many useful guided labs that are in the real console.\n\nCloudAcademy.com - guided labs.\n</code></pre> <p>AWS Certified Cloud Practitioner (CLF-C01)</p> <p>Videos:</p> <pre><code>Stephane Maarek - 13 hours. Includes 1 practice exam.\n\nNeal Davis - 13 hours. Includes 2 practice exams.\n\nACloudGuru - 17 hours with Tia Wiliams. Includes 7 labs and 1 practice exam.\n\nCBTNuggets - 16 hours with Bart Castle. Includes 1 practice exam.\n\nCloudAcademy - 16 hours. Includes 6 labs and 1 practice exam.\n</code></pre> <p>Books:</p> <pre><code>All-in-One - 224 pages. Includes 2 practice exams.\n\nSybex - 304 pages. Includes 2 practice exams.\n</code></pre> <p>Practice Exams:</p> <pre><code>Tutorials Dojo - 5 practice exams.\n\nDigital Cloud Training by Neal Davis - 6 practice exams.\n\nCloudAcademy - 1 practice exam.\n</code></pre> <p>AWS Certified Solutions Architect Associate (SAA-C02)</p> <p>Videos:</p> <pre><code>Stephane Maarek - 24 hours. Includes 1 practice exam.\n\nAdrian Cantrill - 66 hours. Includes 2 practice exams.\n\nNeal Davis - 28 hours. Includes 1 practice exam.\n\nACloudGuru - 12.5 hours with Mark Richman and Ryan Kroonenburg. Includes 10 labs and 1 practice exam.\n\nCBTNuggets - 31 hours with Bart Castle. Includes 2 practice exams.\n\nCloudAcademy - 36 hours. Includes 11 labs and 1 practice exam.\n\nLynda - 20 hours with Tom Carpenter.\n</code></pre> <p>Books:</p> <pre><code>All-in-One - 448 pages. Includes 2 practice exams.\n\nSybex - 464 pages. Includes 2 practice exams.\n</code></pre> <p>Practice Exams:</p> <pre><code>Tutorials Dojo - 5 practice exams.\n\nDigital Cloud Training by Neal Davis - 6 practice exams.\n\nCloudAcademy - 1 practice exam.\n</code></pre> <p>AWS Certified SysOps Administrator Associate (SOA-C01)</p> <p>Videos:</p> <pre><code>Stephane Maarek - 20 hours. Includes 1 practice exam.\n\nAdrian Cantrill - ? hours.\n\nNeal Davis - 15 hours. Includes 1 practice exam.\n\nACloudGuru - 29 hours with Mark Richman. Includes 13 labs and 1 practice exam.\n\nCBTNuggets - 42 hours with Bart Castle and Trevor Sullivan. Includes 1 practice exam.\n\nCloudAcademy - 43 hours. Includes 15 labs and 1 practice exam.\n\nLynda - 25 hours.\n</code></pre> <p>Books:</p> <pre><code>All-in-One - 736 pages. Includes 4 practice exams.\n\nSybex - 512 pages. Includes 2 practice exams.\n</code></pre> <p>Practice Exams:</p> <pre><code>Tutorials Dojo - 5 practice exams.\n\nDigital Cloud Training by Neal Davis - 3 practice exams.\n\nCloudAcademy - 1 practice exam.\n</code></pre> <p>AWS Certified Developer Associate (DVA-C01)</p> <p>Videos:</p> <pre><code>Stephane Maarek - 30 hours. Includes 1 practice exam.\n\nAdrian Cantrill - ? hours.\n\nNeal Davis - 30 hours. Includes 1 practice exam.\n\nACloudGuru - 17 hours with Ryan Kroonenburg and Faye Ellis. Includes 11 labs and 1 practice exam.\n\nCBTNuggets - 40 hours with Bart Castle and Trevor Sullivan.\n\nCloudAcademy - 41 hours. Includes 23 labs and 1 practice exam.\n\nLynda - 7 hours.\n</code></pre> <p>Books:</p> <pre><code>All-in-One - 752 pages. Includes 2 practice exams.\n\nSybex - 992 pages. Includes 2 practice exams.\n</code></pre> <p>Practice Exams:</p> <pre><code>Tutorials Dojo - 5 practice exams.\n\nDigital Cloud Training by Neal Davis - 6 practice exams.\n\nCloudAcademy - 1 practice exam.\n</code></pre> <p>AWS Certified Solutions Architect Professional (SAP-C01)</p> <p>Videos:</p> <pre><code>Stephane Maarek - 13 hours.\n\nAdrian Cantrill - 80 hours.\n\nACloudGuru - 12 hours with Scott Pletcher. Includes 14 labs and 1 practice exam.\n\nCloudAcademy - 54 hours. Includes 15 labs and 1 practice exam.\n\nLynda - 11 hours with Lynn Langit.\n</code></pre> <p>Practice Exams:</p> <pre><code>Tutorials Dojo - 5 practice exams.\n</code></pre> <p>AWS Certified DevOps Engineer Professional (DOP-C01)</p> <p>Videos:</p> <pre><code>Stephane Maarek - 21 hours. Includes 1 practice exam.\n\nACloudGuru - 5 hours with Tia Williams and Nick Triantafillou. Includes 9 labs and 1 practice exam.\n\nCloudAcademy - 48 hours. Includes 17 labs and 1 practice exam.\n\nLynda - 10 hours with Lynn Langit.\n</code></pre> <p>Practice Exams:</p> <pre><code>Tutorials Dojo - 5 practice exams.\n\nCloudAcademy - 1 practice exam.\n</code></pre> <p>AWS Certified Advanced Networking Specialty (ANS-C00)</p> <p>Videos:</p> <pre><code>ACloudGuru - 25 hours with Steven Moran and Brock Tubre. Includes 4 labs and 1 practice exam.\n\nCloudAcademy - 24 hours. Includes 6 labs and 1 practice exam.\n</code></pre> <p>Books:</p> <pre><code>Sybex - 576 pages. Includes 2 practice exams.\n</code></pre> <p>Practice Exams:</p> <pre><code>Tutorials Dojo - 5 practice exams.\n\nCloudAcademy - 1 practice exam.\n</code></pre> <p>AWS Certified Security Specialty (SCS-C01)</p> <p>Videos:</p> <pre><code>Zeal Vora - 25 hours. Includes 1 practice exam.\n\nACloudGuru - 14 hours with Ryan Kroonenburg and Faye Ellis. Includes 2 labs and 1 practice exam.\n\nCloudAcademy - 33 hours. Includes 11 labs and 1 practice exam.\n\nCBTNuggets - 24 hours with Bart Castle.\n</code></pre> <p>Books:</p> <pre><code>All-in-One - 672 pages. Includes 2 practice exams.\n\nSybex - 496 pages. Includes 2 practice exams.\n</code></pre> <p>Practice Exams:</p> <pre><code>Tutorials Dojo - 5 practice exams.\n</code></pre> <p>AWS Certified Data Analytics Specialty (DAS-C01)</p> <p>Videos:</p> <pre><code>Stephane Maarek - 13 hours. Includes 1 practice exam.\n\nACloudGuru - 10 hours with John Hanna and Brock Tubre. Includes 1 practice exam.\n\nCloudAcademy - 21 hours. Includes 11 labs and 1 practice exam.\n</code></pre> <p>Books:</p> <pre><code>Sybex - 416 pages. Includes 2 practice exams.\n</code></pre> <p>Practice Exams:</p> <pre><code>Tutorials Dojo - 5 practice exams.\n\nCloudAcademy - 1 practice exam.\n</code></pre> <p>AWS Certified Database Specialty (DBS-C01)</p> <p>Videos:</p> <pre><code>ACloudGuru - 23 hours with Kelby Enevold. Includes 11 labs and 1 practice exam.\n\nCloudAcademy - 24 hours. Includes 8 labs and 1 practice exam.\n\nTotal Seminars - 8 hours with Tom Carpenter. Also available on Lynda.\n</code></pre> <p>Practice Exams:</p> <pre><code>Tutorials Dojo - 5 practice exams.\n\nCloudAcademy - 1 practice exam.\n</code></pre> <p>AWS Machine Learning Specialty (MLS-C01)</p> <p>Videos:</p> <pre><code>Stephane Maarek - 10 hours. Includes 1 practice exam.\n\nACloudGuru - 13 hours with Scott Pletcher and Brock Tubre. Includes 7 labs and 1 practice exam.\n\nCloudAcademy - 51 hours. Includes 14 labs and 1 practice exam.\n</code></pre> <p>Practice Exams:</p> <pre><code>Tutorials Dojo - 5 practice exams.\n</code></pre> <p>AWS Certified Alexa Skill Builder Specialty (AXS-C01)</p> <p>Videos:</p> <pre><code>ACloudGuru - 6 hours with Kesha Williams. Includes 4 labs and 1 practice exam.\n</code></pre> <p>Again, let me know what I missed. Happy studying!</p>","boost":1},{"location":"csc205/","title":"CSC205 - Index","text":"","boost":1},{"location":"csc205/#modules","title":"Modules","text":"<ul> <li>Module 0 - Java Review</li> <li>Module 1 - Java Review - Encapsulation - Designing Classes - Testing </li> <li>Module 2 - Inheritance and Exceptions<ul> <li>Inheritance and Exceptions - Notes</li> <li>Inheritance and Exceptions - Frequently Asked Questions</li> </ul> </li> <li>Module 3 - Polymorphism and Interfaces</li> <li>Module 4 - Recursion and Analysis of Algorithms<ul> <li>Programming Exercise 4 - Recursion</li> </ul> </li> <li>Module 5 - Collections Generics and Iterators</li> <li>Module 6 - Linked Lists<ul> <li>Linked Lists - Notes</li> <li>Linked Lists - Frequently Asked Questions</li> <li>Example Videos</li> <li>Example Code</li> </ul> </li> <li>Module 7 - Stacks and Queues<ul> <li>Stacks and Queues - Notes</li> <li>Stacks and Queues - Frequently Asked Questions</li> <li>Example Videos</li> <li>Example Code</li> </ul> </li> <li>Module 8 - Midterm Exam</li> <li>Module 9 - Searching and Hashing</li> <li>Module 10 - Sorting</li> <li>Module 11 - Trees</li> <li>Module 12 - Search Trees<ul> <li>Module 12 Video Example - Search Trees - Class Diagram</li> <li>Project 8 Starter Code - Search Trees - Class Diagram</li> </ul> </li> <li>Module 13 - Balanced Trees</li> <li>Module 14 - Heaps and Priority Queues</li> <li>Module 15 - Graphs</li> <li>Module 16 - Databases</li> <li>Module 17 - Final Exam</li> </ul>","boost":1},{"location":"csc205/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/#java-foundations-textbook-notes","title":"Java Foundations Textbook Notes","text":"<ul> <li>Chapter 12</li> <li>Chapter 12 Example Source Code</li> </ul>","boost":1},{"location":"csc205/#wade-hubers-github-csc205codeexamples-repository","title":"Wade Huber's GitHub csc205codeexamples repository","text":"<ul> <li>GitHub: https://github.com/wadehuber/csc205codeexamples</li> </ul> <p>Note</p> <p>The csc205codeexamples is a private GitHub repository. You will need to contact Wade Huber to be added to the repository for access.</p>","boost":1},{"location":"csc205/#wade-hubers-github-codeexamples-repository","title":"Wade Huber's GitHub codeexamples repository","text":"<ul> <li>GitHub: https://github.com/wadehuber/codeexamples</li> </ul>","boost":1},{"location":"csc205/#wade-hubers-youtube-channel","title":"Wade Huber's Youtube Channel","text":"<ul> <li>YouTube: https://www.youtube.com/@logiclambda</li> </ul>","boost":1},{"location":"csc205/#textbooks","title":"Textbooks","text":"<ul> <li> <p>Java Foundations (Required)</p> <ul> <li>5<sup>th</sup> edition</li> <li>ISBN: 9780135205976</li> <li>Author: Lewis</li> </ul> </li> <li> <p>Algorithms (Optional)</p> <ul> <li>4<sup>th</sup> edition</li> <li>ISBN: 9780132762564</li> <li>Author: Sedgewick</li> </ul> </li> </ul>","boost":1},{"location":"csc205/#other-material","title":"Other Material","text":"<ul> <li> <p>Book: Programming Interviews Exposed: Coding Your Way Through the Interview</p> <ul> <li>4<sup>th</sup> Edition</li> <li>ISBN-10: 111941847X</li> <li>ISBN-13: 978-1119418474</li> <li>Author:  John Mongan, Noah Suojanen Kindler, Eric Gigu\u00e8re</li> </ul> </li> <li> <p>Book: Cracking the Coding Interview: 189 Programming Questions and Solutions</p> <ul> <li>6<sup>th</sup> Edition</li> <li>ISBN-10: 0984782869</li> <li>ISBN-13: 978-0984782864</li> <li>Author: Gayle Laakmann McDowell</li> </ul> </li> <li> <p>Book: Grokking Algorithms</p> <ul> <li>2<sup>nd</sup> Edition</li> <li>ISBN-10: 1633438538</li> <li>ISBN-13: 978-1633438538</li> <li>Author: Aditya Y Bhargava</li> </ul> </li> <li> <p>I also strongly recommend the Algorithms Illuminated series by Tim Roughgarden, which has corresponding YouTube playlists.</p> <ul> <li> <p>Website: https://www.algorithmsilluminated.org/</p> </li> <li> <p>Book: Algorithms Illuminated</p> <ul> <li>Omnibus Edition</li> <li>ISBN-10: 0999282980</li> <li>ISBN-13: 978-0999282984</li> <li>Author: Tim Roughgarden</li> </ul> </li> <li> <p>YouTube: Algorithms 1 YouTube Playlist</p> </li> <li> <p>YouTube: Algorithms 2 Youtube Playlist</p> </li> <li> <p>YouTube: All YouTube Videos by Tim Roughgarden</p> </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-0/","title":"Java Review - Index","text":"","boost":1},{"location":"csc205/module-0/#csc-205-module-0","title":"CSC 205 Module 0","text":"","boost":1},{"location":"csc205/module-0/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-0/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-0/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-0/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-0/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-0/#frequently-asked-questions","title":"Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-1/","title":"Java Review - Encapsulation - Designing Classes - Testing - Index","text":"","boost":1},{"location":"csc205/module-1/#csc205-module-1-index","title":"CSC205 Module 1 - Index","text":"","boost":1},{"location":"csc205/module-1/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-1/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-1/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-1/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-1/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-1/#frequently-asked-questions","title":"Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-10/","title":"Sorting - Index","text":"","boost":1},{"location":"csc205/module-10/#csc205-module-10","title":"CSC205 - Module 10","text":"","boost":1},{"location":"csc205/module-10/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-10/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-10/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-10/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-10/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-10/#frequently-asked-questions","title":"Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-11/","title":"Trees - Index","text":"","boost":1},{"location":"csc205/module-11/#csc205-module-11","title":"CSC205 - Module 11","text":"","boost":1},{"location":"csc205/module-11/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-11/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-11/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-11/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-11/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-11/#frequently-asked-questions","title":"Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-12/","title":"Search Trees - Index","text":"","boost":1},{"location":"csc205/module-12/#csc205-module-12","title":"CSC205 - Module 12","text":"","boost":1},{"location":"csc205/module-12/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-12/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-12/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-12/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-12/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-12/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<ul> <li> <p>CSC205 - Module 12 Video Example - Search Trees - Class Diagram</p> </li> <li> <p>CSC205 - Project 8 Starter Code - Search Trees - Class Diagram</p> </li> </ul>","boost":1},{"location":"csc205/module-12/csc205-module-12-video-example-search-trees-class-diagram/","title":"CSC205 - Module 12 Video Example - Search Trees - Class Diagram","text":"","boost":1},{"location":"csc205/module-12/csc205-module-12-video-example-search-trees-class-diagram/#binary-search-tree","title":"Binary Search Tree","text":"<pre><code>classDiagram\n    BinaryTreeADT &lt;|-- BinarySearchTreeADT\n    BinaryTreeADT &lt;|.. LinkedBinaryTree\n    BinarySearchTreeADT &lt;|.. LinkedBinarySearchTree\n    LinkedBinaryTree &lt;|-- LinkedBinarySearchTree\n    LinkedBinaryTree o-- BinaryTreeNode\n    class BinaryTreeADT~T~ {\n        &lt;&lt;Interface&gt;&gt;\n        +getRootElement() T\n        +isEmpty() boolean\n        +size() int\n        +contains(T) boolean\n        +find(T) T\n    }\n\n    class BinarySearchTreeADT~T~ {\n        &lt;&lt;Interface&gt;&gt;\n        +addElement(T)\n        +removeElement(T) T\n        +removeAllOccurrences(T)\n        +removeMin() T\n        +removeMax() T\n        +findMin() T\n        +findMax() T\n    }\n\n    class LinkedBinaryTree~T~ {\n        #root: BinaryTreeNode~T~\n        #modCount: int\n        +LinkedBinaryTree()\n        +LinkedBinaryTree(T)\n        +LinkedBinaryTree(T, LinkedBinaryTree, LinkedBinaryTree)\n    }\n\n    class LinkedBinarySearchTree~T~ {\n        +addElement(T)\n        +removeElement(T) T\n        +removeAllOccurrences(T)\n    }\n\n    class BinaryTreeNode~T~ {\n        #element: T\n        #left: BinaryTreeNode~T~\n        #right: BinaryTreeNode~T~\n        +BinaryTreeNode(T)\n        +numChildren() int\n        +isLeaf() boolean\n    }</code></pre>","boost":1},{"location":"csc205/module-12/csc205-module-12-video-example-search-trees-class-diagram/#lists","title":"Lists","text":"<pre><code>classDiagram\n    ListADT &lt;|-- UnorderedListADT\n    ListADT &lt;|-- OrderedListADT\n    ListADT &lt;|.. ArrayList\n    UnorderedListADT &lt;|.. ArrayUnorderedList\n    ArrayList &lt;|-- ArrayUnorderedList\n    class ListADT~T~ {\n        &lt;&lt;Interface&gt;&gt;\n        +removeFirst() T\n        +removeLast() T\n        +remove(T) T\n        +first() T\n        +last() T\n        +contains(T) boolean\n        +isEmpty() boolean\n        +size() int\n        +iterator() Iterator\n        +toString() String\n    }\n\n    class UnorderedListADT~T~ {\n        &lt;&lt;Interface&gt;&gt;\n        +addToFront(T)\n        +addToRear(T)\n        +addAfter(T, T)\n    }\n\n    class OrderedListADT~T~ {\n        &lt;&lt;Interface&gt;&gt;\n        +add(T)\n    }\n\n    class ArrayList~T~ {\n        &lt;&lt;Abstract&gt;&gt;\n        -DEFAULT_CAPACITY: int\n        -NOT_FOUND: int\n        #rear: int\n        #list: T[]\n        #modCount: int\n        +ArrayList()\n        +ArrayList(initialCapacity: int)\n        #expandCapacity()\n    }\n\n    class ArrayUnorderedList~T~ {\n        +addToFront(T)\n        +addToRear(T)\n        +addAfter(T, T)\n    }</code></pre>","boost":1},{"location":"csc205/module-12/csc205-module-12-video-example-search-trees-class-diagram/#error-exceptions","title":"Error Exceptions","text":"<pre><code>classDiagram\n    RuntimeException &lt;|-- ElementNotFoundException\n    RuntimeException &lt;|-- EmptyCollectionException\n    RuntimeException &lt;|-- NonComparableElementException\n    class ElementNotFoundException {\n        +ElementNotFoundException(String)\n    }\n\n    class EmptyCollectionException {\n        +EmptyCollectionException(String)\n    }\n\n    class NonComparableElementException {\n        +NonComparableElementException(String)\n    }</code></pre>","boost":1},{"location":"csc205/module-12/csc205-module-12-video-example-search-trees-class-diagram/#studentrecord-driver-class","title":"StudentRecord - Driver Class","text":"<pre><code>classDiagram\n    Comparable &lt;|.. StudentRecord\n    class StudentRecord {\n        -Name: String\n        -studentNo: int\n        -gpa: double\n        -static nextNum: int\n        +StudentRecord(name: String, gpa: double)\n    }</code></pre>","boost":1},{"location":"csc205/module-12/csc205-project-8-starter-code-search-trees-class-diagram/","title":"CSC205 - Project 8 Starter Code - Search Trees - Class Diagram","text":"","boost":1},{"location":"csc205/module-12/csc205-project-8-starter-code-search-trees-class-diagram/#linked-binary-search-tree","title":"Linked Binary Search Tree","text":"<pre><code>classDiagram\n    BinarySearchTreeADT --|&gt; BinaryTreeADT\n    LinkedBinaryTree ..|&gt; BinaryTreeADT\n    LinkedBinarySearchTree --|&gt; LinkedBinaryTree\n    LinkedBinarySearchTree ..|&gt; BinarySearchTreeADT\n    LinkedBinaryTree o-- BinaryTreeNode\n    LinkedBinarySearchTree o-- BinaryTreeNode\n    class BinaryTreeADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +getRootElement(): T\n        +isEmpty(): boolean\n        +size(): int\n        +contains(T): boolean\n        +find(T): T\n        +toString(): String\n        +iterator(): Iterator~T~\n        +iteratorInOrder(): Iterator~T~\n        +iteratorPreOrder(): Iterator~T~\n        +iteratorPostOrder(): Iterator~T~\n        +iteratorLevelOrder(): Iterator~T~\n    }\n\n    class BinarySearchTreeADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +addElement(T): void\n        +removeElement(T): T\n        +removeAllOccurrences(T): void\n        +removeMin(): T\n        +removeMax(): T\n        +findMin(): T\n        +findMax(): T\n    }\n\n    class LinkedBinaryTree~T~ {\n        #root: BinaryTreeNode~T~\n        #modCount: int\n        +LinkedBinaryTree()\n        +LinkedBinaryTree(T)\n        +LinkedBinaryTree(T, LinkedBinaryTree, LinkedBinaryTree)\n        +getLeft(): LinkedBinaryTree~T~\n        +getRight(): LinkedBinaryTree~T~\n        #getRootNode(): BinaryTreeNode~T~\n        +getHeight(): int\n    }\n\n    class LinkedBinarySearchTree~T~ {\n        +LinkedBinarySearchTree()\n        +LinkedBinarySearchTree(T)\n        +addElement(T): void\n        -addElement(T, BinaryTreeNode): void\n        +removeElement(T): T\n        +removeMin(): T\n        +removeMax(): T\n        +findMin(): T\n        +findMax(): T\n        +find(T): T\n        +printTree(): void\n    }\n\n    class BinaryTreeNode~T~ {\n        #element: T\n        #left: BinaryTreeNode~T~\n        #right: BinaryTreeNode~T~\n        +BinaryTreeNode(T)\n        +BinaryTreeNode(T, LinkedBinaryTree, LinkedBinaryTree)\n        +numChildren(): int\n        +isLeaf(): boolean\n        +getElement(): T\n        +getLeft(): BinaryTreeNode~T~\n        +getRight(): BinaryTreeNode~T~\n        +setLeft(BinaryTreeNode): void\n        +setRight(BinaryTreeNode): void\n    }</code></pre>","boost":1},{"location":"csc205/module-12/csc205-project-8-starter-code-search-trees-class-diagram/#linkedbstorderedset","title":"LinkedBSTOrderedSet","text":"<pre><code>classDiagram\n    LinkedBSTOrderedSet ..|&gt; OrderedSetADT\n    class OrderedSetADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +addElement(T): void\n        +removeElement(T): T\n        +find(T): T\n        +findMin(): T\n        +findMax(): T\n        +contains(T): boolean\n        +toString(): String\n        +iterator(): Iterator~T~\n    }\n\n    class LinkedBSTOrderedSet~T~ {\n        +LinkedBSTOrderedSet()\n        +addElement(T): void\n        +removeElement(T): T\n        +find(T): T\n        +findMin(): T\n        +findMax(): T\n        +contains(T): boolean\n        +iterator(): Iterator~T~\n    }</code></pre>","boost":1},{"location":"csc205/module-12/csc205-project-8-starter-code-search-trees-class-diagram/#sorting","title":"Sorting","text":"<pre><code>classDiagram\n    class Sorting {\n        &lt;&lt;utility&gt;&gt;\n        +bstSort(T[]): void\n        +isSorted(T[]): boolean\n        -less_than(T,T): boolean\n        -greater_than(T,T): boolean\n        -swap(Object[],int,int): void\n    }</code></pre>","boost":1},{"location":"csc205/module-13/","title":"Balanced Trees - Index","text":"","boost":1},{"location":"csc205/module-13/#csc205-module-13","title":"CSC205 - Module 13","text":"","boost":1},{"location":"csc205/module-13/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-13/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-13/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-13/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-13/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-13/#frequently-asked-questions","title":"Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-14/","title":"Heaps and Priority Queues - Index","text":"","boost":1},{"location":"csc205/module-14/#csc205-module-14","title":"CSC205 - Module 14","text":"","boost":1},{"location":"csc205/module-14/#topics","title":"Topics","text":"<ul> <li>Priority Queues</li> <li>Heaps</li> <li>implementing heaps</li> <li>using heaps to implement other data structures</li> </ul>","boost":1},{"location":"csc205/module-14/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-14/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter 20.5 - 20.7 and 23</li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections 3.2</li> <li>Sections 3.3</li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-14/#notes","title":"Notes","text":"<ul> <li>Heaps and Priority Queues - Notes</li> </ul>","boost":1},{"location":"csc205/module-14/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Code</li> <li>Example Code Class Diagram</li> </ul>","boost":1},{"location":"csc205/module-14/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<ul> <li>Heaps and Priority Queues - Frequently Asked Questions</li> </ul>","boost":1},{"location":"csc205/module-14/#project-9-heaps","title":"Project 9 - Heaps","text":"<ul> <li>Heaps - Programming Project 9 - Starter Code - Index</li> <li>Heaps - Programming Project 9 - Requirements Document</li> <li>Heaps - Programming Project 9 - Starter Code - Class Diagram</li> </ul>","boost":1},{"location":"csc205/module-14/code/","title":"Heaps - Example Code - Index","text":"","boost":1},{"location":"csc205/module-14/code/#_1","title":"/","text":"<ul> <li>Module 14 README.md</li> <li>Contact.java</li> <li>HeapExample.java</li> <li>SortPhoneList.java</li> <li>StudentRecord.java</li> </ul>","boost":1},{"location":"csc205/module-14/code/#csc205","title":"/csc205/","text":"<ul> <li>Sorting.java</li> </ul>","boost":1},{"location":"csc205/module-14/code/#jsjf","title":"/jsjf/","text":"<ul> <li>ArrayBinaryTree.java</li> <li>ArrayHeap.java</li> <li>ArrayList.java</li> <li>ArrayUnorderedList.java</li> <li>BinarySearchTreeADT.java</li> <li>BinaryTreeADT.java</li> <li>BinaryTreeNode.java</li> <li>HeapADT.java</li> <li>HeapNode.java</li> <li>LinkedBinarySearchTree.java</li> <li>LinkedBinaryTree.java</li> <li>LinkedHeap.java</li> <li>ListADT.java</li> <li>UnorderedListADT.java</li> </ul>","boost":1},{"location":"csc205/module-14/code/#jsjfexceptions","title":"/jsjf/exceptions","text":"<ul> <li>ElementNotFoundException.java</li> <li>EmptyCollectionException.java</li> <li>NonComparableElementException.java</li> </ul>","boost":1},{"location":"csc205/module-14/code/#priorityqueue","title":"/priorityqueue/","text":"<ul> <li>PQTester.java</li> <li>PrioritizedObject.java</li> <li>PriorityQueue.java</li> </ul>","boost":1},{"location":"csc205/module-14/code/Contact/","title":"Contact.java","text":"<pre><code>package videoexamples.module14;\n/**\n * Contact represents a phone contact.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class Contact implements Comparable&lt;Contact&gt;\n{\n    private String firstName, lastName, phone;\n\n    /**\n     * Sets up this contact with the specified information.\n     *\n     * @param first     a string representation of a first name\n     * @param last      a string representation of a last name\n     * @param telephone a string representation of a phone number\n     */\n    public Contact(String first, String last, String telephone)\n    {\n        firstName = first;\n        lastName = last;\n        phone = telephone;\n    }\n\n    /**\n     * Returns a description of this contact as a string.\n     *\n     * @return a string representation of this contact\n     */\n    public String toString()\n    {\n        return lastName + \", \" + firstName + \"\\t\" + phone;\n    }\n\n    /**\n     * Uses both last and first names to determine lexical ordering.\n     *\n     * @param other the contact to be compared to this contact\n     * @return      the integer result of the comparison\n     */\n    public int compareTo(Contact other)\n    {\n        int result;\n\n        if (lastName.equals(other.lastName))\n            result = firstName.compareTo(other.firstName);\n        else\n            result = lastName.compareTo(other.lastName);\n\n        return result;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/HeapExample/","title":"HeapExample.java","text":"<pre><code>package videoexamples.module14;\n\nimport videoexamples.module14.jsjf.LinkedBinarySearchTree;\nimport videoexamples.module14.jsjf.LinkedBinaryTree;\nimport videoexamples.module14.jsjf.LinkedHeap;\n\npublic class HeapExample {\n\n    public static void main(String[] args) {\n        LinkedHeap&lt;Integer&gt; t = new LinkedHeap&lt;Integer&gt;();\n        LinkedHeap&lt;StudentRecord&gt; s = new LinkedHeap&lt;StudentRecord&gt;();\n        LinkedBinarySearchTree&lt;Integer&gt; k = new LinkedBinarySearchTree&lt;Integer&gt;();\n\n        for(int ii=0;ii&lt;20;ii++) {\n            int num = (int)(Math.random()*100);\n            t.addElement(num);\n            k.addElement(num);\n        }\n\n        s.addElement(new StudentRecord(\"Harrison Ford\", 3.5));\n        s.addElement(new StudentRecord(\"Mark Hamil\", 3.1));\n        s.addElement(new StudentRecord(\"Carrie Fisher\", 3.1));\n        s.addElement(new StudentRecord(\"Adam Driver\", 3.8));\n        s.addElement(new StudentRecord(\"Daisy Ridley\", 3.3));\n        s.addElement(new StudentRecord(\"John Boyega\", 3.3));\n        s.addElement(new StudentRecord(\"Oscar Isaac\", 3.3));\n        s.addElement(new StudentRecord(\"Lupita Nyong'o\", 3.9));\n        s.addElement(new StudentRecord(\"Andy Serkis\", 3.3));\n        s.addElement(new StudentRecord(\"Domhnall Gleeson\", 3.4));\n\n        System.out.println(\"Tree k: \" + k);\n        System.out.println(\"Heap t: \" + t);\n        System.out.println(\"Heap s: \" + s);\n\n        System.out.println(\"\\nremoveMin testing s:\");\n        for(int x=0; x&lt;4; x++) {\n            System.out.println(s.removeMin());\n        }   \n\n        System.out.println(\"\\nremoveMin testing t:\");\n        for(int x=0; x&lt;4; x++) {\n            System.out.println(t.removeMin());\n        }\n\n\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/SortPhoneList/","title":"SortPhoneList.java","text":"<pre><code>package videoexamples.module14;\n\nimport videoexamples.module14.csc205.Sorting;\n\n/**\n * SortPhoneList driver for testing a heap sort.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class SortPhoneList\n{\n    /**\n     * Creates an array of Contact objects, sorts them, then prints\n     * them.\n     */\n    public static void main(String[] args)\n    {\n        Contact[] friends = new Contact[7];\n\n        friends[0] = new Contact(\"John\", \"Smith\", \"610-555-7384\");\n        friends[1] = new Contact(\"Sarah\", \"Barnes\", \"215-555-3827\");\n        friends[2] = new Contact(\"Mark\", \"Riley\", \"733-555-2969\");\n        friends[3] = new Contact(\"Laura\", \"Getz\", \"663-555-3984\");\n        friends[4] = new Contact(\"Larry\", \"Smith\", \"464-555-3489\");\n        friends[5] = new Contact(\"Frank\", \"Phelps\", \"322-555-2284\");\n        friends[6] = new Contact(\"Marsha\", \"Grant\", \"243-555-2837\");\n\n        Sorting.heapSort(friends);\n\n        for (Contact friend : friends)\n            System.out.println(friend);\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/StudentRecord/","title":"StudentRecord.java","text":"<pre><code>package videoexamples.module14;\n\npublic class StudentRecord implements Comparable&lt;StudentRecord&gt; {\n\n    private String Name;\n    private int studentNo;\n    private double gpa;\n\n    private static int nextNum = 1000;\n\n    public StudentRecord(String name, double gpa) {\n        super();\n        Name = name;\n        this.studentNo = nextNum;\n        nextNum++;\n        this.gpa = gpa;\n    }\n\n    public String getName() {\n        return Name;\n    }\n\n    public void setName(String name) {\n        Name = name;\n    }\n\n    public double getGpa() {\n        return gpa;\n    }\n\n    public void setGpa(double gpa) {\n        this.gpa = gpa;\n    }\n\n    @Override\n    public String toString() {\n        return \"[Name=\" + Name + \", studentNo=\" + studentNo + \", gpa=\" + gpa + \"]\";\n    }\n\n    @Override\n    public int compareTo(StudentRecord that) {\n        return this.Name.compareTo(that.Name);\n    }\n\n    @Override\n    public boolean equals(Object that) {\n        return this.Name.equals(((StudentRecord)that).Name);\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/csc205-module-14-video-example-class-diagram/","title":"CSC205 - Module 14 - Heaps and Priority Queues - Video Example Code Class Diagram","text":"<pre><code>classDiagram\n    ListADT &lt;|-- UnorderedListADT\n    UnorderedListADT &lt;|.. ArrayUnorderedList\n    ArrayList &lt;|-- ArrayUnorderedList\n    BinaryTreeADT &lt;|-- HeapADT\n    BinaryTreeADT &lt;|-- BinarySearchTreeADT\n    LinkedBinaryTree &lt;|-- LinkedBinarySearchTree\n    LinkedBinaryTree &lt;|-- LinkedHeap\n    HeapADT &lt;|.. ArrayHeap\n    HeapADT &lt;|.. LinkedHeap\n    BinarySearchTreeADT &lt;|.. LinkedBinarySearchTree\n    class ListADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +removeFirst() T\n        +removeLast() T\n        +remove(element: T) T\n        +first() T\n        +last() T\n        +contains(target: T) boolean\n        +isEmpty() boolean\n        +size() int\n    }\n    class UnorderedListADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +addToFront(element: T) void\n        +addToRear(element: T) void\n        +addAfter(element: T, target: T) void\n    }\n    class BinaryTreeADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +getRootElement() T\n        +isEmpty() boolean\n        +size() int\n        +contains(targetElement: T) boolean\n        +find(targetElement: T) T\n    }\n    class HeapADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +addElement(obj: T) void\n        +removeMin() T\n        +findMin() T\n    }\n    class BinarySearchTreeADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +addElement(element: T) void\n        +removeElement(targetElement: T) T\n        +removeAllOccurrences(targetElement: T) void\n        +removeMin() T\n        +removeMax() T\n        +findMin() T\n        +findMax() T\n    }\n    class ArrayList~T~ {\n        &lt;&lt;abstract&gt;&gt;\n        #rear: int\n        #list: T[]\n        #modCount: int\n        +expandCapacity() void\n        +remove(element: T) T\n        +isEmpty() boolean\n        +size() int\n    }\n    class ArrayUnorderedList~T~ {\n        +addToFront(element: T) void\n        +addToRear(element: T) void\n        +addAfter(element: T, target: T) void\n    }\n    class LinkedBinaryTree~T~ {\n        #root: BinaryTreeNode~T~\n        #modCount: int\n        +getRootElement() T\n        +isEmpty() boolean\n        +size() int\n    }\n    class LinkedBinarySearchTree~T~ {\n        +addElement(element: T) void\n        +removeElement(targetElement: T) T\n        +findMin() T\n        +findMax() T\n    }\n    class ArrayHeap~T~ {\n        +addElement(obj: T) void\n        +removeMin() T\n        +findMin() T\n    }\n    class LinkedHeap~T~ {\n        -lastNode: HeapNode~T~\n        +addElement(obj: T) void\n        +removeMin() T\n        +findMin() T\n    }</code></pre>","boost":1},{"location":"csc205/module-14/code/csc205-module-14-video-example-class-diagram/#comparable-interface","title":"Comparable Interface","text":"<pre><code>classDiagram\n    Comparable &lt;|.. StudentRecord\n    Comparable &lt;|.. Contact\n    class Comparable~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +compareTo(other: T) int\n    }\n    class StudentRecord {\n        -Name: String\n        -studentNo: int\n        -gpa: double\n        -static nextNum: int\n        +compareTo(other: StudentRecord) int\n    }\n    class Contact {\n        -firstName: String\n        -lastName: String\n        -phone: String\n        +compareTo(other: Contact) int\n    }</code></pre>","boost":1},{"location":"csc205/module-14/code/module-14-readme/","title":"README.md","text":"","boost":1},{"location":"csc205/module-14/code/module-14-readme/#module-14-heaps","title":"Module 14 - Heaps","text":"","boost":1},{"location":"csc205/module-14/code/module-14-readme/#introductory-videos","title":"Introductory videos","text":"<p>Video: Overview of Heaps &amp; Priority Queues (7:24)</p>","boost":1},{"location":"csc205/module-14/code/module-14-readme/#implementing-heaps-in-java","title":"Implementing Heaps in Java","text":"<ul> <li>Video 1 of 3: Introduction to min &amp; max heaps, HeapNode, &amp; LinkedHeap (7:55)</li> <li>Video 2 of 3: Adding elements to a min heap (10:07)</li> <li>Video 3 of 3: Removing elements from a min heap (9:11)</li> </ul>","boost":1},{"location":"csc205/module-14/code/module-14-readme/#code","title":"Code","text":"<p>Code walk through in Eclipse - these videos cover all the code from the package, so there is some overlap with the Implementing Heaps videos.</p> <ul> <li>Video 1 - Using heaps, HeapADT interface, HeapNode class, Linked Heap class, adding elements (11:28)</li> <li>Video 2 - Removing elements from a min heap - removeMin() (7:00)</li> </ul>","boost":1},{"location":"csc205/module-14/code/module-14-readme/#utility-classes","title":"Utility classes","text":"<ul> <li>HeapExample.java - example of using a Heap</li> <li>StudentRecord.java - class we will add to a Heap</li> <li>SortPhoneList - example of using heapSort</li> <li>Contact.java - class we will sort using HeapSort</li> </ul>","boost":1},{"location":"csc205/module-14/code/module-14-readme/#jsjf","title":"jsjf","text":"<p>Multiple classes were imported from earlier modules.  The new Java files for this module are:</p> <ul> <li>HeapADT.java - Heap Interface</li> <li>ArrayHeap.java - Array implementation of a Heap</li> <li>LinkedHeap.java - Linked implementation of a Heap</li> <li>HeapNode.java - Heap Node class</li> </ul>","boost":1},{"location":"csc205/module-14/code/module-14-readme/#csc205","title":"csc205","text":"<p>Video - HeapSort (1:36)</p> <ul> <li>Sorting.java - Sorting class that includes heapSort</li> </ul>","boost":1},{"location":"csc205/module-14/code/module-14-readme/#priorityqueue","title":"priorityqueue","text":"<p>Videos: </p> <ul> <li>Overview of Priority Queues &amp; the Prioritized Object class (10:06)</li> <li>Code walk through (5:44)</li> </ul> <p>Code: </p> <ul> <li>PriorityQueue.java - Implementation of a Priority Queue using a Heap</li> <li>PrioritizedObject.java - Helper object for use in a Priority Queue</li> <li>PQTester.java - Priority Queue test driver class</li> </ul>","boost":1},{"location":"csc205/module-14/code/csc205/","title":"Heaps - /csc205/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-14/code/csc205/#csc205","title":"/csc205/","text":"<ul> <li>Sorting.java</li> </ul>","boost":1},{"location":"csc205/module-14/code/csc205/Sorting/","title":"Sorting.java","text":"<pre><code>// The methods in this package are adapted from the code provided with:\n//   Java Foundations (2nd &amp; 3rd ed) by  Lewis, DePasquale, &amp; Chase\n//   Algorithms (4th ed) by Sedgewick &amp; Wayne\n\npackage videoexamples.module14.csc205;\n\nimport java.util.ArrayList;\n\nimport videoexamples.module14.jsjf.ArrayHeap;\n\npublic class Sorting {\n\n    // Helper methods\n    // These operations will occur multiple times in our sorting methods,\n    //   so we add methods for them here\n\n    private static &lt;T extends Comparable&lt;T&gt;&gt; boolean less_than(T a, T b) {\n        return (a.compareTo(b) &lt; 0);\n    }\n    private static &lt;T extends Comparable&lt;T&gt;&gt; boolean less_than_equal(T a, T b) {\n        return (a.compareTo(b) &lt;= 0);\n    }\n    private static &lt;T extends Comparable&lt;T&gt;&gt; boolean greater_than(T a, T b) {\n        return (a.compareTo(b) &gt; 0);\n    }\n    private static void swap(Object[] a, int ii, int jj) {\n        Object swap = a[ii];\n        a[ii] = a[jj];\n        a[jj] = swap;\n    }\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    boolean isSorted(T[]data){\n        return isSorted(data, 0, data.length-1);\n    }\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    boolean isSorted(T[]data, int min, int max){\n        for (int ii=min+1; ii&lt;=max; ii++) {\n            if (less_than(data[ii], data[ii-1]))\n                return false;\n        }\n        return true;\n    }\n\n    // Selection Sort\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n        void selectionSort (T[] data) {\n        selectionSort (data, 0, data.length-1);\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n        void selectionSort (T[] data, int min, int max) {\n\n        int indexOfSmallest;  // Smallest element found this pass\n\n        min = Math.max(min, 0);\n        max = Math.min(max, data.length-1);\n\n        // ii is the starting point for each pass\n        for(int ii=min; ii &lt;= max; ii++ ) {\n            indexOfSmallest = ii;\n            for (int scan=ii+1; scan&lt;=max; scan++) {\n                if (less_than(data[scan], data[indexOfSmallest])) {\n                    indexOfSmallest = scan;\n                }\n            }\n            swap(data, indexOfSmallest, ii);\n        }\n\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    void insertionSort(T[] data) {\n        insertionSort(data, 0, data.length-1);\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    void insertionSort(T[] data, int min, int max)\n    {\n        int start = Math.max(min,  1);\n        int end = Math.min(max,  data.length-1);\n\n        for (int index = start; index &lt;= end; index++)\n        {\n            int position = index;\n\n            // shift larger values to the right \n            while (position &gt; 0 &amp;&amp; greater_than(data[position-1],data[position]))\n            {\n                swap(data, position, position-1);\n                position--;\n            }\n        }\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    void bubbleSort(T[] data) {\n        bubbleSort(data, 0, data.length-1);\n    }\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    void bubbleSort(T[] data, int min, int max) {\n        int position, scan;\n\n        min = Math.max(min, 0);\n        max = Math.min(max, data.length-1);\n\n        // position is the \"stopping point\" for each pass\n        for (position = max; position &gt;= min; position--)\n        {\n            for (scan = 0; scan &lt; position; scan++)\n            {\n                if (greater_than(data[scan],data[scan+1]))\n                    swap(data, scan, scan + 1);\n            }\n        }\n    }\n\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt;\n    void mergeSort(T[] data) {\n        mergeSort(data, 0, data.length-1);\n    }\n\n    private static &lt;T extends Comparable&lt;T&gt;&gt;\n    void mergeSort(T[] data, int min, int max) {\n        if (min &lt; max)\n        {\n            int mid = min + ((max - min) / 2);\n            mergeSort(data, min, mid);\n            mergeSort(data, mid+1, max);\n            merge(data, min, mid, max);\n        }\n    }\n\n    private static &lt;T extends Comparable&lt;T&gt;&gt;\n    void merge(T[] data, int first, int mid, int last) {\n        T[] temp = (T[])(new Comparable[data.length]);  // temp array\n\n        // The two subarrays have already been sorted\n        int first1 = first, last1 = mid;   // endpoints of first subarray\n        int first2 = mid+1, last2 = last;  // endpoints of second subarray\n        int index = first1;  // next index open in temp array\n\n        //  Copy smaller item from each subarray into temp until one\n        //  of the subarrays is exhausted\n        // while both sub arrays have items left\n        while (first1 &lt;= last1 &amp;&amp; first2 &lt;= last2)\n        {\n            if (less_than(data[first1],data[first2]))\n            {\n                temp[index] = data[first1];\n                first1++;\n            }\n            else\n            {\n                temp[index] = data[first2];\n                first2++;\n            }\n            index++;\n        }\n\n        // Only one of the while loops below will execute\n        //  Copy remaining elements from first subarray, if any\n        while (first1 &lt;= last1)\n        {\n            temp[index] = data[first1];\n            first1++;\n            index++;\n        }\n\n        //  Copy remaining elements from second subarray, if any\n        while (first2 &lt;= last2)\n        {\n            temp[index] = data[first2];\n            first2++;\n            index++;\n        }\n\n        //  Copy merged data into original array\n        for (index = first; index &lt;= last; index++)\n            data[index] = temp[index];\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    void quickSort(T[] data) {\n        quickSort(data, 0, data.length-1);\n    }\n\n    private static &lt;T extends Comparable&lt;T&gt;&gt; \n    void quickSort(T[] data, int min, int max) {\n        if (min &lt; max)\n        {\n            // create partitions\n            int indexofpartition = partition(data, min, max);\n\n            // sort the left partition (lower values)\n            quickSort(data, min, indexofpartition - 1);\n\n            // sort the right partition (higher values)\n            quickSort(data, indexofpartition + 1, max);\n        }\n    }\n\n    private static &lt;T extends Comparable&lt;T&gt;&gt; \n    int partition(T[] data, int min, int max) {\n        T partitionelement;\n        int left, right;\n        int middle = min + ((max - min) / 2);\n\n        // use the middle data value as the partition element\n        partitionelement = data[middle];\n        // move it out of the way for now\n        swap(data, middle, min);\n\n        left = min;\n        right = max;\n\n        while (left &lt; right)\n        {\n            // search for an element that is &gt; the partition element\n            while (left &lt; right &amp;&amp; less_than_equal(data[left],partitionelement))\n                left++;\n\n            // search for an element that is &lt; the partition element\n            while (greater_than(data[right], partitionelement))\n                right--;\n\n            // swap the elements\n            if (left &lt; right)\n                swap(data, left, right);\n        }\n\n        // move the partition element into place\n        swap(data, min, right);\n\n        return right;\n    }\n\n\n    public static &lt;T&gt; void heapSort(T[] data) \n    {\n        ArrayHeap&lt;T&gt; heap = new ArrayHeap&lt;T&gt;();\n\n        // copy the array into a heap \n        for (int i = 0; i &lt; data.length; i++)\n            heap.addElement(data[i]);\n\n        // place the sorted elements back into the array \n        int count = 0;\n        while (!(heap.isEmpty()))\n        {\n            data[count] = heap.removeMin();\n            count++;\n        }\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/","title":"Heaps - /jsjf/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-14/code/jsjf/#jsjf","title":"/jsjf/","text":"<ul> <li>ArrayBinaryTree.java</li> <li>ArrayHeap.java</li> <li>ArrayList.java</li> <li>ArrayUnorderedList.java</li> <li>BinarySearchTreeADT.java</li> <li>BinaryTreeADT.java</li> <li>BinaryTreeNode.java</li> <li>HeapADT.java</li> <li>HeapNode.java</li> <li>LinkedBinarySearchTree.java</li> <li>LinkedBinaryTree.java</li> <li>LinkedHeap.java</li> <li>ListADT.java</li> <li>UnorderedListADT.java</li> </ul>","boost":1},{"location":"csc205/module-14/code/jsjf/ArrayBinaryTree/","title":"ArrayBinaryTree.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\nimport java.util.*;\n\nimport videoexamples.module14.jsjf.exceptions.*;\n\n/**\n * ArrayBinaryTree implements the BinaryTreeADT interface using an array.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class ArrayBinaryTree&lt;T&gt; implements BinaryTreeADT&lt;T&gt;, Iterable&lt;T&gt;\n{\n    private static final int DEFAULT_CAPACITY = 50;\n\n    protected int count;\n    protected T[] tree; \n    protected int modCount;\n\n    /**\n     * Creates an empty binary tree.\n     */\n    public ArrayBinaryTree() \n    {\n        count = 0;\n        tree = (T[]) new Object[DEFAULT_CAPACITY];\n    }\n\n    /**\n     * Creates a binary tree with the specified element as its root.\n     *\n     * @param element the element which will become the root of the new tree\n     */\n    public ArrayBinaryTree(T element) \n    {\n        count = 1;\n        tree = (T[]) new Object[DEFAULT_CAPACITY];\n        tree[0] = element;\n    }\n\n    /**\n     * Private method to expand capacity if full.\n     */    \n    protected void expandCapacity()\n    {\n        tree = Arrays.copyOf(tree, tree.length * 2);   \n    }\n\n    /**\n     * Returns the root element of the tree.\n     *\n     * @return element stored at the root\n     * @throws EmptyCollectionException if the tree is empty\n     */\n    public T getRootElement() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"ArrayBinaryTree\");\n\n        return tree[0];\n    }\n\n    /**\n     * Returns true if this binary tree is empty and false otherwise.\n     * \n     * @return true if this binary tree is empty, false otherwise\n     */\n    public boolean isEmpty() \n    {\n        return (count == 0);\n    }\n\n    /**\n     * Returns the integer size of this binary tree.\n     *\n     * @return the integer size of this binary tree\n     */\n    public int size() \n    {\n        return count;\n    }\n\n    /**\n     * Returns true if this tree contains an element that matches the\n     * specified target element and false otherwise.\n     *\n     * @param targetElement the element being sought in the tree\n     * @return true if the element is in this tree\n     */\n    public boolean contains(T targetElement) \n    {\n        T temp;\n        boolean found = false;\n\n        try \n        {\n            temp = find(targetElement);\n            found = true;\n        }\n        catch (Exception ElementNotFoundException) \n        {\n            found = false;\n        }\n\n        return found;\n    }\n\n    /**\n     * Returns a reference to the specified target element if it is\n     * found in this binary tree.  Throws a ElementNotFoundException if\n     * the specified target element is not found in the binary tree.\n     *\n     * @param targetElement the element being sought in the tree\n     * @return true if the element is in the tree\n     * @throws ElementNotFoundException if the element is not in the tree\n     */\n    public T find(T targetElement) throws ElementNotFoundException \n    {\n        T temp = null;\n        boolean found = false;\n\n        for (int i = 0; i &lt; tree.length &amp;&amp; !found; i++)\n            if (tree[i] != null)\n                if (targetElement.equals(tree[i]))\n                {\n                    found = true;\n                    temp = tree[i];\n                }\n\n        if (!found)\n            throw new ElementNotFoundException(\"ArrayBinaryTree\");\n\n        return temp;\n    }\n\n\n    /**\n     * Returns a string representation of this binary tree showing\n     * the nodes in an inorder fashion.\n     *\n     * @return a string representation of the binary tree\n     */\n    public String toString() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        inOrder(0, tempList);\n\n        return tempList.toString();\n    }\n\n    /**\n     * Returns an iterator over the elements of this binary tree using\n     * the iteratorInOrder method\n     *\n     * @return an iterator over the binary tree\n     */\n    public Iterator&lt;T&gt; iterator() \n    {\n        return this.iteratorInOrder();\n    }\n\n    /**\n     * Performs an inorder traversal on this binary tree by calling an\n     * overloaded, recursive inorder method that starts with\n     * the root.\n     *\n     * @return an iterator over the binary tree\n     */\n    public Iterator&lt;T&gt; iteratorInOrder() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        inOrder(0, tempList);\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Performs a recursive inorder traversal.\n     *\n     * @param node the index of the node used in the traversal\n     * @param tempList the temporary list used in the traversal\n     */\n    protected void inOrder(int node, ArrayUnorderedList&lt;T&gt; tempList) \n    {\n        if (node &lt; tree.length)\n            if (tree[node] != null)\n            {\n                inOrder(node * 2 + 1, tempList);\n                tempList.addToRear(tree[node]);\n                inOrder((node + 1) * 2, tempList);\n            }\n    }\n\n    /**\n     * Performs an preorder traversal on this binary tree by calling an\n     * overloaded, recursive preorder method that starts with\n     * the root.\n     * \n     * @return an iterator over the binary tree\n     */\n    public Iterator&lt;T&gt; iteratorPreOrder() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        preOrder(0, tempList);\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Performs a recursive preorder traversal.\n     *\n     * @param node the index of the node used in the traversal\n     * @param tempList the temporary list used in the traversal\n     */\n    protected void preOrder(int node, ArrayUnorderedList&lt;T&gt; tempList) \n    {\n        if (node &lt; tree.length)\n            if (tree[node] != null) \n            { \n                tempList.addToRear(tree[node]);\n                preOrder(node * 2 + 1, tempList);\n                preOrder((node + 1) * 2, tempList);\n            }\n    }\n\n    /**\n     * Performs an postorder traversal on the binary tree by calling\n     * an overloaded, recursive postorder method that starts\n     * with the root.\n     * \n     * @return an iterator over the binary tree\n     */\n    public Iterator&lt;T&gt; iteratorPostOrder() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        postOrder(0, tempList);\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Performs a recursive postorder traversal.\n     * \n     * @param node the index of the node used in the traversal\n     * @param tempList the temporary list used in the traversal\n     */\n    protected void postOrder(int node, ArrayUnorderedList&lt;T&gt; tempList) \n    {\n        if (node &lt; tree.length)\n            if (tree[node] != null) \n            {\n                postOrder(node * 2 + 1, tempList); \n                postOrder((node + 1) * 2, tempList);\n                tempList.addToRear(tree[node]);  \n            }\n    }\n\n    /**\n     * Performs a levelorder traversal on this binary tree, using a\n     * tempList.\n     *\n     * @return an iterator over the binary tree\n     */\n    public Iterator&lt;T&gt; iteratorLevelOrder() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        int ct = 0; // current number of elements added to list\n        int i = 0; // current position in array\n\n        while (ct &lt; count)\n        {\n            if (tree[i] != null)\n            {\n                tempList.addToRear(tree[i]);\n                ct++;\n            }\n            i++;\n        }\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Inner class to represent an iterator over the elements of this tree\n     */\n    private class TreeIterator implements Iterator&lt;T&gt;\n    {\n        private int expectedModCount;\n        private Iterator&lt;T&gt; iter;\n\n        /**\n         * Sets up this iterator using the specified iterator.\n         *\n         * @param iter the list iterator created by a tree traversal\n         */\n        public TreeIterator(Iterator&lt;T&gt; iter)\n        {\n            this.iter = iter;\n            expectedModCount = modCount;\n        }\n\n        /**\n         * Returns true if this iterator has at least one more element\n         * to deliver in the iteration.\n         *\n         * @return  true if this iterator has at least one more element to deliver\n         *          in the iteration\n         * @throws  ConcurrentModificationException if the collection has changed\n         *          while the iterator is in use\n         */\n        public boolean hasNext() throws ConcurrentModificationException\n        {\n            if (!(modCount == expectedModCount))\n                throw new ConcurrentModificationException();\n\n            return (iter.hasNext());\n        }\n\n        /**\n         * Returns the next element in the iteration. If there are no\n         * more elements in this iteration, a NoSuchElementException is\n         * thrown.\n         *\n         * @return the next element in the iteration\n         * @throws NoSuchElementException if the iterator is empty\n         */\n        public T next() throws NoSuchElementException\n        {\n            if (hasNext())\n                return (iter.next());\n            else \n                throw new NoSuchElementException();\n        }\n\n        /**\n         * The remove operation is not supported.\n         * \n         * @throws UnsupportedOperationException if the remove operation is called\n         */\n        public void remove()\n        {\n            throw new UnsupportedOperationException();\n        }\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/ArrayHeap/","title":"ArrayHeap.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\nimport videoexamples.module14.jsjf.exceptions.*;\n\n/**\n * ArrayHeap provides an array implementation of a minheap.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class ArrayHeap&lt;T&gt; extends ArrayBinaryTree&lt;T&gt; implements HeapADT&lt;T&gt; \n{\n    /**\n     * Creates an empty heap.\n     */\n    public ArrayHeap() \n    {\n        super();\n    }\n\n    /**\n     * Adds the specified element to this heap in the appropriate\n     * position according to its key value.  \n     *\n     * @param obj the element to be added to the heap\n     */\n    public void addElement(T obj) \n    {\n        if (count == tree.length)\n            expandCapacity();\n\n        tree[count] = obj;\n        count++;\n        modCount++;\n\n        if (count &gt; 1)\n            heapifyAdd();\n    }\n\n    /**\n     * Reorders this heap to maintain the ordering property after\n     * adding a node.\n     */\n    private void heapifyAdd()\n    {\n        T temp;\n        int next = count - 1;\n\n        temp = tree[next];\n\n        while ((next != 0) &amp;&amp; \n                (((Comparable&lt;T&gt;)temp).compareTo(tree[(next - 1) / 2]) &lt; 0))\n        {\n\n            tree[next] = tree[(next - 1) / 2];\n            next = (next - 1) / 2;\n        }\n\n        tree[next] = temp;\n    }\n\n    /**\n     * Remove the element with the lowest value in this heap and\n     * returns a reference to it. Throws an EmptyCollectionException if\n     * the heap is empty.\n     *\n     * @return a reference to the element with the lowest value in this heap\n     * @throws EmptyCollectionException if the heap is empty\n     */\n    public T removeMin() throws EmptyCollectionException \n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"ArrayHeap\");\n\n        T minElement = tree[0];\n        tree[0] = tree[count - 1];\n        heapifyRemove();\n        count--;\n        modCount++;\n\n        return minElement;\n    }\n\n    /**\n     * Reorders this heap to maintain the ordering property\n     * after the minimum element has been removed.\n     */\n    private void heapifyRemove()\n    {\n        T temp;\n        int node = 0;\n        int left = 1;\n        int right = 2;\n        int next;\n\n        if ((tree[left] == null) &amp;&amp; (tree[right] == null))\n            next = count;\n        else if (tree[right] == null)\n            next = left;\n        else if (((Comparable&lt;T&gt;)tree[left]).compareTo(tree[right]) &lt; 0)\n            next = left;\n        else\n            next = right;\n        temp = tree[node];\n\n        while ((next &lt; count) &amp;&amp; \n                (((Comparable&lt;T&gt;)tree[next]).compareTo(temp) &lt; 0))\n        {\n            tree[node] = tree[next];\n            node = next;\n            left = 2 * node + 1;\n            right = 2 * (node + 1);\n            if ((tree[left] == null) &amp;&amp; (tree[right] == null))\n                next = count;\n            else if (tree[right] == null)\n                next = left;\n            else if (((Comparable&lt;T&gt;)tree[left]).compareTo(tree[right]) &lt; 0)\n                next = left;\n            else\n                next = right;\n        }\n        tree[node] = temp;\n    }\n\n    /**\n     * Returns the element with the lowest value in this heap.\n     * Throws an EmptyCollectionException if the heap is empty.\n     *\n     * @return the element with the lowest value in this heap\n     * @throws EmptyCollectionException if the heap is empty\n     */\n    public T findMin() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"ArrayHeap\");\n\n        return tree[0];\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/ArrayList/","title":"ArrayList.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\nimport java.util.*;\n\nimport videoexamples.module14.jsjf.exceptions.*;\n\n/**\n * ArrayList represents an array implementation of a list. The front of\n * the list is kept at array index 0. This class will be extended\n * to create a specific kind of list.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic abstract class ArrayList&lt;T&gt; implements ListADT&lt;T&gt;, Iterable&lt;T&gt;\n{\n    private final static int DEFAULT_CAPACITY = 100;\n    private final static int NOT_FOUND = -1;\n\n    protected int rear;\n    protected T[] list; \n    protected int modCount;\n\n    /**\n     * Creates an empty list using the default capacity.\n     */\n    public ArrayList()\n    {\n        this(DEFAULT_CAPACITY);\n    }\n\n    /**\n     * Creates an empty list using the specified capacity.\n     *\n     * @param initialCapacity the integer value of the size of the array list\n     */\n    public ArrayList(int initialCapacity)\n    {\n        rear = 0;\n        list = (T[])(new Object[initialCapacity]);\n        modCount = 0;\n    }\n\n    /**\n     * Creates a new array to store the contents of this list with\n     * twice the capacity of the old one. Called by descendant classes\n     * that add elements to the list.\n     */\n    protected void expandCapacity()\n    {\n        // To be completed as a Programming Project\n    }\n\n    /**\n     * Removes and returns the last element in this list.\n     *\n     * @return the last element in the list\n     * @throws EmptyCollectionException if the element is not in the list\n     */\n    public T removeLast() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Removes and returns the first element in this list.\n     *\n     * @return the first element in the list\n     * @throws EmptyCollectionException if the element is not in the list\n     */\n    public T removeFirst() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Removes and returns the specified element.\n     *\n     * @param  element the element to be removed and returned from the list\n     * @return the removed element\n     * @throws ElementNotFoundException if the element is not in the list\n     */\n    public T remove(T element)\n    {\n        T result;\n        int index = find(element);\n\n        if (index == NOT_FOUND)\n            throw new ElementNotFoundException(\"ArrayList\");\n\n        result = list[index];\n        rear--;\n\n        // shift the appropriate elements \n        for (int scan = index; scan &lt; rear; scan++)\n            list[scan] = list[scan+1];\n\n        list[rear] = null;\n        modCount++;\n\n        return result;\n    }\n\n    /**\n     * Returns a reference to the element at the front of this list.\n     * The element is not removed from the list.  Throws an\n     * EmptyCollectionException if the list is empty.  \n     *\n     * @return a reference to the first element in the list\n     * @throws EmptyCollectionException if the list is empty\n     */\n    public T first() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Returns a reference to the element at the rear of this list.\n     * The element is not removed from the list. Throws an\n     * EmptyCollectionException if the list is empty.  \n     *\n     * @return a reference to the last element of this list\n     * @throws EmptyCollectionException if the list is empty\n     */\n    public T last() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Returns true if this list contains the specified element.\n     *\n     * @param target the target element\n     * @return true if the target is in the list, false otherwise \n     */\n    public boolean contains(T target)\n    {\n        return (find(target) != NOT_FOUND);\n    }\n\n    /**\n     * Returns the array index of the specified element, or the\n     * constant NOT_FOUND if it is not found.\n     *\n     * @param target the target element\n     * @return the index of the target element, or the \n     *         NOT_FOUND constant\n     */\n    private int find(T target)\n    {\n        int scan = 0; \n        int result = NOT_FOUND;\n\n        if (!isEmpty())\n            while (result == NOT_FOUND &amp;&amp; scan &lt; rear)\n                if (target.equals(list[scan]))\n                    result = scan;\n                else\n                    scan++;\n\n        return result;\n    }\n\n    /**\n     * Returns true if this list is empty and false otherwise. \n     *\n     * @return true if the list is empty, false otherwise\n     */\n    public boolean isEmpty()\n    {\n        // To be completed as a Programming Project\n\n        return true;  // temp\n    }\n\n    /**\n     * Returns the number of elements currently in this list.\n     *\n     * @return the number of elements in the list\n     */\n    public int size()\n    {\n        // To be completed as a Programming Project\n\n        return 0;  // temp\n    }\n\n    /**\n     * Returns a string representation of this list. \n     * \n     * @return the string representation of the list\n     */\n    public String toString()\n    {\n        // To be completed as a Programming Project\n\n        return \"\";  // temp\n    }\n\n    /**\n     * Returns an iterator for the elements currently in this list.\n     * \n     * @return an iterator for the elements in the list\n     */\n    public Iterator&lt;T&gt; iterator()\n    {\n        return new ArrayListIterator();\n    }\n\n    /**\n     * ArrayListIterator iterator over the elements of an ArrayList.\n     */ \n    private class ArrayListIterator implements Iterator&lt;T&gt;\n    {\n        int iteratorModCount;\n        int current;\n\n        /**\n         * Sets up this iterator using the specified modCount.\n         * \n         * @param modCount the current modification count for the ArrayList\n         */\n        public ArrayListIterator()\n        {\n            iteratorModCount = modCount;\n            current = 0;\n        }\n\n        /**\n         * Returns true if this iterator has at least one more element\n         * to deliver in the iteration.\n         *\n         * @return  true if this iterator has at least one more element to deliver\n         *          in the iteration\n         * @throws  ConcurrentModificationException if the collection has changed\n         *          while the iterator is in use\n         */\n        public boolean hasNext() throws ConcurrentModificationException\n        {\n            if (iteratorModCount != modCount)\n                throw new ConcurrentModificationException();\n\n            return (current &lt; rear);\n        }\n\n        /**\n         * Returns the next element in the iteration. If there are no\n         * more elements in this iteration, a NoSuchElementException is\n         * thrown.\n         *\n         * @return  the next element in the iteration\n         * @throws  NoSuchElementException if an element not found exception occurs\n         * @throws  ConcurrentModificationException if the collection has changed\n         */\n        public T next() throws ConcurrentModificationException\n        {\n            if (!hasNext())\n                throw new NoSuchElementException();\n\n            current++;\n\n            return list[current - 1];\n        }\n\n        /**\n         * The remove operation is not supported in this collection.\n         * \n         * @throws UnsupportedOperationException if the remove method is called\n         */\n        public void remove() throws UnsupportedOperationException\n        {\n            throw new UnsupportedOperationException();\n        }\n\n    }   \n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/ArrayUnorderedList/","title":"ArrayUnorderedList.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\nimport videoexamples.module14.jsjf.exceptions.ElementNotFoundException;\n\n/**\n * ArrayUnorderedList represents an array implementation of an unordered list.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class ArrayUnorderedList&lt;T&gt; extends ArrayList&lt;T&gt; \nimplements UnorderedListADT&lt;T&gt;\n{\n    /**\n     * Creates an empty list using the default capacity.\n     */\n    public ArrayUnorderedList()\n    {\n        super();\n    }\n\n    /**\n     * Creates an empty list using the specified capacity.\n     *\n     * @param initialCapacity the initial size of the list\n     */\n    public ArrayUnorderedList(int initialCapacity)\n    {\n        super(initialCapacity);\n    }\n\n    /**\n     * Adds the specified element to the front of this list.\n     * \n     * @param element the element to be added to the front of the list\n     */\n    public void addToFront(T element)\n    {\n        if (size() == list.length)\n            expandCapacity();\n\n        // shift elements up one \n        for (int scan=rear; scan &gt; 0; scan--)\n            list[scan] = list[scan-1];\n\n        list[0] = element;\n        rear++;\n        modCount++;\n    }\n\n    /**\n     * Adds the specified element to the rear of this list.\n     *\n     * @param element the element to be added to the list\n     */\n    public void addToRear(T element)\n    {\n        if (size() == list.length)\n            expandCapacity();\n\n        list[rear] = element;\n        rear++;\n        modCount++;\n    }\n\n    /**\n     * Adds the specified element after the specified target element.\n     * Throws an ElementNotFoundException if the target is not found.\n     *\n     * @param element the element to be added after the target element\n     * @param target  the target that the element is to be added after\n     */\n    public void addAfter(T element, T target)\n    {\n        if (size() == list.length)\n            expandCapacity();\n\n        int scan = 0;\n\n        // find the insertion point\n        while (scan &lt; rear &amp;&amp; !target.equals(list[scan])) \n            scan++;\n\n        if (scan == rear)\n            throw new ElementNotFoundException(\"UnorderedList\");\n\n        scan++;\n\n        // shift elements up one\n        for (int shift = rear; shift &gt; scan; shift--)\n            list[shift] = list[shift - 1];\n\n        // insert element\n        list[scan] = element;\n        rear++;\n        modCount++;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/BinarySearchTreeADT/","title":"BinarySearchTreeADT.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\n/**\n * BinarySearchTreeADT defines the interface to a binary search tree.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic interface BinarySearchTreeADT&lt;T&gt; extends BinaryTreeADT&lt;T&gt; \n{\n    /** \n     * Adds the specified element to the proper location in this tree. \n     *\n     * @param element the element to be added to this tree\n     */\n    public void addElement(T element);\n\n    /** \n     * Removes and returns the specified element from this tree. \n     *\n     * @param targetElement the element to be removed from the tree\n     * @return the element to be removed from the tree\n     */ \n    public T removeElement(T targetElement);\n\n    /** \n     * Removes all occurrences of the specified element from this tree. \n     *\n     * @param targetElement the element to be removed from the tree\n     */\n    public void removeAllOccurrences(T targetElement);\n\n    /** \n     * Removes and returns the smallest element from this tree. \n     *\n     * @return the smallest element from the tree.\n     */\n    public T removeMin();\n\n    /** \n     * Removes and returns the largest element from this tree. \n     *\n     * @return the largest element from the tree\n     */ \n    public T removeMax();\n\n    /** \n     * Returns the smallest element in this tree without removing it. \n     * \n     * @return the smallest element in the tree\n     */ \n    public T findMin();\n\n    /** \n     * Returns the largest element in this tree without removing it. \n     * \n     * @return the largest element in the tree\n     */\n    public T findMax();\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/BinaryTreeADT/","title":"BinaryTreeADT.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\nimport java.util.Iterator;\n\n/**\n * BinaryTreeADT defines the interface to a binary tree data structure.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface BinaryTreeADT&lt;T&gt; \n{\n    /** \n     * Returns a reference to the root element \n     *\n     * @return a reference to the root\n     */\n    public T getRootElement();\n\n    /** \n     * Returns true if this binary tree is empty and false otherwise.\n     *\n     * @return true if this binary tree is empty, false otherwise\n     */\n    public boolean isEmpty();\n\n    /** \n     * Returns the number of elements in this binary tree.\n     *\n     * @return the number of elements in the tree\n     */\n    public int size();\n\n    /** \n     * Returns true if the binary tree contains an element that matches\n     * the specified element and false otherwise. \n     *\n     * @param targetElement the element being sought in the tree\n     * @return true if the tree contains the target element\n     */\n    public boolean contains(T targetElement);\n\n    /** \n     * Returns a reference to the specified element if it is found in \n     * this binary tree. Throws an exception if the specified element\n     * is not found.\n     *\n     * @param targetElement the element being sought in the tree\n     * @return a reference to the specified element\n     */\n    public T find(T targetElement);\n\n    /**  \n     * Returns the string representation of this binary tree.\n     *\n     * @return a string representation of the binary tree\n     */\n    public String toString();\n\n    /**  \n     * Returns an iterator over the elements of this tree.\n     *\n     * @return an iterator over the elements of this binary tree\n     */\n    public Iterator&lt;T&gt; iterator();\n\n    /**  \n     * Returns an iterator that represents an inorder traversal on this binary tree.  \n     *\n     * @return an iterator over the elements of this binary tree\n     */\n    public Iterator&lt;T&gt; iteratorInOrder();\n\n    /**  \n     * Returns an iterator that represents a preorder traversal on this binary tree. \n     *\n     * @return an iterator over the elements of this binary tree\n     */\n    public Iterator&lt;T&gt; iteratorPreOrder();\n\n    /**  \n     * Returns an iterator that represents a postorder traversal on this binary tree. \n     *\n     * @return an iterator over the elements of this binary tree\n     */\n    public Iterator&lt;T&gt; iteratorPostOrder();\n\n    /**  \n     * Returns an iterator that represents a levelorder traversal on the binary tree.\n     *\n     * @return an iterator over the elements of this binary tree\n     */\n    public Iterator&lt;T&gt; iteratorLevelOrder();\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/BinaryTreeNode/","title":"BinaryTreeNode.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\n/**\n * BinaryTreeNode represents a node in a binary tree with a left and \n * right child.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class BinaryTreeNode&lt;T&gt;\n{\n    protected T element;\n    protected BinaryTreeNode&lt;T&gt; left, right;\n\n    /**\n     * Creates a new tree node with the specified data.\n     *\n     * @param obj the element that will become a part of the new tree node\n     */\n    public BinaryTreeNode(T obj) \n    {\n        element = obj;\n        left = null;\n        right = null;\n    }\n\n    /**\n     * Creates a new tree node with the specified data.\n     *\n     * @param obj the element that will become a part of the new tree node\n     * @param left the tree that will be the left subtree of this node\n     * @param right the tree that will be the right subtree of this node\n     */\n    public BinaryTreeNode(T obj, LinkedBinaryTree&lt;T&gt; left, LinkedBinaryTree&lt;T&gt; right) \n    {\n        element = obj;\n        if (left == null)\n            this.left = null;\n        else\n            this.left = left.getRootNode();\n\n        if (right == null)\n            this.right = null;\n        else\n            this.right = right.getRootNode();\n    }\n\n    /**\n     * Returns the number of non-null children of this node.\n     *\n     * @return the integer number of non-null children of this node \n     */\n    public int numChildren() \n    {\n        int children = 0;\n\n        if (left != null)\n            children = 1 + left.numChildren();\n\n        if (right != null)\n            children = children + 1 + right.numChildren();\n\n        return children;\n    }\n\n    /**\n     * Return the element at this node.\n     *\n     * @return the element stored at this node\n     */\n    public T getElement() \n    {\n        return element;\n    }\n\n    /**\n     * Return the right child of this node.\n     *\n     * @return the right child of this node\n     */\n    public BinaryTreeNode&lt;T&gt; getRight() \n    {\n        return right;\n    }\n\n    /**\n     * Sets the right child of this node.\n     *\n     * @param node the right child of this node\n     */\n    public void setRight(BinaryTreeNode&lt;T&gt; node) \n    {\n        right = node;\n    }\n\n    /**\n     * Return the left child of this node.\n     *\n     * @return the left child of the node\n     */\n    public BinaryTreeNode&lt;T&gt; getLeft() \n    {\n        return left;\n    }\n\n    /**\n     * Sets the left child of this node.\n     *\n     * @param node the left child of this node\n     */\n    public void setLeft(BinaryTreeNode&lt;T&gt; node) \n    {\n        left = node;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/HeapADT/","title":"HeapADT.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\n/**\n * HeapADT defines the interface to a Heap.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface HeapADT&lt;T&gt; extends BinaryTreeADT&lt;T&gt; \n{\n    /** \n     * Adds the specified object to this heap. \n     *\n     * @param obj the element to be added to the heap\n     */   \n    public void addElement(T obj);\n\n    /** \n     * Removes element with the lowest value from this heap. \n     *\n     * @return the element with the lowest value from the heap\n     */\n    public T removeMin();\n\n    /** \n     * Returns a reference to the element with the lowest value in \n     * this heap. \n     *\n     * @return a reference to the element with the lowest value in the heap\n     */\n    public T findMin();\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/HeapNode/","title":"HeapNode.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\n/**\n * HeapNode represents a binary tree node with a parent pointer for use \n * in heaps.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class HeapNode&lt;T&gt; extends BinaryTreeNode&lt;T&gt;\n{\n    protected HeapNode&lt;T&gt; parent;\n\n    /**\n     * Creates a new heap node with the specified data.\n     * \n     * @param obj the data to be contained within the new heap node\n     */\n    public HeapNode(T obj) \n    {\n        super(obj);\n        parent = null;\n    }\n\n    /**\n     * Return the parent of this node.\n     *\n     * @return the parent of the node\n     */\n    public HeapNode&lt;T&gt; getParent() \n    {\n        return parent;\n    }\n\n    /**\n     * Sets the element stored at this node.\n     *\n     * @param the element to be stored \n     */\n    public void setElement(T obj) \n    {\n        element = obj;\n    }\n\n    /**\n     * Sets the parent of this node.\n     *\n     * @param node the parent of the node\n     */\n    public void setParent(HeapNode&lt;T&gt; node) \n    {\n        parent = node;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/LinkedBinarySearchTree/","title":"LinkedBinarySearchTree.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\nimport videoexamples.module14.jsjf.exceptions.*;\n\n/**\n * LinkedBinarySearchTree implements the BinarySearchTreeADT interface \n * with links.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class LinkedBinarySearchTree&lt;T&gt; extends LinkedBinaryTree&lt;T&gt;\nimplements BinarySearchTreeADT&lt;T&gt;\n{\n    /**\n     * Creates an empty binary search tree.\n     */\n    public LinkedBinarySearchTree() \n    {\n        super();\n    }\n\n    /**\n     * Creates a binary search with the specified element as its root.\n     *\n     * @param element the element that will be the root of the new binary\n     *        search tree\n     */\n    public LinkedBinarySearchTree(T element) \n    {\n        super(element);\n\n        if (!(element instanceof Comparable))\n            throw new NonComparableElementException(\"LinkedBinarySearchTree\");\n    }\n\n    /**\n     * Adds the specified object to the binary search tree in the\n     * appropriate position according to its natural order.  Note that\n     * equal elements are added to the right.\n     *\n     * @param element the element to be added to the binary search tree\n     */\n    public void addElement(T element) \n    {\n        if (!(element instanceof Comparable))\n            throw new NonComparableElementException(\"LinkedBinarySearchTree\");\n\n        Comparable&lt;T&gt; comparableElement = (Comparable&lt;T&gt;)element;\n\n        if (isEmpty())\n            root = new BinaryTreeNode&lt;T&gt;(element);\n        else \n        {\n            if (comparableElement.compareTo(root.getElement()) &lt; 0)\n            {\n                if (root.getLeft() == null) \n                    this.getRootNode().setLeft(new BinaryTreeNode&lt;T&gt;(element));\n                else\n                    addElement(element, root.getLeft());\n            }\n            else\n            {\n                if (root.getRight() == null) \n                    this.getRootNode().setRight(new BinaryTreeNode&lt;T&gt;(element));\n                else\n                    addElement(element, root.getRight());\n            }\n        }\n        modCount++;\n    }\n\n    /**\n     * Adds the specified object to the binary search tree in the\n     * appropriate position according to its natural order.  Note that\n     * equal elements are added to the right.\n     *\n     * @param element the element to be added to the binary search tree\n     */\n    private void addElement(T element, BinaryTreeNode&lt;T&gt; node) \n    {\n        Comparable&lt;T&gt; comparableElement = (Comparable&lt;T&gt;)element;\n\n        if (comparableElement.compareTo(node.getElement()) &lt; 0)\n        {\n            if (node.getLeft() == null) \n                node.setLeft(new BinaryTreeNode&lt;T&gt;(element));\n            else\n                addElement(element, node.getLeft());\n        }\n        else\n        {\n            if (node.getRight() == null) \n                node.setRight(new BinaryTreeNode&lt;T&gt;(element));\n            else\n                addElement(element, node.getRight());\n        }\n    }\n\n    /**\n     * Removes the first element that matches the specified target\n     * element from the binary search tree and returns a reference to\n     * it.  Throws a ElementNotFoundException if the specified target\n     * element is not found in the binary search tree.\n     *\n     * @param targetElement the element being sought in the binary search tree\n     * @throws ElementNotFoundException if the target element is not found\n     */\n    public T removeElement(T targetElement)\n            throws ElementNotFoundException \n    {\n        T result = null;\n\n        if (isEmpty())\n            throw new ElementNotFoundException(\"LinkedBinarySearchTree\");\n        else\n        {\n            BinaryTreeNode&lt;T&gt; parent = null;\n            if (((Comparable&lt;T&gt;)targetElement).equals(root.element)) \n            {\n                result =  root.element;\n                BinaryTreeNode&lt;T&gt; temp = replacement(root);\n                if (temp == null)\n                    root = null;\n                else \n                {\n                    root.element = temp.element;\n                    root.setRight(temp.right);\n                    root.setLeft(temp.left);\n                }\n\n                modCount++;\n            }\n            else \n            {                \n                parent = root;\n                if (((Comparable&lt;T&gt;)targetElement).compareTo(root.element) &lt; 0)\n                    result = removeElement(targetElement, root.getLeft(), parent);\n                else\n                    result = removeElement(targetElement, root.getRight(), parent);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Removes the first element that matches the specified target\n     * element from the binary search tree and returns a reference to\n     * it.  Throws a ElementNotFoundException if the specified target\n     * element is not found in the binary search tree.\n     *\n     * @param targetElement the element being sought in the binary search tree\n     * @param node the node from which to search\n     * @param parent the parent of the node from which to search\n     * @throws ElementNotFoundException if the target element is not found\n     */\n    private T removeElement(T targetElement, BinaryTreeNode&lt;T&gt; node, BinaryTreeNode&lt;T&gt; parent)\n            throws ElementNotFoundException \n    {\n        T result = null;\n\n        if (node == null)\n            throw new ElementNotFoundException(\"LinkedBinarySearchTree\");\n        else\n        {\n            if (((Comparable&lt;T&gt;)targetElement).equals(node.element)) \n            {\n                result =  node.element;\n                BinaryTreeNode&lt;T&gt; temp = replacement(node);\n                if (parent.right == node)\n                    parent.right = temp;\n                else \n                    parent.left = temp;\n\n                modCount++;\n            }\n            else \n            {                \n                parent = node;\n                if (((Comparable&lt;T&gt;)targetElement).compareTo(node.element) &lt; 0)\n                    result = removeElement(targetElement, node.getLeft(), parent);\n                else\n                    result = removeElement(targetElement, node.getRight(), parent);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns a reference to a node that will replace the one\n     * specified for removal. In the case where the removed node has \n     * two children, the inorder successor is used as its replacement.\n     *\n     * @param node the node to be removed\n     * @return a reference to the replacing node\n     */\n    private BinaryTreeNode&lt;T&gt; replacement(BinaryTreeNode&lt;T&gt; node) \n    {\n        BinaryTreeNode&lt;T&gt; result = null;\n\n        if ((node.left == null) &amp;&amp; (node.right == null))\n            result = null;\n\n        else if ((node.left != null) &amp;&amp; (node.right == null))\n            result = node.left;\n\n        else if ((node.left == null) &amp;&amp; (node.right != null))\n            result = node.right;\n\n        else\n        {\n            BinaryTreeNode&lt;T&gt; current = node.right;\n            BinaryTreeNode&lt;T&gt; parent = node;\n\n            while (current.left != null)\n            {\n                parent = current;\n                current = current.left;\n            }\n\n            current.left = node.left;\n            if (node.right != current)\n            {\n                parent.left = current.right;\n                current.right = node.right;\n            }\n\n            result = current;\n        }\n\n        return result;\n    }\n\n    /**\n     * Removes elements that match the specified target element from \n     * the binary search tree. Throws a ElementNotFoundException if \n     * the specified target element is not found in this tree.\n     *\n     * @param targetElement the element being sought in the binary search tree\n     * @throws ElementNotFoundException if the target element is not found\n     */\n    public void removeAllOccurrences(T targetElement)\n            throws ElementNotFoundException \n    {\n        removeElement(targetElement);\n\n        try\n        {\n            while (true) {\n                removeElement(targetElement);\n            }\n        }\n\n        catch (Exception ElementNotFoundException)\n        {\n        }\n    }\n\n    /**\n     * Removes the node with the least value from the binary search\n     * tree and returns a reference to its element. Throws an\n     * EmptyCollectionException if this tree is empty. \n     *\n     * @return a reference to the node with the least value\n     * @throws EmptyCollectionException if the tree is empty\n     */\n    public T removeMin() throws EmptyCollectionException \n    {\n        T result = null;\n\n        if (isEmpty())\n            throw new EmptyCollectionException(\"LinkedBinarySearchTree\");\n        else \n        {\n            if (root.left == null) \n            {\n                result = root.element;\n                root = root.right;\n            }\n            else \n            {\n                BinaryTreeNode&lt;T&gt; parent = root;\n                BinaryTreeNode&lt;T&gt; current = root.left;\n                while (current.left != null) \n                {\n                    parent = current;\n                    current = current.left;\n                }\n                result =  current.element;\n                parent.left = current.right;\n            }\n\n            modCount++;\n        }\n\n        return result;\n    }\n\n    /**\n     * Removes the node with the highest value from the binary\n     * search tree and returns a reference to its element. Throws an\n     * EmptyCollectionException if this tree is empty. \n     *\n     * @return a reference to the node with the highest value\n     * @throws EmptyCollectionException if the tree is empty\n     */\n    public T removeMax() throws EmptyCollectionException \n    {\n        // Completed as part of Programming Project\n        T result = null;\n\n        if (isEmpty())\n            throw new EmptyCollectionException(\"LinkedBinarySearchTree\");\n        else \n        {\n            if (root.right == null) \n            {\n                result = root.element;\n                root = root.left;\n            }\n            else \n            {\n                BinaryTreeNode&lt;T&gt; parent = root;\n                BinaryTreeNode&lt;T&gt; current = root.right;\n                while (current.right != null) \n                {\n                    parent = current;\n                    current = current.right;\n                }\n                result =  current.element;\n                parent.right = current.left;\n            }\n\n            modCount++;\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns the element with the least value in the binary search\n     * tree. It does not remove the node from the binary search tree. \n     * Throws an EmptyCollectionException if this tree is empty.\n     *\n     * @return the element with the least value\n     * @throws EmptyCollectionException if the tree is empty\n     */\n    public T findMin() throws EmptyCollectionException \n    {\n        // Completed as part of Programming Project\n        if (isEmpty())\n            throw new EmptyCollectionException(\"LinkedBinarySearchTree\");\n\n        BinaryTreeNode&lt;T&gt; current = root;\n\n        while(current.getLeft() != null) {\n            current = current.getLeft();\n        }\n\n        return current.getElement();\n    }\n\n    /**\n     * Returns the element that matches targetElement in the binary search\n     * tree. It does not remove the node from the binary search tree. \n     * Throws an EmptyCollectionException if this tree is empty.\n     *\n     * @return the that matches targetElement\n     * @throws EmptyCollectionException if the tree is empty\n     */\n    public T find(T targetElement) throws EmptyCollectionException \n    {\n        // Completed as part of Programming Project\n        T result = null;\n\n        if (isEmpty())\n            throw new EmptyCollectionException(\"LinkedBinarySearchTree\");\n\n        BinaryTreeNode&lt;T&gt; resultNode = findNode(targetElement, root);\n\n        if (resultNode == null) {\n            throw new ElementNotFoundException(\"LinkedBinarySearchTree\");\n        }\n        else {\n            result = resultNode.getElement();\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns a reference to the specified target element if it is\n     * found in this tree.  \n     *\n     * @param targetElement the element being sought in the tree\n     * @param next the tree node to begin searching on\n     */\n    private BinaryTreeNode&lt;T&gt; findNode(T targetElement, BinaryTreeNode&lt;T&gt; next) \n    {\n        // To be completed as a Programming Project\n        BinaryTreeNode&lt;T&gt; result = null;\n        Comparable&lt;T&gt; comparableElement = (Comparable&lt;T&gt;)targetElement;\n\n        if (next == null) {\n            result = null;\n        }\n        else if (comparableElement.compareTo(next.getElement()) == 0) {\n            result = next;\n        }\n        else if (comparableElement.compareTo(next.getElement()) &lt; 0) {\n            result = findNode(targetElement, next.getLeft());\n        }\n        else {\n            result = findNode(targetElement, next.getRight());\n        }\n\n        return result;\n\n    }\n\n\n    /**\n     * Returns the element with the highest value in the binary\n     * search tree. It does not remove the node from the binary\n     * search tree. Throws an EmptyCollectionException if this \n     * tree is empty.\n     *\n     * @return the element with the highest value\n     * @throws EmptyCollectionException if the tree is empty\n     */\n    public T findMax() throws EmptyCollectionException \n    {\n        // Completed as part of Programming Project\n        if (isEmpty())\n            throw new EmptyCollectionException(\"LinkedBinarySearchTree\");\n\n        BinaryTreeNode&lt;T&gt; current = root;\n\n        while(current.getRight() != null) {\n            current = current.getRight();\n        }\n\n        return current.getElement();\n    }\n\n    /**\n     * Returns the left subtree of the root of this tree.\n     *\n     * @return a link to the left subtree of the tree\n     */\n    public LinkedBinarySearchTree&lt;T&gt; getLeft()\n    {\n        // Completed as part of Programming Project\n        if (isEmpty())\n            throw new EmptyCollectionException(\"LinkedBinarySearchTree\");    \n\n        LinkedBinarySearchTree&lt;T&gt; ret = new LinkedBinarySearchTree&lt;T&gt;();\n        ret.root = this.root.getLeft();\n        return ret;    \n    }\n\n    /**\n     * Returns the right subtree of the root of this tree.\n     *\n     * @return a link to the right subtree of the tree\n     */\n    public LinkedBinarySearchTree&lt;T&gt; getRight()\n    {\n        // Completed as part of Programming Project\n        if (isEmpty())\n            throw new EmptyCollectionException(\"LinkedBinarySearchTree\");    \n\n        LinkedBinarySearchTree&lt;T&gt; ret = new LinkedBinarySearchTree&lt;T&gt;();\n        ret.root = this.root.getRight();\n        return ret;    \n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/LinkedBinaryTree/","title":"LinkedBinaryTree.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\nimport java.util.*;\n\nimport videoexamples.module14.jsjf.exceptions.*;\n\n/**\n * LinkedBinaryTree implements the BinaryTreeADT interface.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class LinkedBinaryTree&lt;T&gt; implements BinaryTreeADT&lt;T&gt;, Iterable&lt;T&gt;\n{\n    protected BinaryTreeNode&lt;T&gt; root; \n    protected int modCount;\n\n    /**\n     * Creates an empty binary tree.\n     */\n    public LinkedBinaryTree() \n    {\n        root = null;\n    }\n\n    /**\n     * Creates a binary tree with the specified element as its root.\n     *\n     * @param element the element that will become the root of the binary tree\n     */\n    public LinkedBinaryTree(T element) \n    {\n        root = new BinaryTreeNode&lt;T&gt;(element);\n    }\n\n    /**\n     * Creates a binary tree with the specified element as its root and the \n     * given trees as its left child and right child\n     *\n     * @param element the element that will become the root of the binary tree\n     * @param left the left subtree of this tree\n     * @param right the right subtree of this tree\n     */\n    public LinkedBinaryTree(T element, LinkedBinaryTree&lt;T&gt; left, \n            LinkedBinaryTree&lt;T&gt; right) \n    {\n        root = new BinaryTreeNode&lt;T&gt;(element);\n        root.setLeft(left.root);\n        root.setRight(right.root);\n    }\n\n    /**\n     * Returns a reference to the element at the root\n     *\n     * @return a reference to the specified target\n     * @throws EmptyCollectionException if the tree is empty\n     */\n    public T getRootElement() throws EmptyCollectionException\n    {\n        if (root == null)\n            throw new EmptyCollectionException(\"LinkedBinaryTree\");\n\n        return (root.getElement());\n    }\n\n    /**\n     * Returns a reference to the node at the root\n     *\n     * @return a reference to the specified node\n     * @throws EmptyCollectionException if the tree is empty\n     */\n    protected BinaryTreeNode&lt;T&gt; getRootNode() throws EmptyCollectionException\n    {\n        if (root == null)\n            throw new EmptyCollectionException(\"LinkedBinaryTree\");\n\n        return (root);\n    }\n\n    /**\n     * Returns the left subtree of the root of this tree.\n     *\n     * @return a link to the left subtree of the tree\n     */\n    public LinkedBinaryTree&lt;T&gt; getLeft()\n    {\n        if (root == null)\n            throw new EmptyCollectionException(\"LinkedBinaryTree - getLeft() -\");\n\n        LinkedBinaryTree&lt;T&gt; result = new LinkedBinaryTree&lt;T&gt;();\n        result.root = root.getLeft();\n\n        return result;\n    }\n\n    /**\n     * Returns the right subtree of the root of this tree.\n     *\n     * @return a link to the right subtree of the tree\n     */\n    public LinkedBinaryTree&lt;T&gt; getRight()\n    {\n        if (root == null)\n            throw new EmptyCollectionException(\"LinkedBinaryTree - getRight() -\");\n\n        LinkedBinaryTree&lt;T&gt; result = new LinkedBinaryTree&lt;T&gt;();\n        result.root = root.getRight();\n\n        return result;\n    }\n\n    /**\n     * Returns true if this binary tree is empty and false otherwise.\n     *\n     * @return true if this binary tree is empty, false otherwise\n     */\n    public boolean isEmpty() \n    {\n        return (root == null);\n    }\n\n    /**\n     * Returns the integer size of this tree.\n     *\n     * @return the integer size of the tree\n     */\n    public int size() \n    {\n        if (root == null) {\n            return 0;\n        }\n\n        return root.numChildren() + 1;\n    }\n\n    /**\n     * Returns the height of this tree.\n     *\n     * @return the height of the tree\n     */\n    public int getHeight()\n    {\n        return height(root) - 1;\n    }\n\n    /**\n     * Returns the height of the specified node.\n     *\n     * @param node the node from which to calculate the height\n     * @return the height of the tree\n     */\n    private int height(BinaryTreeNode&lt;T&gt; node) \n    {\n        int result = 0;\n        if (node != null)\n            result = Math.max(height(node.getLeft()), height(node.getRight())) + 1;\n\n        return result;\n    }\n\n    /**\n     * Returns true if this tree contains an element that matches the\n     * specified target element and false otherwise.\n     *\n     * @param targetElement the element being sought in this tree\n     * @return true if the element in is this tree, false otherwise\n     */\n    public boolean contains(T targetElement) \n    {\n        T temp;\n        boolean found = false;\n\n        try \n        {\n            temp = find(targetElement);\n            found = true;\n        }\n        catch (Exception ElementNotFoundException) \n        {\n            found = false;\n        }\n\n        return found;\n    }\n\n    /**\n     * Returns a reference to the specified target element if it is\n     * found in this binary tree.  Throws a ElementNotFoundException if\n     * the specified target element is not found in the binary tree.\n     *\n     * @param targetElement the element being sought in this tree\n     * @return a reference to the specified target\n     * @throws ElementNotFoundException if the element is not in the tree\n     */\n    public T find(T targetElement) throws ElementNotFoundException\n    {\n        BinaryTreeNode&lt;T&gt; current = findNode(targetElement, root);\n\n        if (current == null)\n            throw new ElementNotFoundException(\"LinkedBinaryTree\");\n\n        return (current.getElement());\n    }\n\n    /**\n     * Returns a reference to the specified target element if it is\n     * found in this binary tree.\n     *\n     * @param targetElement the element being sought in this tree\n     * @param next the element to begin searching from\n     */\n    private BinaryTreeNode&lt;T&gt; findNode(T targetElement, \n            BinaryTreeNode&lt;T&gt; next)\n    {\n        if (next == null)\n            return null;\n\n        if (next.getElement().equals(targetElement))\n            return next;\n\n        BinaryTreeNode&lt;T&gt; temp = findNode(targetElement, next.getLeft());\n\n        if (temp == null)\n            temp = findNode(targetElement, next.getRight());\n\n        return temp;\n    }\n\n    /**\n     * Returns a string representation of this binary tree showing\n     * the nodes in an inorder fashion.\n     *\n     * @return a string representation of this binary tree\n     */\n    public String toString() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        inOrder(root, tempList);\n\n        String ret = \"\";\n\n        for (T element : tempList) {\n            ret += element.toString() + \" \";\n        }\n\n        return ret;\n    }\n\n    /**\n     * Returns an iterator over the elements in this tree using the \n     * iteratorInOrder method\n     *\n     * @return an in order iterator over this binary tree\n     */\n    public Iterator&lt;T&gt; iterator()\n    {\n        return iteratorInOrder();\n    }\n\n    /**\n     * Performs an inorder traversal on this binary tree by calling an\n     * overloaded, recursive inorder method that starts with\n     * the root.\n     *\n     * @return an in order iterator over this binary tree\n     */\n    public Iterator&lt;T&gt; iteratorInOrder()\n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        inOrder(root, tempList);\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Performs a recursive inorder traversal.\n     *\n     * @param node the node to be used as the root for this traversal\n     * @param tempList the temporary list for use in this traversal\n     */\n    protected void inOrder(BinaryTreeNode&lt;T&gt; node, \n            ArrayUnorderedList&lt;T&gt; tempList) \n    {\n        if (node != null)\n        {\n            inOrder(node.getLeft(), tempList);\n            tempList.addToRear(node.getElement());\n            inOrder(node.getRight(), tempList);\n        }\n    }\n\n    /**\n     * Performs an preorder traversal on this binary tree by calling \n     * an overloaded, recursive preorder method that starts with\n     * the root.\n     *\n     * @return a pre order iterator over this tree\n     */\n    public Iterator&lt;T&gt; iteratorPreOrder() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        preOrder(root, tempList);\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Performs a recursive preorder traversal.\n     *\n     * @param node the node to be used as the root for this traversal\n     * @param tempList the temporary list for use in this traversal\n     */\n    protected void preOrder(BinaryTreeNode&lt;T&gt; node, \n            ArrayUnorderedList&lt;T&gt; tempList) \n    {\n        if (node != null)\n        {\n            tempList.addToRear(node.getElement());\n            preOrder(node.getLeft(), tempList);\n            preOrder(node.getRight(), tempList);\n        }\n    }\n\n    /**\n     * Performs an postorder traversal on this binary tree by calling\n     * an overloaded, recursive postorder method that starts\n     * with the root.\n     *\n     * @return a post order iterator over this tree\n     */\n    public Iterator&lt;T&gt; iteratorPostOrder() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        postOrder(root, tempList);\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Performs a recursive postorder traversal.\n     *\n     * @param node the node to be used as the root for this traversal\n     * @param tempList the temporary list for use in this traversal\n     */\n    protected void postOrder(BinaryTreeNode&lt;T&gt; node, \n            ArrayUnorderedList&lt;T&gt; tempList) \n    {\n        if (node != null)\n        {\n            postOrder(node.getLeft(), tempList);\n            postOrder(node.getRight(), tempList);\n            tempList.addToRear(node.getElement());\n        }\n    }\n\n    /**\n     * Performs a levelorder traversal on this binary tree, using a\n     * templist.\n     *\n     * @return a levelorder iterator over this binary tree\n     */\n    public Iterator&lt;T&gt; iteratorLevelOrder() \n    {\n        ArrayUnorderedList&lt;BinaryTreeNode&lt;T&gt;&gt; nodes = \n                new ArrayUnorderedList&lt;BinaryTreeNode&lt;T&gt;&gt;();\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        BinaryTreeNode&lt;T&gt; current;\n\n        nodes.addToRear(root);\n\n        while (!nodes.isEmpty()) \n        {\n            current = nodes.removeFirst();\n\n            if (current != null)\n            {\n                tempList.addToRear(current.getElement());\n                if (current.getLeft() != null)\n                    nodes.addToRear(current.getLeft());\n                if (current.getRight() != null)\n                    nodes.addToRear(current.getRight());\n            }\n            else\n                tempList.addToRear(null);\n        }\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Returns a recursive string representation of a tree\n     */\n    public String printTree() {\n        LinkedBinaryTree&lt;T&gt; theRoot = new LinkedBinaryTree&lt;T&gt;();\n        theRoot.root = root;\n        return returnRecursiveString(theRoot);\n    }\n\n    /**\n     * Returns a recursive string representation of a tree\n     */\n    private String returnRecursiveString(LinkedBinaryTree&lt;T&gt; curr) {\n        String ret = \"\";\n        if (!(curr.isEmpty())) {\n            ret = \"(\";\n            if (curr.getLeft() != null) {\n                ret += returnRecursiveString(curr.getLeft()) + \" \";\n            }\n            ret += curr.getRootElement();\n            if (curr.getRight() != null) {\n                ret += \" \" + returnRecursiveString(curr.getRight());\n            }\n            ret += \")\";\n        }   \n        return ret;\n    }\n\n    /**\n     * Inner class to represent an iterator over the elements of this tree\n     */\n    private class TreeIterator implements Iterator&lt;T&gt;\n    {\n        private int expectedModCount;\n        private Iterator&lt;T&gt; iter;\n\n        /**\n         * Sets up this iterator using the specified iterator.\n         *\n         * @param iter the list iterator created by a tree traversal\n         */\n        public TreeIterator(Iterator&lt;T&gt; iter)\n        {\n            this.iter = iter;\n            expectedModCount = modCount;\n        }\n\n        /**\n         * Returns true if this iterator has at least one more element\n         * to deliver in the iteration.\n         *\n         * @return  true if this iterator has at least one more element to deliver\n         *          in the iteration\n         * @throws  ConcurrentModificationException if the collection has changed\n         *          while the iterator is in use\n         */\n        public boolean hasNext() throws ConcurrentModificationException\n        {\n            if (!(modCount == expectedModCount))\n                throw new ConcurrentModificationException();\n\n            return (iter.hasNext());\n        }\n\n        /**\n         * Returns the next element in the iteration. If there are no\n         * more elements in this iteration, a NoSuchElementException is\n         * thrown.\n         *\n         * @return the next element in the iteration\n         * @throws NoSuchElementException if the iterator is empty\n         */\n        public T next() throws NoSuchElementException\n        {\n            if (hasNext())\n                return (iter.next());\n            else \n                throw new NoSuchElementException();\n        }\n\n        /**\n         * The remove operation is not supported.\n         * \n         * @throws UnsupportedOperationException if the remove operation is called\n         */\n        public void remove()\n        {\n            throw new UnsupportedOperationException();\n        }\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/LinkedHeap/","title":"LinkedHeap.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\nimport videoexamples.module14.jsjf.exceptions.*;\n\n/**\n * LinkedHeap implements a heap.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class LinkedHeap&lt;T&gt; extends LinkedBinaryTree&lt;T&gt; implements HeapADT&lt;T&gt; \n{\n    public HeapNode&lt;T&gt; lastNode;  \n\n    public LinkedHeap() \n    {\n        super();\n    }\n\n    /**\n     * Adds the specified element to this heap in the appropriate\n     * position according to its key value. \n     *\n     * @param obj the element to be added to the heap\n     */\n    public void addElement(T obj) \n    {\n        HeapNode&lt;T&gt; node = new HeapNode&lt;T&gt;(obj);\n\n        if (root == null)\n            root=node;\n        else\n        {\n            HeapNode&lt;T&gt; nextParent = getNextParentAdd(); // keep heap structure\n            // Determine which child\n            if (nextParent.getLeft() == null)  // no children\n                nextParent.setLeft(node);\n            else                               // one child - the left node\n                nextParent.setRight(node);\n\n            node.setParent(nextParent);\n        }\n        lastNode = node;\n        modCount++;\n\n        if (size() &gt; 1)\n            heapifyAdd();  // keep the heap ordering\n    }\n\n    /**\n     * Returns the node that will be the parent of the new node\n     *\n     * @return the node that will be the parent of the new node\n     */\n    private HeapNode&lt;T&gt; getNextParentAdd()\n    {\n        HeapNode&lt;T&gt; result = lastNode;\n\n        // Get to the left sub-tree or the root\n        while ((result != root) &amp;&amp; (result.getParent().getLeft() != result))\n            result = result.getParent();\n\n        if (result != root)\n            // Go to the parent's right subtree\n            if (result.getParent().getRight() == null)\n                // Parent has no right child, so parent is the new parent\n                result = result.getParent();\n            else\n            {\n                // Get parent's right child\n                result = (HeapNode&lt;T&gt;)result.getParent().getRight();\n                // Go all the way to the left\n                while (result.getLeft() != null)\n                    result = (HeapNode&lt;T&gt;)result.getLeft();\n            }\n        else\n            // Tree is full so go all the way to the left (start a new row of leaves)\n            while (result.getLeft() != null)\n                result = (HeapNode&lt;T&gt;)result.getLeft();\n\n        return result;\n    }\n\n    /**\n     * Reorders this heap after adding a node.\n     */\n    private void heapifyAdd()\n    {\n        T temp;\n        HeapNode&lt;T&gt; next = lastNode;\n\n        temp = next.getElement();\n\n        while ((next != root) &amp;&amp; \n                (((Comparable&lt;T&gt;)temp).compareTo(next.getParent().getElement()) &lt; 0))\n        {\n            next.setElement(next.getParent().getElement());\n            next = next.parent;\n        }\n        next.setElement(temp);\n    }\n\n    /**\n     * Remove the element with the lowest value in this heap and\n     * returns a reference to it. Throws an EmptyCollectionException \n     * if the heap is empty.\n     *\n     * @return the element with the lowest value in this heap\n     * @throws EmptyCollectionException if the heap is empty\n     */\n    public T removeMin() throws EmptyCollectionException \n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"LinkedHeap\");\n\n        T minElement =  root.getElement();\n\n        // If the size is 1 the heap will be empty\n        if (size() == 1)\n        {\n            root = null;\n            lastNode = null;\n        }\n        else\n        {\n            // Get the new last node\n            HeapNode&lt;T&gt; newLast = getNewLastNode();\n\n            // Check which child the old last node is &amp; set to null\n            if (lastNode.getParent().getLeft() == lastNode)\n                lastNode.getParent().setLeft(null);\n            else\n                lastNode.getParent().setRight(null);\n\n            ((HeapNode&lt;T&gt;)root).setElement(lastNode.getElement());\n            lastNode = newLast;\n            heapifyRemove();\n        }\n        modCount++;\n        return minElement;\n    }\n\n    /**\n     * Reorders this heap after removing the root element.\n     */\n    private void heapifyRemove()\n    {\n        T temp;\n        HeapNode&lt;T&gt; node = (HeapNode&lt;T&gt;)root;\n        HeapNode&lt;T&gt; left = (HeapNode&lt;T&gt;)node.getLeft();\n        HeapNode&lt;T&gt; right = (HeapNode&lt;T&gt;)node.getRight();\n        HeapNode&lt;T&gt; next;\n\n\n        if ((left == null) &amp;&amp; (right == null))\n            // no children\n            next = null;\n        else if (right == null)\n            // one child\n            next = left;\n        else if (((Comparable&lt;T&gt;)left.getElement()).compareTo(right.getElement()) &lt; 0)\n            // two children, left is smaller\n            next = left;\n        else\n            // two children, right is smaller\n            next = right;\n\n        temp = node.getElement();\n        while ((next != null) &amp;&amp; \n                (((Comparable&lt;T&gt;)next.getElement()).compareTo(temp) &lt; 0))\n        {\n            node.setElement(next.getElement());\n            node = next;\n            left = (HeapNode&lt;T&gt;)node.getLeft();\n            right = (HeapNode&lt;T&gt;)node.getRight();\n\n            if ((left == null) &amp;&amp; (right == null))\n                next = null;\n            else if (right == null)\n                next = left;\n            else if (((Comparable&lt;T&gt;)left.getElement()).compareTo(right.getElement()) &lt; 0)\n                next = left;\n            else\n                next = right;\n        }\n        node.setElement(temp);\n    }\n\n    /**\n     * Returns the node that will be the new last node after a remove.\n     *\n     * @return the node that will be the new last node after a remove\n     */\n    private HeapNode&lt;T&gt; getNewLastNode()\n    {\n        HeapNode&lt;T&gt; newLastNode = lastNode;\n\n\n        while ((newLastNode != root) &amp;&amp; (newLastNode.getParent().getLeft() == newLastNode))\n            newLastNode = newLastNode.getParent();\n\n        if (newLastNode != root)\n            newLastNode = (HeapNode&lt;T&gt;)newLastNode.getParent().getLeft();\n\n        while (newLastNode.getRight() != null)\n            newLastNode = (HeapNode&lt;T&gt;)newLastNode.getRight();\n\n        return newLastNode;\n    }\n\n    /**\n     * Returns the element with the lowest value in this heap.\n     * Throws an EmptyCollectionException if the heap is empty.\n     *\n     * @return the element with the lowest value in this heap\n     * @throws EmptyCollectionException if the heap is empty\n     */\n    public T findMin() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"LinkedHeap\");\n\n        return root.getElement();\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/ListADT/","title":"ListADT.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\nimport java.util.Iterator;\n\n/**\n * ListADT defines the interface to a general list collection. Specific\n * types of lists will extend this interface to complete the\n * set of necessary operations.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface ListADT&lt;T&gt; extends Iterable&lt;T&gt;\n{\n    /**  \n     * Removes and returns the first element from this list. \n     * \n     * @return the first element from this list\n     */\n    public T removeFirst();\n\n    /**  \n     * Removes and returns the last element from this list. \n     *\n     * @return the last element from this list\n     */\n    public T removeLast();\n\n    /**  \n     * Removes and returns the specified element from this list. \n     *\n     * @param element the element to be removed from the list\n     */\n    public T remove(T element);\n\n    /**  \n     * Returns a reference to the first element in this list. \n     *\n     * @return a reference to the first element in this list\n     */\n    public T first();\n\n    /**  \n     * Returns a reference to the last element in this list. \n     *\n     * @return a reference to the last element in this list\n     */\n    public T last();\n\n    /**  \n     * Returns true if this list contains the specified target element. \n     *\n     * @param target the target that is being sought in the list\n     * @return true if the list contains this element\n     */\n    public boolean contains(T target);\n\n    /**  \n     * Returns true if this list contains no elements. \n     *\n     * @return true if this list contains no elements\n     */\n    public boolean isEmpty();\n\n    /**  \n     * Returns the number of elements in this list. \n     *\n     * @return the integer representation of number of elements in this list\n     */\n    public int size();\n\n    /**  \n     * Returns an iterator for the elements in this list. \n     *\n     * @return an iterator over the elements in this list\n     */\n    public Iterator&lt;T&gt; iterator();\n\n    /**  \n     * Returns a string representation of this list. \n     *\n     * @return a string representation of this list\n     */\n    public String toString();\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/UnorderedListADT/","title":"UnorderedListADT.java","text":"<pre><code>package videoexamples.module14.jsjf;\n\n/**\n * UnorderedListADT defines the interface to an unordered list collection. \n * Elements are stored in any order the user desires.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface UnorderedListADT&lt;T&gt; extends ListADT&lt;T&gt;\n{\n    /**  \n     * Adds the specified element to the front of this list. \n     *\n     * @param element the element to be added to the front of this list    \n     */\n    public void addToFront(T element);  \n\n    /**  \n     * Adds the specified element to the rear of this list. \n     *\n     * @param element the element to be added to the rear of this list    \n     */\n    public void addToRear(T element); \n\n    /**  \n     * Adds the specified element after the specified target. \n     *\n     * @param element the element to be added after the target\n     * @param target  the target is the item that the element will be added\n     *                after    \n     */\n    public void addAfter(T element, T target);\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/exceptions/","title":"Heaps - /jsjf/exceptions/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-14/code/jsjf/exceptions/#jsjfexceptions","title":"/jsjf/exceptions","text":"<ul> <li>ElementNotFoundException.java</li> <li>EmptyCollectionException.java</li> <li>NonComparableElementException.java</li> </ul>","boost":1},{"location":"csc205/module-14/code/jsjf/exceptions/ElementNotFoundException/","title":"ElementNotFoundException.java","text":"<pre><code>package videoexamples.module14.jsjf.exceptions;\n\n/**\n * ElementNotFoundException represents the situation in which a target element \n * is not present in a collection\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class ElementNotFoundException extends RuntimeException\n{\n    /**\n     * Sets up this exception with an appropriate message.\n     */\n    public ElementNotFoundException (String collection)\n    {\n        super (\"The target element is not in this \" + collection);\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/exceptions/EmptyCollectionException/","title":"EmptyCollectionException.java","text":"<pre><code>package videoexamples.module14.jsjf.exceptions;\n\n/**\n * Represents the situation in which a collection is empty.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class EmptyCollectionException extends RuntimeException\n{\n    /**\n     * Sets up this exception with an appropriate message.\n     * @param collection the name of the collection\n     */\n    public EmptyCollectionException (String collection)\n    {\n        super (\"The \" + collection + \" is empty.\");\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/jsjf/exceptions/NonComparableElementException/","title":"NonComparableElementException.java","text":"<pre><code>package videoexamples.module14.jsjf.exceptions;\n\n/**\n * NonComparableElementException  represents the situation in which an attempt \n * is made to add an element that is not comparable to an ordered collection\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class NonComparableElementException extends RuntimeException\n{\n    /**\n     * Sets up this exception with an appropriate message.\n     * \n     * @param collection  the exception message to deliver\n     */\n    public NonComparableElementException (String collection)\n    {\n        super (\"The \" + collection + \" requires Comparable elements.\");\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/priorityqueue/","title":"Heaps - /priorityqueue/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-14/code/priorityqueue/#priorityqueue","title":"/priorityqueue/","text":"<ul> <li>PQTester.java</li> <li>PrioritizedObject.java</li> <li>PriorityQueue.java</li> </ul>","boost":1},{"location":"csc205/module-14/code/priorityqueue/PQTester/","title":"PQTester.java","text":"<pre><code>package videoexamples.module14.priorityqueue;\n/** \n * Tests a priority queue.\n * \n * @author Java Foundations\n */\npublic class PQTester\n{\n    public static void main(String[] args)\n    {\n        PriorityQueue&lt;String&gt; pq = new PriorityQueue&lt;String&gt;();\n\n        pq.addElement(\"first\", 1);\n        pq.addElement(\"bbb\", 200);\n        pq.addElement(\"third\", 50);\n        pq.addElement(\"fifth\", 92);\n        pq.addElement(\"second\", 10);\n        pq.addElement(\"fourth\", 55);\n        pq.addElement(\"aaa\", 200);\n        pq.addElement(\"this one should be first\", 0);\n\n        while (!pq.isEmpty())\n        {\n            System.out.println(pq.removeNext());\n        }\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/priorityqueue/PrioritizedObject/","title":"PrioritizedObject.java","text":"<pre><code>package videoexamples.module14.priorityqueue;\n/**\n * PrioritizedObject represents a node in a priority queue containing a\n * comparable object, arrival order, and a priority value.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class PrioritizedObject&lt;T&gt; implements Comparable&lt;PrioritizedObject&lt;T&gt;&gt;\n{\n    private static int nextOrder = 0;\n    private int priority;\n    private int arrivalOrder;\n    private T element;\n\n    /**\n     * Creates a new PrioritizedObject with the specified data.\n     *\n     * @param element the element of the new priority queue node\n     * @param priority the priority of the new queue node\n     */\n    public PrioritizedObject(T element, int priority) \n    {\n        this.element = element;\n        this.priority = priority;\n        arrivalOrder = nextOrder;\n        nextOrder++;\n    }\n\n    /**\n     * Returns the element in this node.\n     *\n     * @return the element contained within the node\n     */\n    public T getElement() \n    {\n        return element;\n    }\n\n    /**\n     * Returns the priority value for this node.\n     *\n     * @return the integer priority for this node\n     */\n    public int getPriority() \n    {\n        return priority;\n    }\n\n    /**\n     * Returns the arrival order for this node.\n     *\n     * @return the integer arrival order for this node\n     */\n    public int getArrivalOrder() \n    {\n        return arrivalOrder;\n    }\n\n    /**\n     * Returns a string representation for this node.\n     *\n     */\n    public String toString() \n    {\n        return (element + \"  \" + priority + \"  \" + arrivalOrder);\n    }\n\n    /**\n     * Returns 1 if the this object has higher priority than \n     * the given object and -1 otherwise.\n     *\n     * @param obj the object to compare to this node\n     * @return the result of the comparison of the given object and \n     *         this one\n     */\n    public int compareTo(PrioritizedObject&lt;T&gt; obj) \n    {\n        int result;\n\n        // Give preference to PrioritizedObject with higher priority\n        if (priority &gt; obj.getPriority())\n            result = 1;\n        else if (priority &lt; obj.getPriority())\n            result = -1;\n        // If the priorities are equal, first come first served \n        else if (arrivalOrder &gt; obj.getArrivalOrder())\n            result = 1;\n        else\n            result = -1;\n\n        return result;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/code/priorityqueue/PriorityQueue/","title":"PriorityQueue.java","text":"<pre><code>package videoexamples.module14.priorityqueue;\nimport videoexamples.module14.jsjf.*;\n\n/**\n * PriorityQueue implements a priority queue using a heap.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class PriorityQueue&lt;T&gt;\n{\n\n    ArrayHeap&lt;PrioritizedObject&lt;T&gt;&gt; pqueue = new ArrayHeap&lt;PrioritizedObject&lt;T&gt;&gt;();\n\n    /**\n     * Creates an empty priority queue.\n     */\n    public PriorityQueue() \n    {   \n    }\n\n    /**\n     * Adds the given element to this PriorityQueue.\n     *\n     * @param object the element to be added to the priority queue\n     * @param priority the integer priority of the element to be added\n     */\n    public void addElement(T object, int priority) \n    {\n        PrioritizedObject&lt;T&gt; obj = new PrioritizedObject&lt;T&gt;(object, priority);\n        pqueue.addElement(obj);\n    }\n\n    /**\n     * Removes the next highest priority element from this priority \n     * queue and returns a reference to it.\n     *\n     * @return a reference to the next highest priority element in this queue\n     */\n    public T removeNext() \n    {\n        PrioritizedObject&lt;T&gt; obj = (PrioritizedObject&lt;T&gt;)pqueue.removeMin();\n        return obj.getElement();\n    }\n\n    public int size( ) {\n        return pqueue.size();\n    }\n\n    public boolean isEmpty() {\n        return pqueue.isEmpty();\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/","title":"Heaps - Project 9 - Index","text":"","boost":1},{"location":"csc205/module-14/project9heaps/#heaps-programming-project-9","title":"Heaps - Programming Project 9","text":"","boost":1},{"location":"csc205/module-14/project9heaps/#_1","title":"/","text":"<ul> <li>Heaps - Programming Project 9 Requirements Document</li> <li>Project9TestDriver.java</li> <li>HeapDriver.java</li> </ul>","boost":1},{"location":"csc205/module-14/project9heaps/#csc205","title":"/csc205/","text":"<ul> <li>Sorting.java</li> </ul>","boost":1},{"location":"csc205/module-14/project9heaps/#jsjf","title":"/jsjf/","text":"<ul> <li>ArrayBinaryTree.java</li> <li>ArrayHeap.java</li> <li>ArrayList.java</li> <li>ArrayUnorderedList.java</li> <li>BinaryTreeADT.java</li> <li>BinaryTreeNode.java</li> <li>HeapADT.java</li> <li>HeapNode.java</li> <li>HeapQueue.java</li> <li>HeapStack.java</li> <li>LinkedBinaryTree.java</li> <li>LinkedHeap.java</li> <li>ListADT.java</li> <li>QueueADT.java</li> <li>StackADT.java</li> <li>UnorderedListADT.java</li> </ul>","boost":1},{"location":"csc205/module-14/project9heaps/#jsjfexceptions","title":"/jsjf/exceptions/","text":"<ul> <li>ElementNotFoundException.java</li> <li>EmptyCollectionException.java</li> <li>NonComparableElementException.java</li> </ul>","boost":1},{"location":"csc205/module-14/project9heaps/HeapDriver/","title":"HeapDriver.java","text":"<pre><code>public class HeapDriver {\n\n    // TODO\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/Project9TestDriver/","title":"Project9TestDriver.java","text":"<pre><code>package projects.project9heaps;\n\nimport projects.project9heaps.jsjf.HeapQueue;\nimport projects.project9heaps.jsjf.HeapStack;\nimport projects.project9heaps.csc205.Sorting;\nimport java.util.Arrays;\nimport java.util.Random;\n\npublic class Project9TestDriver {\n\n    public static void main (String args[]) {\n        HeapStack&lt;Integer&gt; hstack = new HeapStack&lt;Integer&gt;();\n        HeapQueue&lt;Integer&gt; hqueue = new HeapQueue&lt;Integer&gt;();\n        Integer numbers[] = new Integer[10];\n        Random rand = new Random();\n\n        System.out.println(\"Project 9 test driver\");\n\n        for(int ii=0;ii&lt;10;ii++) {\n            int nextNum = rand.nextInt(20) + 1;\n            hstack.push(nextNum);\n            hqueue.enqueue(nextNum);\n            numbers[ii] = nextNum;\n        }\n\n        System.out.println(\"Test array: \" + Arrays.asList(numbers));\n        System.out.println(\"    Top of HeapStack : \" + hstack.peek());\n        System.out.println(\"    Front of HeapQueue : \" + hqueue.first());\n\n        System.out.print(\"    HeapStack of \" + hstack.size() + \": \");\n        while(hstack.size() &gt; 0) {\n            System.out.print(hstack.pop() + \" \");\n        }\n        System.out.println();\n\n        System.out.print(\"    HeapQueue of \" + hqueue.size() + \": \");\n        while(hqueue.size() &gt; 0) {\n            System.out.print(hqueue.dequeue() + \" \");\n        }\n        System.out.println(\"\\n\");\n\n        System.out.println(\"Smallest N of \" + Arrays.asList(numbers));\n        System.out.println(\"    First 1: \" + Sorting.smallest_n(numbers, 1));\n        System.out.println(\"    First 4: \" + Sorting.smallest_n(numbers, 4));\n        System.out.println(\"    First 8: \" + Sorting.smallest_n(numbers, 8));\n\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/csc205-module-14-project-9-heaps-starter-code-class-diagram/","title":"CSC205 - Project 9 Starter Code - Heaps - Class Diagram","text":"<pre><code>classDiagram\n\n    %% Interfaces\n    class BinaryTreeADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +getRootElement() T\n        +isEmpty() boolean\n        +size() int\n        +contains(T) boolean\n        +find(T) T\n    }\n\n    class HeapADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +addElement(T) void\n        +removeMin() T\n        +findMin() T\n    }\n\n    class ListADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +removeFirst() T\n        +removeLast() T\n        +first() T\n        +last() T\n    }\n\n    class UnorderedListADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +addToFront(T) void\n        +addToRear(T) void\n        +addAfter(T,T) void\n    }\n\n    class QueueADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +enqueue(T) void\n        +dequeue() T\n        +first() T\n    }\n\n    class StackADT~T~ {\n        &lt;&lt;interface&gt;&gt;\n        +push(T) void\n        +pop() T\n        +peek() T\n    }\n\n    %% Base Classes\n    class BinaryTreeNode~T~ {\n        #element: T\n        #left: BinaryTreeNode~T~\n        #right: BinaryTreeNode~T~\n    }\n\n    class HeapNode~T~ {\n        #parent: HeapNode~T~\n    }\n\n    class ArrayBinaryTree~T~ {\n        #count: int\n        #tree: T[]\n        #modCount: int\n    }\n\n    class ArrayList~T~ {\n        -rear: int\n        #list: T[]\n        #modCount: int\n    }\n\n    %% Implementation Classes\n    class ArrayHeap~T~\n    class ArrayUnorderedList~T~\n    class LinkedBinaryTree~T~\n    class LinkedHeap~T~\n    class HeapQueue~T~\n    class HeapStack~T~\n\n    %% Exceptions\n    class ElementNotFoundException {\n        +ElementNotFoundException(String)\n    }\n\n    class EmptyCollectionException {\n        +EmptyCollectionException(String)\n    }\n\n    class NonComparableElementException {\n        +NonComparableElementException(String)\n    }\n\n    %% Relationships\n    BinaryTreeADT &lt;|-- HeapADT\n    ListADT &lt;|-- UnorderedListADT\n\n    BinaryTreeNode &lt;|-- HeapNode\n\n    BinaryTreeADT &lt;|.. ArrayBinaryTree\n    BinaryTreeADT &lt;|.. LinkedBinaryTree\n\n    ArrayBinaryTree &lt;|-- ArrayHeap\n    HeapADT &lt;|.. ArrayHeap\n\n    LinkedBinaryTree &lt;|-- LinkedHeap\n    HeapADT &lt;|.. LinkedHeap\n\n    ListADT &lt;|.. ArrayList\n    ArrayList &lt;|-- ArrayUnorderedList\n    UnorderedListADT &lt;|.. ArrayUnorderedList\n\n    QueueADT &lt;|.. HeapQueue\n    StackADT &lt;|.. HeapStack</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/project-9-readme/","title":"Heaps - Programming Project 9","text":"","boost":1},{"location":"csc205/module-14/project9heaps/project-9-readme/#programming-project-heaps","title":"Programming Project \u2013 Heaps","text":"<p>Submit this completed document along with a .zip of your entire project. You must use the <code>LinkedHeap</code> class in the <code>jsjf</code> package to implement parts 1-3. The driver should use the classes you created. Carefully consider your implementation \u2013 use the properties of heaps to make your code more efficient.</p> <ol> <li>(30%) Create a class in the <code>jsjf</code> package called <code>HeapStack</code> that implements the <code>StackADT</code> interface from earlier this semester using the LinkedHeap implementation from the Java Foundations book. Keep in mind that a stack is a LIFO structure. Thus, the comparison in the heap will have to be according to order entry into the stack. You must use a heap to implement the <code>StackADT</code> interface.</li> <li>(20%) Create a class in the <code>jsjf</code> package called <code>HeapQueue</code> that implements the <code>QueueADT</code> interface from earlier this semester using the LinkedHeap implementation from the Java Foundations book. You must use a heap to implement the <code>QueueADT</code> interface.</li> <li>(30%) Create a method in the <code>Sorting</code> class called <code>smallestN</code> that takes an array of <code>Comparable</code> objects and an integer as parameters and returns an <code>ArrayList</code> with the smallest N elements in the array. You must use a heap (not a sort) to implement this method to to receive credit.</li> <li>(20%) Create a new driver class called <code>HeapDriver.java</code> to test your implementation. Your driver should do the following:     a. Create an array of String objects that contains the words of the sentence \"This is my heaps project for CSC205\".     b. Print the smallest 4 elements of the array (using your smallestN method)     c. Create the following data structures:<ul> <li>a min heap</li> <li>a HeapStack</li> <li>a HeapQueue and add the contents of the Comparable array you created in part A to each of them. (Note that this will test that your smallestN method does not change the input array!) d. Remove all the words from each data structure in part c, printing them on a single line in the order they are removed.</li> </ul> </li> </ol> <p>You should reuse or modify the example methods from the course code examples where appropriate. Do not use any Java library methods. Unnecessarily duplicating existing code or failing to use the properties of heaps to make your code more efficient will result in a grade of 0 for that method. Feel free to implement helper methods or additional classes where appropriate, but if you do so include those methods/classes in your submission. A minimum of 10 points will be deducted for any missing/incorrect submission information. Be prepared to discuss your project in class following the due date.</p> <p>Briefly describe your implementation &amp; any issues you ran into (if any) in the box below:</p> <p>Paste the output of your driver from part 4 without formatting in the box below:</p> <p>For the following, if you implemented a method with multiple methods, include all the methods you wrote that are called by that method. Paste your entire HeapStack class without formatting in the box below:</p> <p>Paste your enqueue method without formatting in the box below:</p> <p>Paste your dequeue method without formatting in the box below:</p> <p>Paste your smallestN method without formatting in the box below:</p> <p>Paste your driver class without formatting in the box below:</p>","boost":1},{"location":"csc205/module-14/project9heaps/csc205/","title":"Heaps - /csc205/ Project 9 - Index","text":"<ul> <li>Sorting.java</li> </ul>","boost":1},{"location":"csc205/module-14/project9heaps/csc205/Sorting/","title":"Sorting.java","text":"<pre><code>// The methods in this package are adapted from the code provided with:\n//   Java Foundations (2nd &amp; 3rd ed) by  Lewis, DePasquale, &amp; Chase\n//   Algorithms (4th ed) by Sedgewick &amp; Wayne\n\npackage projects.project9heaps.csc205;\n\nimport java.util.ArrayList;\nimport projects.project9heaps.jsjf.ArrayHeap;\n\npublic class Sorting {\n\n    // Helper methods\n    // These operations will occur multiple times in our sorting methods,\n    //   so we add methods for them here\n\n    private static &lt;T extends Comparable&lt;T&gt;&gt; boolean less_than(T a, T b) {\n        return (a.compareTo(b) &lt; 0);\n    }\n    private static &lt;T extends Comparable&lt;T&gt;&gt; boolean less_than_equal(T a, T b) {\n        return (a.compareTo(b) &lt;= 0);\n    }\n    private static &lt;T extends Comparable&lt;T&gt;&gt; boolean greater_than(T a, T b) {\n        return (a.compareTo(b) &gt; 0);\n    }\n    private static void swap(Object[] a, int ii, int jj) {\n        Object swap = a[ii];\n        a[ii] = a[jj];\n        a[jj] = swap;\n    }\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    boolean isSorted(T[]data){\n        return isSorted(data, 0, data.length-1);\n    }\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    boolean isSorted(T[]data, int min, int max){\n        for (int ii=min+1; ii&lt;=max; ii++) {\n            if (less_than(data[ii], data[ii-1]))\n                return false;\n        }\n        return true;\n    }\n\n    // Selection Sort\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n        void selectionSort (T[] data) {\n        selectionSort (data, 0, data.length-1);\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n        void selectionSort (T[] data, int min, int max) {\n\n        int indexOfSmallest;  // Smallest element found this pass\n\n        min = Math.max(min, 0);\n        max = Math.min(max, data.length-1);\n\n        // ii is the starting point for each pass\n        for(int ii=min; ii &lt;= max; ii++ ) {\n            indexOfSmallest = ii;\n            for (int scan=ii+1; scan&lt;=max; scan++) {\n                if (less_than(data[scan], data[indexOfSmallest])) {\n                    indexOfSmallest = scan;\n                }\n            }\n            swap(data, indexOfSmallest, ii);\n        }\n\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    void insertionSort(T[] data) {\n        insertionSort(data, 0, data.length-1);\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    void insertionSort(T[] data, int min, int max)\n    {\n        int start = Math.max(min,  1);\n        int end = Math.min(max,  data.length-1);\n\n        for (int index = start; index &lt;= end; index++)\n        {\n            int position = index;\n\n            // shift larger values to the right \n            while (position &gt; 0 &amp;&amp; greater_than(data[position-1],data[position]))\n            {\n                swap(data, position, position-1);\n                position--;\n            }\n        }\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    void bubbleSort(T[] data) {\n        bubbleSort(data, 0, data.length-1);\n    }\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    void bubbleSort(T[] data, int min, int max) {\n        int position, scan;\n\n        min = Math.max(min, 0);\n        max = Math.min(max, data.length-1);\n\n        // position is the \"stopping point\" for each pass\n        for (position = max; position &gt;= min; position--)\n        {\n            for (scan = 0; scan &lt; position; scan++)\n            {\n                if (greater_than(data[scan],data[scan+1]))\n                    swap(data, scan, scan + 1);\n            }\n        }\n    }\n\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt;\n    void mergeSort(T[] data) {\n        mergeSort(data, 0, data.length-1);\n    }\n\n    private static &lt;T extends Comparable&lt;T&gt;&gt;\n    void mergeSort(T[] data, int min, int max) {\n        if (min &lt; max)\n        {\n            int mid = min + ((max - min) / 2);\n            mergeSort(data, min, mid);\n            mergeSort(data, mid+1, max);\n            merge(data, min, mid, max);\n        }\n    }\n\n    private static &lt;T extends Comparable&lt;T&gt;&gt;\n    void merge(T[] data, int first, int mid, int last) {\n        T[] temp = (T[])(new Comparable[data.length]);  // temp array\n\n        // The two subarrays have already been sorted\n        int first1 = first, last1 = mid;   // endpoints of first subarray\n        int first2 = mid+1, last2 = last;  // endpoints of second subarray\n        int index = first1;  // next index open in temp array\n\n        //  Copy smaller item from each subarray into temp until one\n        //  of the subarrays is exhausted\n        // while both sub arrays have items left\n        while (first1 &lt;= last1 &amp;&amp; first2 &lt;= last2)\n        {\n            if (less_than(data[first1],data[first2]))\n            {\n                temp[index] = data[first1];\n                first1++;\n            }\n            else\n            {\n                temp[index] = data[first2];\n                first2++;\n            }\n            index++;\n        }\n\n        // Only one of the while loops below will execute\n        //  Copy remaining elements from first subarray, if any\n        while (first1 &lt;= last1)\n        {\n            temp[index] = data[first1];\n            first1++;\n            index++;\n        }\n\n        //  Copy remaining elements from second subarray, if any\n        while (first2 &lt;= last2)\n        {\n            temp[index] = data[first2];\n            first2++;\n            index++;\n        }\n\n        //  Copy merged data into original array\n        for (index = first; index &lt;= last; index++)\n            data[index] = temp[index];\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    void quickSort(T[] data) {\n        quickSort(data, 0, data.length-1);\n    }\n\n    private static &lt;T extends Comparable&lt;T&gt;&gt; \n    void quickSort(T[] data, int min, int max) {\n        if (min &lt; max)\n        {\n            // create partitions\n            int indexofpartition = partition(data, min, max);\n\n            // sort the left partition (lower values)\n            quickSort(data, min, indexofpartition - 1);\n\n            // sort the right partition (higher values)\n            quickSort(data, indexofpartition + 1, max);\n        }\n    }\n\n    private static &lt;T extends Comparable&lt;T&gt;&gt; \n    int partition(T[] data, int min, int max) {\n        T partitionelement;\n        int left, right;\n        int middle = min + ((max - min) / 2);\n\n        // use the middle data value as the partition element\n        partitionelement = data[middle];\n        // move it out of the way for now\n        swap(data, middle, min);\n\n        left = min;\n        right = max;\n\n        while (left &lt; right)\n        {\n            // search for an element that is &gt; the partition element\n            while (left &lt; right &amp;&amp; less_than_equal(data[left],partitionelement))\n                left++;\n\n            // search for an element that is &lt; the partition element\n            while (greater_than(data[right], partitionelement))\n                right--;\n\n            // swap the elements\n            if (left &lt; right)\n                swap(data, left, right);\n        }\n\n        // move the partition element into place\n        swap(data, min, right);\n\n        return right;\n    }\n\n    // Project 8 - Complete the following method\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    void bstSort(T[] data) {\n        // Project 8\n    }\n\n    public static &lt;T&gt; void heapSort(T[] data) \n    {\n        ArrayHeap&lt;T&gt; heap = new ArrayHeap&lt;T&gt;();\n\n        // copy the array into a heap \n        for (int i = 0; i &lt; data.length; i++)\n            heap.addElement(data[i]);\n\n        // place the sorted elements back into the array \n        int count = 0;\n        while (!(heap.isEmpty()))\n        {\n            data[count] = heap.removeMin();\n            count++;\n        }\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; \n    ArrayList&lt;T&gt; smallest_n(T[] data, int n) {\n        // Project 9 - Returns ALL elements of data - modify to \n        //               return only n elements\n\n        ArrayList&lt;T&gt; ret = new ArrayList&lt;T&gt;();\n\n        for (T e : data) {\n            ret.add(e);\n        }\n        return ret;\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/","title":"Heaps - /jsjf/ Project 9 - Index","text":"<ul> <li>ArrayBinaryTree.java</li> <li>ArrayHeap.java</li> <li>ArrayList.java</li> <li>ArrayUnorderedList.java</li> <li>BinaryTreeADT.java</li> <li>BinaryTreeNode.java</li> <li>HeapADT.java</li> <li>HeapNode.java</li> <li>HeapQueue.java</li> <li>HeapStack.java</li> <li>LinkedBinaryTree.java</li> <li>LinkedHeap.java</li> <li>ListADT.java</li> <li>QueueADT.java</li> <li>StackADT.java</li> <li>UnorderedListADT.java</li> </ul>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/ArrayBinaryTree/","title":"ArrayBinaryTree.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\nimport java.util.*;\n\nimport projects.project9heaps.jsjf.exceptions.*;\n\n/**\n * ArrayBinaryTree implements the BinaryTreeADT interface using an array.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class ArrayBinaryTree&lt;T&gt; implements BinaryTreeADT&lt;T&gt;, Iterable&lt;T&gt;\n{\n    private static final int DEFAULT_CAPACITY = 50;\n\n    protected int count;\n    protected T[] tree; \n    protected int modCount;\n\n    /**\n     * Creates an empty binary tree.\n     */\n    public ArrayBinaryTree() \n    {\n        count = 0;\n        tree = (T[]) new Object[DEFAULT_CAPACITY];\n    }\n\n    /**\n     * Creates a binary tree with the specified element as its root.\n     *\n     * @param element the element which will become the root of the new tree\n     */\n    public ArrayBinaryTree(T element) \n    {\n        count = 1;\n        tree = (T[]) new Object[DEFAULT_CAPACITY];\n        tree[0] = element;\n    }\n\n    /**\n     * Private method to expand capacity if full.\n     */    \n    protected void expandCapacity()\n    {\n        tree = Arrays.copyOf(tree, tree.length * 2);   \n    }\n\n    /**\n     * Returns the root element of the tree.\n     *\n     * @return element stored at the root\n     * @throws EmptyCollectionException if the tree is empty\n     */\n    public T getRootElement() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"ArrayBinaryTree\");\n\n        return tree[0];\n    }\n\n    /**\n     * Returns true if this binary tree is empty and false otherwise.\n     * \n     * @return true if this binary tree is empty, false otherwise\n     */\n    public boolean isEmpty() \n    {\n        return (count == 0);\n    }\n\n    /**\n     * Returns the integer size of this binary tree.\n     *\n     * @return the integer size of this binary tree\n     */\n    public int size() \n    {\n        return count;\n    }\n\n    /**\n     * Returns true if this tree contains an element that matches the\n     * specified target element and false otherwise.\n     *\n     * @param targetElement the element being sought in the tree\n     * @return true if the element is in this tree\n     */\n    public boolean contains(T targetElement) \n    {\n        T temp;\n        boolean found = false;\n\n        try \n        {\n            temp = find(targetElement);\n            found = true;\n        }\n        catch (Exception ElementNotFoundException) \n        {\n            found = false;\n        }\n\n        return found;\n    }\n\n    /**\n     * Returns a reference to the specified target element if it is\n     * found in this binary tree.  Throws a ElementNotFoundException if\n     * the specified target element is not found in the binary tree.\n     *\n     * @param targetElement the element being sought in the tree\n     * @return true if the element is in the tree\n     * @throws ElementNotFoundException if the element is not in the tree\n     */\n    public T find(T targetElement) throws ElementNotFoundException \n    {\n        T temp = null;\n        boolean found = false;\n\n        for (int i = 0; i &lt; tree.length &amp;&amp; !found; i++)\n            if (tree[i] != null)\n                if (targetElement.equals(tree[i]))\n                {\n                    found = true;\n                    temp = tree[i];\n                }\n\n        if (!found)\n            throw new ElementNotFoundException(\"ArrayBinaryTree\");\n\n        return temp;\n    }\n\n\n    /**\n     * Returns a string representation of this binary tree showing\n     * the nodes in an inorder fashion.\n     *\n     * @return a string representation of the binary tree\n     */\n    public String toString() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        inOrder(0, tempList);\n\n        return tempList.toString();\n    }\n\n    /**\n     * Returns an iterator over the elements of this binary tree using\n     * the iteratorInOrder method\n     *\n     * @return an iterator over the binary tree\n     */\n    public Iterator&lt;T&gt; iterator() \n    {\n        return this.iteratorInOrder();\n    }\n\n    /**\n     * Performs an inorder traversal on this binary tree by calling an\n     * overloaded, recursive inorder method that starts with\n     * the root.\n     *\n     * @return an iterator over the binary tree\n     */\n    public Iterator&lt;T&gt; iteratorInOrder() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        inOrder(0, tempList);\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Performs a recursive inorder traversal.\n     *\n     * @param node the index of the node used in the traversal\n     * @param tempList the temporary list used in the traversal\n     */\n    protected void inOrder(int node, ArrayUnorderedList&lt;T&gt; tempList) \n    {\n        if (node &lt; tree.length)\n            if (tree[node] != null)\n            {\n                inOrder(node * 2 + 1, tempList);\n                tempList.addToRear(tree[node]);\n                inOrder((node + 1) * 2, tempList);\n            }\n    }\n\n    /**\n     * Performs an preorder traversal on this binary tree by calling an\n     * overloaded, recursive preorder method that starts with\n     * the root.\n     * \n     * @return an iterator over the binary tree\n     */\n    public Iterator&lt;T&gt; iteratorPreOrder() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        preOrder(0, tempList);\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Performs a recursive preorder traversal.\n     *\n     * @param node the index of the node used in the traversal\n     * @param tempList the temporary list used in the traversal\n     */\n    protected void preOrder(int node, ArrayUnorderedList&lt;T&gt; tempList) \n    {\n        if (node &lt; tree.length)\n            if (tree[node] != null) \n            { \n                tempList.addToRear(tree[node]);\n                preOrder(node * 2 + 1, tempList);\n                preOrder((node + 1) * 2, tempList);\n            }\n    }\n\n    /**\n     * Performs an postorder traversal on the binary tree by calling\n     * an overloaded, recursive postorder method that starts\n     * with the root.\n     * \n     * @return an iterator over the binary tree\n     */\n    public Iterator&lt;T&gt; iteratorPostOrder() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        postOrder(0, tempList);\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Performs a recursive postorder traversal.\n     * \n     * @param node the index of the node used in the traversal\n     * @param tempList the temporary list used in the traversal\n     */\n    protected void postOrder(int node, ArrayUnorderedList&lt;T&gt; tempList) \n    {\n        if (node &lt; tree.length)\n            if (tree[node] != null) \n            {\n                postOrder(node * 2 + 1, tempList); \n                postOrder((node + 1) * 2, tempList);\n                tempList.addToRear(tree[node]);  \n            }\n    }\n\n    /**\n     * Performs a levelorder traversal on this binary tree, using a\n     * tempList.\n     *\n     * @return an iterator over the binary tree\n     */\n    public Iterator&lt;T&gt; iteratorLevelOrder() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        int ct = 0; // current number of elements added to list\n        int i = 0; // current position in array\n\n        while (ct &lt; count)\n        {\n            if (tree[i] != null)\n            {\n                tempList.addToRear(tree[i]);\n                ct++;\n            }\n            i++;\n        }\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Inner class to represent an iterator over the elements of this tree\n     */\n    private class TreeIterator implements Iterator&lt;T&gt;\n    {\n        private int expectedModCount;\n        private Iterator&lt;T&gt; iter;\n\n        /**\n         * Sets up this iterator using the specified iterator.\n         *\n         * @param iter the list iterator created by a tree traversal\n         */\n        public TreeIterator(Iterator&lt;T&gt; iter)\n        {\n            this.iter = iter;\n            expectedModCount = modCount;\n        }\n\n        /**\n         * Returns true if this iterator has at least one more element\n         * to deliver in the iteration.\n         *\n         * @return  true if this iterator has at least one more element to deliver\n         *          in the iteration\n         * @throws  ConcurrentModificationException if the collection has changed\n         *          while the iterator is in use\n         */\n        public boolean hasNext() throws ConcurrentModificationException\n        {\n            if (!(modCount == expectedModCount))\n                throw new ConcurrentModificationException();\n\n            return (iter.hasNext());\n        }\n\n        /**\n         * Returns the next element in the iteration. If there are no\n         * more elements in this iteration, a NoSuchElementException is\n         * thrown.\n         *\n         * @return the next element in the iteration\n         * @throws NoSuchElementException if the iterator is empty\n         */\n        public T next() throws NoSuchElementException\n        {\n            if (hasNext())\n                return (iter.next());\n            else \n                throw new NoSuchElementException();\n        }\n\n        /**\n         * The remove operation is not supported.\n         * \n         * @throws UnsupportedOperationException if the remove operation is called\n         */\n        public void remove()\n        {\n            throw new UnsupportedOperationException();\n        }\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/ArrayHeap/","title":"ArrayHeap.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\nimport projects.project9heaps.jsjf.exceptions.*;\n\n/**\n * ArrayHeap provides an array implementation of a minheap.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class ArrayHeap&lt;T&gt; extends ArrayBinaryTree&lt;T&gt; implements HeapADT&lt;T&gt; \n{\n    /**\n     * Creates an empty heap.\n     */\n    public ArrayHeap() \n    {\n        super();\n    }\n\n    /**\n     * Adds the specified element to this heap in the appropriate\n     * position according to its key value.  \n     *\n     * @param obj the element to be added to the heap\n     */\n    public void addElement(T obj) \n    {\n        if (count == tree.length)\n            expandCapacity();\n\n        tree[count] = obj;\n        count++;\n        modCount++;\n\n        if (count &gt; 1)\n            heapifyAdd();\n    }\n\n    /**\n     * Reorders this heap to maintain the ordering property after\n     * adding a node.\n     */\n    private void heapifyAdd()\n    {\n        T temp;\n        int next = count - 1;\n\n        temp = tree[next];\n\n        while ((next != 0) &amp;&amp; \n                (((Comparable&lt;T&gt;)temp).compareTo(tree[(next - 1) / 2]) &lt; 0))\n        {\n\n            tree[next] = tree[(next - 1) / 2];\n            next = (next - 1) / 2;\n        }\n\n        tree[next] = temp;\n    }\n\n    /**\n     * Remove the element with the lowest value in this heap and\n     * returns a reference to it. Throws an EmptyCollectionException if\n     * the heap is empty.\n     *\n     * @return a reference to the element with the lowest value in this heap\n     * @throws EmptyCollectionException if the heap is empty\n     */\n    public T removeMin() throws EmptyCollectionException \n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"ArrayHeap\");\n\n        T minElement = tree[0];\n        tree[0] = tree[count - 1];\n        heapifyRemove();\n        count--;\n        modCount++;\n\n        return minElement;\n    }\n\n    /**\n     * Reorders this heap to maintain the ordering property\n     * after the minimum element has been removed.\n     */\n    private void heapifyRemove()\n    {\n        T temp;\n        int node = 0;\n        int left = 1;\n        int right = 2;\n        int next;\n\n        if ((tree[left] == null) &amp;&amp; (tree[right] == null))\n            next = count;\n        else if (tree[right] == null)\n            next = left;\n        else if (((Comparable&lt;T&gt;)tree[left]).compareTo(tree[right]) &lt; 0)\n            next = left;\n        else\n            next = right;\n        temp = tree[node];\n\n        while ((next &lt; count) &amp;&amp; \n                (((Comparable&lt;T&gt;)tree[next]).compareTo(temp) &lt; 0))\n        {\n            tree[node] = tree[next];\n            node = next;\n            left = 2 * node + 1;\n            right = 2 * (node + 1);\n            if ((tree[left] == null) &amp;&amp; (tree[right] == null))\n                next = count;\n            else if (tree[right] == null)\n                next = left;\n            else if (((Comparable&lt;T&gt;)tree[left]).compareTo(tree[right]) &lt; 0)\n                next = left;\n            else\n                next = right;\n        }\n        tree[node] = temp;\n    }\n\n    /**\n     * Returns the element with the lowest value in this heap.\n     * Throws an EmptyCollectionException if the heap is empty.\n     *\n     * @return the element with the lowest value in this heap\n     * @throws EmptyCollectionException if the heap is empty\n     */\n    public T findMin() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"ArrayHeap\");\n\n        return tree[0];\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/ArrayList/","title":"ArrayList.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\nimport java.util.*;\n\nimport projects.project9heaps.jsjf.exceptions.*;\n\n/**\n * ArrayList represents an array implementation of a list. The front of\n * the list is kept at array index 0. This class will be extended\n * to create a specific kind of list.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic abstract class ArrayList&lt;T&gt; implements ListADT&lt;T&gt;, Iterable&lt;T&gt;\n{\n    private final static int DEFAULT_CAPACITY = 100;\n    private final static int NOT_FOUND = -1;\n\n    protected int rear;\n    protected T[] list; \n    protected int modCount;\n\n    /**\n     * Creates an empty list using the default capacity.\n     */\n    public ArrayList()\n    {\n        this(DEFAULT_CAPACITY);\n    }\n\n    /**\n     * Creates an empty list using the specified capacity.\n     *\n     * @param initialCapacity the integer value of the size of the array list\n     */\n    public ArrayList(int initialCapacity)\n    {\n        rear = 0;\n        list = (T[])(new Object[initialCapacity]);\n        modCount = 0;\n    }\n\n    /**\n     * Creates a new array to store the contents of this list with\n     * twice the capacity of the old one. Called by descendant classes\n     * that add elements to the list.\n     */\n    protected void expandCapacity()\n    {\n        // To be completed as a Programming Project\n    }\n\n    /**\n     * Removes and returns the last element in this list.\n     *\n     * @return the last element in the list\n     * @throws EmptyCollectionException if the element is not in the list\n     */\n    public T removeLast() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Removes and returns the first element in this list.\n     *\n     * @return the first element in the list\n     * @throws EmptyCollectionException if the element is not in the list\n     */\n    public T removeFirst() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Removes and returns the specified element.\n     *\n     * @param  element the element to be removed and returned from the list\n     * @return the removed elememt\n     * @throws ElementNotFoundException if the element is not in the list\n     */\n    public T remove(T element)\n    {\n        T result;\n        int index = find(element);\n\n        if (index == NOT_FOUND)\n            throw new ElementNotFoundException(\"ArrayList\");\n\n        result = list[index];\n        rear--;\n\n        // shift the appropriate elements \n        for (int scan = index; scan &lt; rear; scan++)\n            list[scan] = list[scan+1];\n\n        list[rear] = null;\n        modCount++;\n\n        return result;\n    }\n\n    /**\n     * Returns a reference to the element at the front of this list.\n     * The element is not removed from the list.  Throws an\n     * EmptyCollectionException if the list is empty.  \n     *\n     * @return a reference to the first element in the list\n     * @throws EmptyCollectionException if the list is empty\n     */\n    public T first() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Returns a reference to the element at the rear of this list.\n     * The element is not removed from the list. Throws an\n     * EmptyCollectionException if the list is empty.  \n     *\n     * @return a reference to the last element of this list\n     * @throws EmptyCollectionException if the list is empty\n     */\n    public T last() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Returns true if this list contains the specified element.\n     *\n     * @param target the target element\n     * @return true if the target is in the list, false otherwise \n     */\n    public boolean contains(T target)\n    {\n        return (find(target) != NOT_FOUND);\n    }\n\n    /**\n     * Returns the array index of the specified element, or the\n     * constant NOT_FOUND if it is not found.\n     *\n     * @param target the target element\n     * @return the index of the target element, or the \n     *         NOT_FOUND constant\n     */\n    private int find(T target)\n    {\n        int scan = 0; \n        int result = NOT_FOUND;\n\n        if (!isEmpty())\n            while (result == NOT_FOUND &amp;&amp; scan &lt; rear)\n                if (target.equals(list[scan]))\n                    result = scan;\n                else\n                    scan++;\n\n        return result;\n    }\n\n    /**\n     * Returns true if this list is empty and false otherwise. \n     *\n     * @return true if the list is empty, false otherwise\n     */\n    public boolean isEmpty()\n    {\n        // To be completed as a Programming Project\n\n        return true;  // temp\n    }\n\n    /**\n     * Returns the number of elements currently in this list.\n     *\n     * @return the number of elements in the list\n     */\n    public int size()\n    {\n        // To be completed as a Programming Project\n\n        return 0;  // temp\n    }\n\n    /**\n     * Returns a string representation of this list. \n     * \n     * @return the string representation of the list\n     */\n    public String toString()\n    {\n        // To be completed as a Programming Project\n\n        return \"\";  // temp\n    }\n\n    /**\n     * Returns an iterator for the elements currently in this list.\n     * \n     * @return an iterator for the elements in the list\n     */\n    public Iterator&lt;T&gt; iterator()\n    {\n        return new ArrayListIterator();\n    }\n\n    /**\n     * ArrayListIterator iterator over the elements of an ArrayList.\n     */ \n    private class ArrayListIterator implements Iterator&lt;T&gt;\n    {\n        int iteratorModCount;\n        int current;\n\n        /**\n         * Sets up this iterator using the specified modCount.\n         * \n         * @param modCount the current modification count for the ArrayList\n         */\n        public ArrayListIterator()\n        {\n            iteratorModCount = modCount;\n            current = 0;\n        }\n\n        /**\n         * Returns true if this iterator has at least one more element\n         * to deliver in the iteration.\n         *\n         * @return  true if this iterator has at least one more element to deliver\n         *          in the iteration\n         * @throws  ConcurrentModificationException if the collection has changed\n         *          while the iterator is in use\n         */\n        public boolean hasNext() throws ConcurrentModificationException\n        {\n            if (iteratorModCount != modCount)\n                throw new ConcurrentModificationException();\n\n            return (current &lt; rear);\n        }\n\n        /**\n         * Returns the next element in the iteration. If there are no\n         * more elements in this iteration, a NoSuchElementException is\n         * thrown.\n         *\n         * @return  the next element in the iteration\n         * @throws  NoSuchElementException if an element not found exception occurs\n         * @throws  ConcurrentModificationException if the collection has changed\n         */\n        public T next() throws ConcurrentModificationException\n        {\n            if (!hasNext())\n                throw new NoSuchElementException();\n\n            current++;\n\n            return list[current - 1];\n        }\n\n        /**\n         * The remove operation is not supported in this collection.\n         * \n         * @throws UnsupportedOperationException if the remove method is called\n         */\n        public void remove() throws UnsupportedOperationException\n        {\n            throw new UnsupportedOperationException();\n        }\n\n    }   \n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/ArrayUnorderedList/","title":"ArrayList.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\nimport projects.project9heaps.jsjf.exceptions.*;\n\n/**\n * ArrayUnorderedList represents an array implementation of an unordered list.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class ArrayUnorderedList&lt;T&gt; extends ArrayList&lt;T&gt; \nimplements UnorderedListADT&lt;T&gt;\n{\n    /**\n     * Creates an empty list using the default capacity.\n     */\n    public ArrayUnorderedList()\n    {\n        super();\n    }\n\n    /**\n     * Creates an empty list using the specified capacity.\n     *\n     * @param initialCapacity the initial size of the list\n     */\n    public ArrayUnorderedList(int initialCapacity)\n    {\n        super(initialCapacity);\n    }\n\n    /**\n     * Adds the specified element to the front of this list.\n     * \n     * @param element the element to be added to the front of the list\n     */\n    public void addToFront(T element)\n    {\n        // To be completed as a Programming Project\n    }\n\n    /**\n     * Adds the specified element to the rear of this list.\n     *\n     * @param element the element to be added to the list\n     */\n    public void addToRear(T element)\n    {\n        // To be completed as a Programming Project\n    }\n\n    /**\n     * Adds the specified element after the specified target element.\n     * Throws an ElementNotFoundException if the target is not found.\n     *\n     * @param element the element to be added after the target element\n     * @param target  the target that the element is to be added after\n     */\n    public void addAfter(T element, T target)\n    {\n        if (size() == list.length)\n            expandCapacity();\n\n        int scan = 0;\n\n        // find the insertion point\n        while (scan &lt; rear &amp;&amp; !target.equals(list[scan])) \n            scan++;\n\n        if (scan == rear)\n            throw new ElementNotFoundException(\"UnorderedList\");\n\n        scan++;\n\n        // shift elements up one\n        for (int shift = rear; shift &gt; scan; shift--)\n            list[shift] = list[shift - 1];\n\n        // insert element\n        list[scan] = element;\n        rear++;\n        modCount++;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/BinaryTreeADT/","title":"BinaryTreeADT.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\nimport java.util.Iterator;\n\n/**\n * BinaryTreeADT defines the interface to a binary tree data structure.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface BinaryTreeADT&lt;T&gt; \n{\n    /** \n     * Returns a reference to the root element \n     *\n     * @return a reference to the root\n     */\n    public T getRootElement();\n\n    /** \n     * Returns true if this binary tree is empty and false otherwise.\n     *\n     * @return true if this binary tree is empty, false otherwise\n     */\n    public boolean isEmpty();\n\n    /** \n     * Returns the number of elements in this binary tree.\n     *\n     * @return the number of elements in the tree\n     */\n    public int size();\n\n    /** \n     * Returns true if the binary tree contains an element that matches\n     * the specified element and false otherwise. \n     *\n     * @param targetElement the element being sought in the tree\n     * @return true if the tree contains the target element\n     */\n    public boolean contains(T targetElement);\n\n    /** \n     * Returns a reference to the specified element if it is found in \n     * this binary tree. Throws an exception if the specified element\n     * is not found.\n     *\n     * @param targetElement the element being sought in the tree\n     * @return a reference to the specified element\n     */\n    public T find(T targetElement);\n\n    /**  \n     * Returns the string representation of this binary tree.\n     *\n     * @return a string representation of the binary tree\n     */\n    public String toString();\n\n    /**  \n     * Returns an iterator over the elements of this tree.\n     *\n     * @return an iterator over the elements of this binary tree\n     */\n    public Iterator&lt;T&gt; iterator();\n\n    /**  \n     * Returns an iterator that represents an inorder traversal on this binary tree.  \n     *\n     * @return an iterator over the elements of this binary tree\n     */\n    public Iterator&lt;T&gt; iteratorInOrder();\n\n    /**  \n     * Returns an iterator that represents a preorder traversal on this binary tree. \n     *\n     * @return an iterator over the elements of this binary tree\n     */\n    public Iterator&lt;T&gt; iteratorPreOrder();\n\n    /**  \n     * Returns an iterator that represents a postorder traversal on this binary tree. \n     *\n     * @return an iterator over the elements of this binary tree\n     */\n    public Iterator&lt;T&gt; iteratorPostOrder();\n\n    /**  \n     * Returns an iterator that represents a levelorder traversal on the binary tree.\n     *\n     * @return an iterator over the elements of this binary tree\n     */\n    public Iterator&lt;T&gt; iteratorLevelOrder();\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/BinaryTreeNode/","title":"BinaryTreeNode.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\n/**\n * BinaryTreeNode represents a node in a binary tree with a left and \n * right child.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class BinaryTreeNode&lt;T&gt;\n{\n    protected T element;\n    protected BinaryTreeNode&lt;T&gt; left, right;\n\n    /**\n     * Creates a new tree node with the specified data.\n     *\n     * @param obj the element that will become a part of the new tree node\n     */\n    public BinaryTreeNode(T obj) \n    {\n        element = obj;\n        left = null;\n        right = null;\n    }\n\n    /**\n     * Creates a new tree node with the specified data.\n     *\n     * @param obj the element that will become a part of the new tree node\n     * @param left the tree that will be the left subtree of this node\n     * @param right the tree that will be the right subtree of this node\n     */\n    public BinaryTreeNode(T obj, LinkedBinaryTree&lt;T&gt; left, LinkedBinaryTree&lt;T&gt; right) \n    {\n        element = obj;\n        if (left == null)\n            this.left = null;\n        else\n            this.left = left.getRootNode();\n\n        if (right == null)\n            this.right = null;\n        else\n            this.right = right.getRootNode();\n    }\n\n    /**\n     * Returns the number of non-null children of this node.\n     *\n     * @return the integer number of non-null children of this node \n     */\n    public int numChildren() \n    {\n        int children = 0;\n\n        if (left != null)\n            children = 1 + left.numChildren();\n\n        if (right != null)\n            children = children + 1 + right.numChildren();\n\n        return children;\n    }\n\n    /**\n     * Return the element at this node.\n     *\n     * @return the element stored at this node\n     */\n    public T getElement() \n    {\n        return element;\n    }\n\n    /**\n     * Return the right child of this node.\n     *\n     * @return the right child of this node\n     */\n    public BinaryTreeNode&lt;T&gt; getRight() \n    {\n        return right;\n    }\n\n    /**\n     * Sets the right child of this node.\n     *\n     * @param node the right child of this node\n     */\n    public void setRight(BinaryTreeNode&lt;T&gt; node) \n    {\n        right = node;\n    }\n\n    /**\n     * Return the left child of this node.\n     *\n     * @return the left child of the node\n     */\n    public BinaryTreeNode&lt;T&gt; getLeft() \n    {\n        return left;\n    }\n\n    /**\n     * Sets the left child of this node.\n     *\n     * @param node the left child of this node\n     */\n    public void setLeft(BinaryTreeNode&lt;T&gt; node) \n    {\n        left = node;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/HeapADT/","title":"HeapADT.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\n/**\n * HeapADT defines the interface to a Heap.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface HeapADT&lt;T&gt; extends BinaryTreeADT&lt;T&gt; \n{\n    /** \n     * Adds the specified object to this heap. \n     *\n     * @param obj the element to be added to the heap\n     */   \n    public void addElement(T obj);\n\n    /** \n     * Removes element with the lowest value from this heap. \n     *\n     * @return the element with the lowest value from the heap\n     */\n    public T removeMin();\n\n    /** \n     * Returns a reference to the element with the lowest value in \n     * this heap. \n     *\n     * @return a reference to the element with the lowest value in the heap\n     */\n    public T findMin();\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/HeapNode/","title":"HeapNode.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\n/**\n * HeapNode represents a binary tree node with a parent pointer for use \n * in heaps.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class HeapNode&lt;T&gt; extends BinaryTreeNode&lt;T&gt;\n{\n    protected HeapNode&lt;T&gt; parent;\n\n    /**\n     * Creates a new heap node with the specified data.\n     * \n     * @param obj the data to be contained within the new heap node\n     */\n    public HeapNode(T obj) \n    {\n        super(obj);\n        parent = null;\n    }\n\n    /**\n     * Return the parent of this node.\n     *\n     * @return the parent of the node\n     */\n    public HeapNode&lt;T&gt; getParent() \n    {\n        return parent;\n    }\n\n    /**\n     * Sets the element stored at this node.\n     *\n     * @param the element to be stored \n     */\n    public void setElement(T obj) \n    {\n        element = obj;\n    }\n\n    /**\n     * Sets the parent of this node.\n     *\n     * @param node the parent of the node\n     */\n    public void setParent(HeapNode&lt;T&gt; node) \n    {\n        parent = node;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/HeapQueue/","title":"HeapQueue.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\npublic class HeapQueue&lt;T&gt; implements QueueADT&lt;T&gt; {\n\n    @Override\n    public void enqueue(T element) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public T dequeue() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    @Override\n    public T first() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    @Override\n    public boolean isEmpty() {\n        // TODO Auto-generated method stub\n        return false;\n    }\n\n    @Override\n    public int size() {\n        // TODO Auto-generated method stub\n        return 0;\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/HeapStack/","title":"HeapStack.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\npublic class HeapStack&lt;T&gt; implements StackADT&lt;T&gt; {\n\n    @Override\n    public void push(T element) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public T pop() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    @Override\n    public T peek() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    @Override\n    public boolean isEmpty() {\n        // TODO Auto-generated method stub\n        return false;\n    }\n\n    @Override\n    public int size() {\n        // TODO Auto-generated method stub\n        return 0;\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/LinkedBinaryTree/","title":"LinkedBinaryTree.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\nimport java.util.*;\nimport projects.project9heaps.jsjf.exceptions.*;\n\n/**\n * LinkedBinaryTree implements the BinaryTreeADT interface\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class LinkedBinaryTree&lt;T&gt; implements BinaryTreeADT&lt;T&gt;, Iterable&lt;T&gt;\n{\n    protected BinaryTreeNode&lt;T&gt; root; \n    protected int modCount;\n\n    /**\n     * Creates an empty binary tree.\n     */\n    public LinkedBinaryTree() \n    {\n        root = null;\n    }\n\n    /**\n     * Creates a binary tree with the specified element as its root.\n     *\n     * @param element the element that will become the root of the binary tree\n     */\n    public LinkedBinaryTree(T element) \n    {\n        root = new BinaryTreeNode&lt;T&gt;(element);\n    }\n\n    /**\n     * Creates a binary tree with the specified element as its root and the \n     * given trees as its left child and right child\n     *\n     * @param element the element that will become the root of the binary tree\n     * @param left the left subtree of this tree\n     * @param right the right subtree of this tree\n     */\n    public LinkedBinaryTree(T element, LinkedBinaryTree&lt;T&gt; left, \n            LinkedBinaryTree&lt;T&gt; right) \n    {\n        root = new BinaryTreeNode&lt;T&gt;(element);\n        root.setLeft(left.root);\n        root.setRight(right.root);\n    }\n\n    /**\n     * Returns a reference to the element at the root\n     *\n     * @return a reference to the specified target\n     * @throws EmptyCollectionException if the tree is empty\n     */\n    public T getRootElement() throws EmptyCollectionException\n    {\n        if (root == null)\n            throw new EmptyCollectionException(\"LinkedBinaryTree\");\n\n        return (root.getElement());\n    }\n\n    /**\n     * Returns a reference to the node at the root\n     *\n     * @return a reference to the specified node\n     * @throws EmptyCollectionException if the tree is empty\n     */\n    protected BinaryTreeNode&lt;T&gt; getRootNode() throws EmptyCollectionException\n    {\n        if (root == null)\n            throw new EmptyCollectionException(\"LinkedBinaryTree\");\n\n        return (root);\n    }\n\n    /**\n     * Returns the left subtree of the root of this tree.\n     *\n     * @return a link to the left subtree of the tree\n     */\n    public LinkedBinaryTree&lt;T&gt; getLeft()\n    {\n        if (root == null)\n            throw new EmptyCollectionException(\"LinkedBinaryTree - getLeft() -\");\n\n        LinkedBinaryTree&lt;T&gt; result = new LinkedBinaryTree&lt;T&gt;();\n        result.root = root.getLeft();\n\n        return result;\n    }\n\n    /**\n     * Returns the right subtree of the root of this tree.\n     *\n     * @return a link to the right subtree of the tree\n     */\n    public LinkedBinaryTree&lt;T&gt; getRight()\n    {\n        if (root == null)\n            throw new EmptyCollectionException(\"LinkedBinaryTree - getRight() -\");\n\n        LinkedBinaryTree&lt;T&gt; result = new LinkedBinaryTree&lt;T&gt;();\n        result.root = root.getRight();\n\n        return result;\n    }\n\n    /**\n     * Returns true if this binary tree is empty and false otherwise.\n     *\n     * @return true if this binary tree is empty, false otherwise\n     */\n    public boolean isEmpty() \n    {\n        return (root == null);\n    }\n\n    /**\n     * Returns the integer size of this tree.\n     *\n     * @return the integer size of the tree\n     */\n    public int size() \n    {\n        if (root == null) {\n            return 0;\n        }\n        return root.numChildren() + 1;\n    }\n\n    /**\n     * Returns the height of this tree.\n     *\n     * @return the height of the tree\n     */\n    public int getHeight()\n    {\n        return height(root) - 1;\n    }\n\n    /**\n     * Returns the height of the specified node.\n     *\n     * @param node the node from which to calculate the height\n     * @return the height of the tree\n     */\n    private int height(BinaryTreeNode&lt;T&gt; node) \n    {\n        int result = 0;\n        if (node != null)\n            result = Math.max(height(node.getLeft()), height(node.getRight())) + 1;\n\n        return result;\n    }\n\n    /**\n     * Returns true if this tree contains an element that matches the\n     * specified target element and false otherwise.\n     *\n     * @param targetElement the element being sought in this tree\n     * @return true if the element in is this tree, false otherwise\n     */\n    public boolean contains(T targetElement) \n    {\n        T temp;\n        boolean found = false;\n\n        try \n        {\n            temp = find(targetElement);\n            found = true;\n        }\n        catch (Exception ElementNotFoundException) \n        {\n            found = false;\n        }\n\n        return found;\n    }\n\n    /**\n     * Returns a reference to the specified target element if it is\n     * found in this binary tree.  Throws a ElementNotFoundException if\n     * the specified target element is not found in the binary tree.\n     *\n     * @param targetElement the element being sought in this tree\n     * @return a reference to the specified target\n     * @throws ElementNotFoundException if the element is not in the tree\n     */\n    public T find(T targetElement) throws ElementNotFoundException\n    {\n        BinaryTreeNode&lt;T&gt; current = findNode(targetElement, root);\n\n        if (current == null)\n            throw new ElementNotFoundException(\"LinkedBinaryTree\");\n\n        return (current.getElement());\n    }\n\n    /**\n     * Returns a reference to the specified target element if it is\n     * found in this binary tree.\n     *\n     * @param targetElement the element being sought in this tree\n     * @param next the element to begin searching from\n     */\n    private BinaryTreeNode&lt;T&gt; findNode(T targetElement, \n            BinaryTreeNode&lt;T&gt; next)\n    {\n        if (next == null)\n            return null;\n\n        if (next.getElement().equals(targetElement))\n            return next;\n\n        BinaryTreeNode&lt;T&gt; temp = findNode(targetElement, next.getLeft());\n\n        if (temp == null)\n            temp = findNode(targetElement, next.getRight());\n\n        return temp;\n    }\n\n    /**\n     * Returns a string representation of this binary tree showing\n     * the nodes in an inorder fashion.\n     *\n     * @return a string representation of this binary tree\n     */\n    public String toString() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        inOrder(root, tempList);\n\n        String ret = \"\";\n\n        for (T element : tempList) {\n            ret += element.toString() + \" \";\n        }\n\n        return ret;\n    }\n\n    /**\n     * Returns an iterator over the elements in this tree using the \n     * iteratorInOrder method\n     *\n     * @return an in order iterator over this binary tree\n     */\n    public Iterator&lt;T&gt; iterator()\n    {\n        return iteratorInOrder();\n    }\n\n    /**\n     * Performs an inorder traversal on this binary tree by calling an\n     * overloaded, recursive inorder method that starts with\n     * the root.\n     *\n     * @return an in order iterator over this binary tree\n     */\n    public Iterator&lt;T&gt; iteratorInOrder()\n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        inOrder(root, tempList);\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Performs a recursive inorder traversal.\n     *\n     * @param node the node to be used as the root for this traversal\n     * @param tempList the temporary list for use in this traversal\n     */\n    protected void inOrder(BinaryTreeNode&lt;T&gt; node, \n            ArrayUnorderedList&lt;T&gt; tempList) \n    {\n        if (node != null)\n        {\n            inOrder(node.getLeft(), tempList);\n            tempList.addToRear(node.getElement());\n            inOrder(node.getRight(), tempList);\n        }\n    }\n\n    /**\n     * Performs an preorder traversal on this binary tree by calling \n     * an overloaded, recursive preorder method that starts with\n     * the root.\n     *\n     * @return a pre order iterator over this tree\n     */\n    public Iterator&lt;T&gt; iteratorPreOrder() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        preOrder(root, tempList);\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Performs a recursive preorder traversal.\n     *\n     * @param node the node to be used as the root for this traversal\n     * @param tempList the temporary list for use in this traversal\n     */\n    protected void preOrder(BinaryTreeNode&lt;T&gt; node, \n            ArrayUnorderedList&lt;T&gt; tempList) \n    {\n        if (node != null)\n        {\n            tempList.addToRear(node.getElement());\n            preOrder(node.getLeft(), tempList);\n            preOrder(node.getRight(), tempList);\n        }\n    }\n\n    /**\n     * Performs an postorder traversal on this binary tree by calling\n     * an overloaded, recursive postorder method that starts\n     * with the root.\n     *\n     * @return a post order iterator over this tree\n     */\n    public Iterator&lt;T&gt; iteratorPostOrder() \n    {\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        postOrder(root, tempList);\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Performs a recursive postorder traversal.\n     *\n     * @param node the node to be used as the root for this traversal\n     * @param tempList the temporary list for use in this traversal\n     */\n    protected void postOrder(BinaryTreeNode&lt;T&gt; node, \n            ArrayUnorderedList&lt;T&gt; tempList) \n    {\n        if (node != null)\n        {\n            postOrder(node.getLeft(), tempList);\n            postOrder(node.getRight(), tempList);\n            tempList.addToRear(node.getElement());\n        }\n    }\n\n    /**\n     * Performs a levelorder traversal on this binary tree, using a\n     * templist.\n     *\n     * @return a levelorder iterator over this binary tree\n     */\n    public Iterator&lt;T&gt; iteratorLevelOrder() \n    {\n        ArrayUnorderedList&lt;BinaryTreeNode&lt;T&gt;&gt; nodes = \n                new ArrayUnorderedList&lt;BinaryTreeNode&lt;T&gt;&gt;();\n        ArrayUnorderedList&lt;T&gt; tempList = new ArrayUnorderedList&lt;T&gt;();\n        BinaryTreeNode&lt;T&gt; current;\n\n        nodes.addToRear(root);\n\n        while (!nodes.isEmpty()) \n        {\n            current = nodes.removeFirst();\n\n            if (current != null)\n            {\n                tempList.addToRear(current.getElement());\n                if (current.getLeft() != null)\n                    nodes.addToRear(current.getLeft());\n                if (current.getRight() != null)\n                    nodes.addToRear(current.getRight());\n            }\n            else\n                tempList.addToRear(null);\n        }\n\n        return new TreeIterator(tempList.iterator());\n    }\n\n    /**\n     * Returns a recursive string representation of a tree\n     */\n    public String printTree() {\n        String ret;\n        LinkedBinaryTree&lt;T&gt; theRoot = new LinkedBinaryTree&lt;T&gt;();\n        theRoot.root = root;\n        ret = \"(\" + returnRecursiveString(theRoot);\n        return ret + \")\";\n    }\n\n    /**\n     * Returns a recursive string representation of a tree\n     */\n    public String returnRecursiveString(LinkedBinaryTree&lt;T&gt; curr) {\n        String ret = \"\";\n        if (!(curr.isEmpty()))\n        {\n            ret = \"(\";\n//          System.out.println(\"Adding \" + curr.getRootElement());\n            if (curr.getLeft() != null)\n//              ret += \" (\" + returnRecursiveString(curr.getLeft()) + \") \";\n                ret += returnRecursiveString(curr.getLeft()) + \" \";\n//          ret += \" (\" + curr.getRootElement() + \") \" ;\n            ret += curr.getRootElement();\n            if (curr.getRight() != null)\n//              ret += \" (\" + returnRecursiveString(curr.getRight()) + \") \";\n                ret += \" \" + returnRecursiveString(curr.getRight());\n            ret += \")\";\n        }   \n        return ret;\n    }\n\n    /**\n     * Inner class to represent an iterator over the elements of this tree\n     */\n    private class TreeIterator implements Iterator&lt;T&gt;\n    {\n        private int expectedModCount;\n        private Iterator&lt;T&gt; iter;\n\n        /**\n         * Sets up this iterator using the specified iterator.\n         *\n         * @param iter the list iterator created by a tree traversal\n         */\n        public TreeIterator(Iterator&lt;T&gt; iter)\n        {\n            this.iter = iter;\n            expectedModCount = modCount;\n        }\n\n        /**\n         * Returns true if this iterator has at least one more element\n         * to deliver in the iteration.\n         *\n         * @return  true if this iterator has at least one more element to deliver\n         *          in the iteration\n         * @throws  ConcurrentModificationException if the collection has changed\n         *          while the iterator is in use\n         */\n        public boolean hasNext() throws ConcurrentModificationException\n        {\n            if (!(modCount == expectedModCount))\n                throw new ConcurrentModificationException();\n\n            return (iter.hasNext());\n        }\n\n        /**\n         * Returns the next element in the iteration. If there are no\n         * more elements in this iteration, a NoSuchElementException is\n         * thrown.\n         *\n         * @return the next element in the iteration\n         * @throws NoSuchElementException if the iterator is empty\n         */\n        public T next() throws NoSuchElementException\n        {\n            if (hasNext())\n                return (iter.next());\n            else \n                throw new NoSuchElementException();\n        }\n\n        /**\n         * The remove operation is not supported.\n         * \n         * @throws UnsupportedOperationException if the remove operation is called\n         */\n        public void remove()\n        {\n            throw new UnsupportedOperationException();\n        }\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/LinkedHeap/","title":"LinkedHeap.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\nimport projects.project9heaps.jsjf.exceptions.*;\n\n/**\n * LinkedHeap implements a heap.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class LinkedHeap&lt;T&gt; extends LinkedBinaryTree&lt;T&gt; implements HeapADT&lt;T&gt; \n{\n    public HeapNode&lt;T&gt; lastNode;  \n\n    public LinkedHeap() \n    {\n        super();\n    }\n\n    /**\n     * Adds the specified element to this heap in the appropriate\n     * position according to its key value. \n     *\n     * @param obj the element to be added to the heap\n     */\n    public void addElement(T obj) \n    {\n        HeapNode&lt;T&gt; node = new HeapNode&lt;T&gt;(obj);\n\n        if (root == null)\n            root=node;\n        else\n        {\n            HeapNode&lt;T&gt; nextParent = getNextParentAdd(); // keep heap structure\n            // Determine which child\n            if (nextParent.getLeft() == null)  // no children\n                nextParent.setLeft(node);\n            else                               // one child - the left node\n                nextParent.setRight(node);\n\n            node.setParent(nextParent);\n        }\n        lastNode = node;\n        modCount++;\n\n        if (size() &gt; 1)\n            heapifyAdd();  // keep the heap ordering\n    }\n\n    /**\n     * Returns the node that will be the parent of the new node\n     *\n     * @return the node that will be the parent of the new node\n     */\n    private HeapNode&lt;T&gt; getNextParentAdd()\n    {\n        HeapNode&lt;T&gt; result = lastNode;\n\n        // Get to the left sub-tree\n        while ((result != root) &amp;&amp; (result.getParent().getLeft() != result))\n            result = result.getParent();\n\n        if (result != root)\n            // Go to the parent's right subtree\n            if (result.getParent().getRight() == null)\n                // Parent has no right child, so parent is the new parent\n                result = result.getParent();\n            else\n            {\n                // Get parent's right child\n                result = (HeapNode&lt;T&gt;)result.getParent().getRight();\n                // Go all the way to the left\n                while (result.getLeft() != null)\n                    result = (HeapNode&lt;T&gt;)result.getLeft();\n            }\n        else\n            // Tree is full so go all the way to the left (start a new row of leaves)\n            while (result.getLeft() != null)\n                result = (HeapNode&lt;T&gt;)result.getLeft();\n\n        return result;\n    }\n\n    /**\n     * Reorders this heap after adding a node.\n     */\n    private void heapifyAdd()\n    {\n        T temp;\n        HeapNode&lt;T&gt; next = lastNode;\n\n        temp = next.getElement();\n\n        while ((next != root) &amp;&amp; \n                (((Comparable&lt;T&gt;)temp).compareTo(next.getParent().getElement()) &lt; 0))\n        {\n            next.setElement(next.getParent().getElement());\n            next = next.parent;\n        }\n        next.setElement(temp);\n    }\n\n    /**\n     * Remove the element with the lowest value in this heap and\n     * returns a reference to it. Throws an EmptyCollectionException \n     * if the heap is empty.\n     *\n     * @return the element with the lowest value in this heap\n     * @throws EmptyCollectionException if the heap is empty\n     */\n    public T removeMin() throws EmptyCollectionException \n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"LinkedHeap\");\n\n        T minElement =  root.getElement();\n\n        // If the size is 1 the heap will be empty\n        if (size() == 1)\n        {\n            root = null;\n            lastNode = null;\n        }\n        else\n        {\n            // Get the new last node\n            HeapNode&lt;T&gt; newLast = getNewLastNode();\n\n            // Check which child the old last node is &amp; set to null\n            if (lastNode.getParent().getLeft() == lastNode)\n                lastNode.getParent().setLeft(null);\n            else\n                lastNode.getParent().setRight(null);\n\n            ((HeapNode&lt;T&gt;)root).setElement(lastNode.getElement());\n            lastNode = newLast;\n            heapifyRemove();\n        }\n        modCount++;\n        return minElement;\n    }\n\n    /**\n     * Reorders this heap after removing the root element.\n     */\n    private void heapifyRemove()\n    {\n        T temp;\n        HeapNode&lt;T&gt; node = (HeapNode&lt;T&gt;)root;\n        HeapNode&lt;T&gt; left = (HeapNode&lt;T&gt;)node.getLeft();\n        HeapNode&lt;T&gt; right = (HeapNode&lt;T&gt;)node.getRight();\n        HeapNode&lt;T&gt; next;\n\n\n        if ((left == null) &amp;&amp; (right == null))\n            // no children\n            next = null;\n        else if (right == null)\n            // one child\n            next = left;\n        else if (((Comparable&lt;T&gt;)left.getElement()).compareTo(right.getElement()) &lt; 0)\n            // two children, left is smaller\n            next = left;\n        else\n            // two children, right is smaller\n            next = right;\n\n        temp = node.getElement();\n        while ((next != null) &amp;&amp; \n                (((Comparable&lt;T&gt;)next.getElement()).compareTo(temp) &lt; 0))\n        {\n            node.setElement(next.getElement());\n            node = next;\n            left = (HeapNode&lt;T&gt;)node.getLeft();\n            right = (HeapNode&lt;T&gt;)node.getRight();\n\n            if ((left == null) &amp;&amp; (right == null))\n                next = null;\n            else if (right == null)\n                next = left;\n            else if (((Comparable&lt;T&gt;)left.getElement()).compareTo(right.getElement()) &lt; 0)\n                next = left;\n            else\n                next = right;\n        }\n        node.setElement(temp);\n    }\n\n    /**\n     * Returns the node that will be the new last node after a remove.\n     *\n     * @return the node that will be the new last node after a remove\n     */\n    private HeapNode&lt;T&gt; getNewLastNode()\n    {\n        HeapNode&lt;T&gt; result = lastNode;\n\n\n        while ((result != root) &amp;&amp; (result.getParent().getLeft() == result))\n            result = result.getParent();\n\n        if (result != root)\n            result = (HeapNode&lt;T&gt;)result.getParent().getLeft();\n\n        while (result.getRight() != null)\n            result = (HeapNode&lt;T&gt;)result.getRight();\n\n        return result;\n    }\n\n    /**\n     * Returns the element with the lowest value in this heap.\n     * Throws an EmptyCollectionException if the heap is empty.\n     *\n     * @return the element with the lowest value in this heap\n     * @throws EmptyCollectionException if the heap is empty\n     */\n    public T findMin() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"LinkedHeap\");\n\n        return root.getElement();\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/ListADT/","title":"ListADT.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\nimport java.util.Iterator;\n\n/**\n * ListADT defines the interface to a general list collection. Specific\n * types of lists will extend this interface to complete the\n * set of necessary operations.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface ListADT&lt;T&gt; extends Iterable&lt;T&gt;\n{\n    /**  \n     * Removes and returns the first element from this list. \n     * \n     * @return the first element from this list\n     */\n    public T removeFirst();\n\n    /**  \n     * Removes and returns the last element from this list. \n     *\n     * @return the last element from this list\n     */\n    public T removeLast();\n\n    /**  \n     * Removes and returns the specified element from this list. \n     *\n     * @param element the element to be removed from the list\n     */\n    public T remove(T element);\n\n    /**  \n     * Returns a reference to the first element in this list. \n     *\n     * @return a reference to the first element in this list\n     */\n    public T first();\n\n    /**  \n     * Returns a reference to the last element in this list. \n     *\n     * @return a reference to the last element in this list\n     */\n    public T last();\n\n    /**  \n     * Returns true if this list contains the specified target element. \n     *\n     * @param target the target that is being sought in the list\n     * @return true if the list contains this element\n     */\n    public boolean contains(T target);\n\n    /**  \n     * Returns true if this list contains no elements. \n     *\n     * @return true if this list contains no elements\n     */\n    public boolean isEmpty();\n\n    /**  \n     * Returns the number of elements in this list. \n     *\n     * @return the integer representation of number of elements in this list\n     */\n    public int size();\n\n    /**  \n     * Returns an iterator for the elements in this list. \n     *\n     * @return an iterator over the elements in this list\n     */\n    public Iterator&lt;T&gt; iterator();\n\n    /**  \n     * Returns a string representation of this list. \n     *\n     * @return a string representation of this list\n     */\n    public String toString();\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/QueueADT/","title":"QueueADT.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\n/**\n * QueueADT defines the interface to a queue collection.\n *\n * @author Java Foundation\n * @version 4.0\n */\npublic interface QueueADT&lt;T&gt;\n{\n    /**  \n     * Adds one element to the rear of this queue. \n     * @param element  the element to be added to the rear of the queue  \n     */\n    public void enqueue(T element);\n\n    /**  \n     * Removes and returns the element at the front of this queue.\n     * @return the element at the front of the queue\n     */\n    public T dequeue();\n\n    /**  \n     * Returns without removing the element at the front of this queue.\n     * @return the first element in the queue\n     */\n    public T first();\n\n    /**  \n     * Returns true if this queue contains no elements.\n     * @return true if this queue is empty\n     */\n    public boolean isEmpty();\n\n    /**  \n     * Returns the number of elements in this queue. \n     * @return the integer representation of the size of the queue\n     */\n    public int size();\n\n    /**  \n     * Returns a string representation of this queue. \n     * @return the string representation of the queue\n     */\n    public String toString();\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/StackADT/","title":"StackADT.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\n/**\n * Defines the interface to a stack collection.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface StackADT&lt;T&gt;\n{\n    /**  \n     * Adds the specified element to the top of this stack. \n     * @param element element to be pushed onto the stack\n     */\n    public void push(T element);\n\n    /**  \n     * Removes and returns the top element from this stack. \n     * @return the element removed from the stack\n     */\n    public T pop();\n\n    /**  \n     * Returns without removing the top element of this stack. \n     * @return the element on top of the stack\n     */\n    public T peek();\n\n    /**  \n     * Returns true if this stack contains no elements. \n     * @return true if the stack is empty\n     */\n    public boolean isEmpty();\n\n    /** \n     * Returns the number of elements in this stack. \n     * @return the number of elements in the stack\n     */\n    public int size();\n\n    /**  \n     * Returns a string representation of this stack. \n     * @return a string representation of the stack\n     */\n    public String toString();\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/UnorderedListADT/","title":"UnorderedListADT.java","text":"<pre><code>package projects.project9heaps.jsjf;\n\n/**\n * UnorderedListADT defines the interface to an unordered list collection. \n * Elements are stored in any order the user desires.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface UnorderedListADT&lt;T&gt; extends ListADT&lt;T&gt;\n{\n    /**  \n     * Adds the specified element to the front of this list. \n     *\n     * @param element the element to be added to the front of this list    \n     */\n    public void addToFront(T element);  \n\n    /**  \n     * Adds the specified element to the rear of this list. \n     *\n     * @param element the element to be added to the rear of this list    \n     */\n    public void addToRear(T element); \n\n    /**  \n     * Adds the specified element after the specified target. \n     *\n     * @param element the element to be added after the target\n     * @param target  the target is the item that the element will be added\n     *                after    \n     */\n    public void addAfter(T element, T target);\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/exceptions/","title":"Heaps - /jsjf/exceptions/ Project 9 - Index","text":"<ul> <li>ElementNotFoundException.java</li> <li>EmptyCollectionException.java</li> <li>NonComparableElementException.java</li> </ul>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/exceptions/ElementNotFoundException/","title":"ElementNotFoundException.java","text":"<pre><code>package projects.project9heaps.jsjf.exceptions;\n\n/**\n * ElementNotFoundException represents the situation in which a target element \n * is not present in a collection\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class ElementNotFoundException extends RuntimeException\n{\n    /**\n     * Sets up this exception with an appropriate message.\n     */\n    public ElementNotFoundException (String collection)\n    {\n        super (\"The target element is not in this \" + collection);\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/exceptions/EmptyCollectionException/","title":"EmptyCollectionException.java","text":"<pre><code>package projects.project9heaps.jsjf.exceptions;\n\n/**\n * Represents the situation in which a collection is empty.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class EmptyCollectionException extends RuntimeException\n{\n    /**\n     * Sets up this exception with an appropriate message.\n     * @param collection the name of the collection\n     */\n    public EmptyCollectionException (String collection)\n    {\n        super (\"The \" + collection + \" is empty.\");\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-14/project9heaps/jsjf/exceptions/NonComparableElementException/","title":"NonComparableElementException.java","text":"<pre><code>package projects.project9heaps.jsjf.exceptions;\n\n/**\n * NonComparableElementException  represents the situation in which an attempt \n * is made to add an element that is not comparable to an ordered collection\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class NonComparableElementException extends RuntimeException\n{\n    /**\n     * Sets up this exception with an appropriate message.\n     * \n     * @param collection  the exception message to deliver\n     */\n    public NonComparableElementException (String collection)\n    {\n        super (\"The \" + collection + \" requires Comparable elements.\");\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-15/","title":"Graphs - Index","text":"","boost":1},{"location":"csc205/module-15/#csc205-module-15","title":"CSC205 - Module 15","text":"","boost":1},{"location":"csc205/module-15/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-15/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-15/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-15/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-15/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-15/#frequently-asked-questions","title":"Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-16/","title":"Databases - Index","text":"","boost":1},{"location":"csc205/module-16/#csc205-module-17","title":"CSC205 - Module 17","text":"","boost":1},{"location":"csc205/module-16/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-16/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-16/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-16/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-16/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-16/#frequently-asked-questions","title":"Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-17/","title":"Final Exam Review - Index","text":"","boost":1},{"location":"csc205/module-17/#csc205-module-17","title":"CSC205 - Module 17","text":"","boost":1},{"location":"csc205/module-17/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-17/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-17/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-17/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-17/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-17/#frequently-asked-questions","title":"Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-2/","title":"Inheritance and Exceptions - Index","text":"","boost":1},{"location":"csc205/module-2/#csc205-module-2","title":"CSC205 - Module 2","text":"","boost":1},{"location":"csc205/module-2/#topics","title":"Topics","text":"<ul> <li>Inheritance</li> <li>extends keyword</li> <li>protected visibility modifier</li> <li>private vs. public vs. protected</li> <li>super reference</li> <li>overriding methods</li> <li>overloading vs. overriding</li> <li>creating a class hierarchy</li> <li>the Java Object class</li> <li>abstract classes</li> <li>abstract methods</li> <li>exceptions</li> <li>try-catch-finally</li> <li>verification vs.exception handling</li> <li>exception propagation</li> <li>throwing an exception</li> </ul>","boost":1},{"location":"csc205/module-2/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-2/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter 8 and 10</li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Section 1.1</li> <li>Section 1.2</li> <li>Section 1.3</li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-2/#notes","title":"Notes","text":"<ul> <li>Inheritance and Exceptions - Notes</li> </ul>","boost":1},{"location":"csc205/module-2/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<ul> <li>Inheritance and Exceptions - Frequently Asked Questions</li> </ul>","boost":1},{"location":"csc205/module-2/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>TODO</li> </ul>","boost":1},{"location":"csc205/module-2/#video-lectures","title":"Video Lectures","text":"<ul> <li>(15:10) CSC205 Lecture 2 - Inheritance and Exceptions</li> <li>(7:45) CSC205 Inheritance Code Example</li> </ul>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/","title":"Inheritance and Exceptions - Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#csc205-module-2","title":"CSC205 - Module 2","text":"","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-the-three-visibility-modifiers","title":"Question: What is the difference between the three visibility modifiers?","text":"<p>Public data and methods are accessible to any other class. The methods can be called and the data member changed without any control by the object itself. Private data and methods are only visible within the class. Protected members are public to subclasses and private to the rest of the world. (Note that this discussion omits what happens within packages - we will discuss that later.)</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-would-i-use-a-protected-member","title":"Question: When would I use a protected member?","text":"<p>Protected members allow child classes to treat members of a parent class as if they were members of the child class. While private members of the parent class are inherited by the child class, the child class cannot access them directly. This makes it easier to write the child class since you don't have to use accessor/mutator methods to modify parent class members. However, this does break encapsulation, though only a little bit since only child classes can access protected members - protected members are private to everyone else.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-are-protected-members-different-from-private-members","title":"Question: How are <code>protected</code> members different from <code>private</code> members?","text":"<p>The difference depends on who is trying to access the member. There is no difference between <code>protected</code> &amp; <code>private</code> members if you are accessing the <code>protected</code> member from a non-child class. However, child classes have full access to <code>protected</code> members, so if a child class is trying to access a member, then <code>protected</code> members are essentially the same as <code>public</code> members. <code>Protected</code> members are <code>public</code> to child classes and <code>private</code> to all other classes. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-do-protected-members-affect-the-parent-class","title":"Question: Do protected members affect the parent class?","text":"<p>Protected members are fully visible to any instance of the parent class (parent class object) or any child class (child object). Each object has its own copy, so they do not affect each other. In both cases, the protected member is treated like any other member of that class.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-if-two-child-objects-use-the-same-protected-member-of-the-parent-class","title":"Question: What if two child objects use the same protected member of the parent class?","text":"<p>This is not a problem, since each object gets its own copy of the protected members of the parent class. This is also true of the private and public members, though the child class cannot directly access the private members it inherits from the parent class. </p> <p>Note however that static members are in fact shared by all instances of a class, so in that case a modification to a static member in one object will update that member in all instances of that class, however this is irrespective of the visibility modifier of that member.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-a-public-class-and-a-private-class","title":"Question: What is the difference between a public class and a private class?","text":"<p>Public classes are the classes you are already familiar with. Public classes can also contain private classes which are simply classes defined inside the public class which are only available to the class in which they are contained. This is done when the private class is something useful to the public class, but which does not have any use outside that public class. We will see an example of this when we cover Linked Lists - we will create a private node class in the linked list class since the node objects are not useful outside a linked list.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-can-i-use-existing-classes-to-create-new-classes","title":"Question: How can I use existing classes to create new classes?","text":"<p>There are two primary ways to use existing classes to create new classes. The first is one you have likely seen before where one class contains a reference to an object of a different class as a data member. That is called composition, or containment. The second way is inheritance where a child class extends a parent class, including all the members of the parent class as part of itself. That is the focus of this module.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-meant-by-containment-or-composition","title":"Question: What is meant by containment (or composition)?","text":"<p>Containment (also called composition or aggregation) is when one class includes references to other objects as members. Those objects can be objects of a different class or even the current class. For example, an Account class could contain a reference to a Person to indicate who the owner of the account is. Furthermore, the Person object might contain a reference to an Address object. A Building object may also hold a reference to an Address object. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-is-containment-similar-to-how-an-object-can-have-private-members","title":"Question: Is containment similar to how an object can have private members?","text":"<p>Not exactly. Containment is when one object contains another object as a member. You can also think of it as being when an object is built using another object (or several objects). Whether those \"contained\" members are public or private is not relevant in this context, though in general any data member / attribute should be private. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-the-this-and-super-references","title":"Question: What is the difference between the \"this\" and \"super\" references?","text":"<p>The \"this\" reference refers to the current object. The \"super\" reference refers to the parent class. Suppose we have a constructor defined as below:</p> <pre><code>public MyClass(int a, String s) {\n    super(a);\n    this.s = s;\n}\n</code></pre> <p>The \"super\" reference is calling the parent class constructor (with a as a parameter) and the \"this\" reference is being used to differentiate between the member os of the current class and the parameter \"s\" of the constructor. If both the parent and child class define a variable with the same name (say for example myVar), then you can use super.myVar and this.myVar to differentiate between them while you wait for someone to come to their senses and stop with all the creation of the shadow variables. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-point-of-the-super-reference","title":"Question: What is the point of the super reference?","text":"<p>The super reference refers to the data members and methods of the parent class. So if a data member has the same name as a parent data member, you can still access the parent's data member through the super reference. The most common use of the super reference is to call the constructor of the parent class, which allows the parent class to still have control over how its data is initialized. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-should-you-use-super","title":"Question: When should you use super?","text":"<p>The <code>super</code> reference refers to the parts of the class inherited from the parent class. The main place you would use the <code>super</code> reference is in the constructor where you could call the parent class constructor like this; <code>super()</code>. You might want to call it with some additional parameters to set up the members inherited from the parent, such as <code>super(1, 9348)</code>. Without the parenthesis, <code>super</code> allows you to specify that you are referring to members inherited from the parent class, but that is only necessary in cases where you have shadowed a name from the parent class (meaning defined something with the same name both in the parent and child). Since you should try to avoid doing that, you should not usually have to use the <code>super</code> reference except to call the parent constructor. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-why-do-you-call-super-the-parent-class-constructor","title":"Question: Why do you call <code>super()</code> - the parent class  constructor?","text":"<p>Calling <code>super()</code> invokes the parent class constructor. The intention of the <code>super()</code> call is to allow the parent to use its own constructor to set up its own attributes. That way the child class does not have to set up those attributes. Since all classes you write are child classes (if no parent is specified then the class is a child of the Object class), you should generally include a call to the <code>super()</code> constructor in your </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-does-a-call-to-super-in-a-child-method-call-the-parents-version-of-the-same-method","title":"Question: Does a call to <code>super()</code> in a child method call the parent's version of the same method?","text":"<p>No - <code>super</code> itself is a reference to the parent class.  A call to <code>super()</code> only will call the constructor of the parent class. You can only call <code>super()</code> in the first line of the child's constructor.  If you are overriding a method called <code>doSomeStuff()</code> in the child class, then you would need to call <code>super.doSomeStuff()</code> in that method if you want to call the parent's version.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-point-of-the-object-class","title":"Question: What is the point of the Object class?","text":"<p>The <code>Object</code> class serves as the parent class for all classes that do not directly inherit from another class. This ensures that every Java class has a minimum common set of methods. It also becomes useful when we discuss polymorphism as we can treat any object as type <code>Object</code>.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-doesnt-inheritance-just-make-the-program-more-complicated","title":"Question: Doesn't inheritance just make the program more complicated?","text":"<p>It certainly can. But imagine a case where we have several different classes which only differ by a small amount. In that case, we can use inheritance to gather the common data &amp; methods together and share them between all the child classes. So understanding a certain class may be a bit more difficult since you need to also examine its parent class, but the program as a whole is much simpler since the common code is gathered in one place. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-often-is-inheritance-used","title":"Question: How often is inheritance used?","text":"<p>Inheritance is fairly common with any object-oriented programming language and Java is no exception. It can be used any time you are creating a class that is based on another class. Currently in industry it is probably used a bit too much in that for some projects the initial design step is to create a class hierarchy whether or not one is warranted. In an ideal design, inheritance is only used if the application calls for it - if you are doing something (such as characters in a game, different types of accounts, etc) where there is a clear inheritance relationship. It is important to keep in mind that inheritance is just a tool. You do not always have to use it - using aggregation (containment) is often a better choice. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-does-it-mean-that-for-any-problem-there-is-not-always-a-single-correct-class-hierarchy","title":"Question: What does it mean that for any problem there is not always a single correct class hierarchy?","text":"<p>Say you are writing a game and there are multiple types of vehicles available - cars, airplanes, boats, motorcycles, walking, rockets, canoes, etc. You could create a class hierarchy based on the size or capacity of the vehicles, whether the vehicles float, have wheels, or fly, or even based on what level the player has to be to operate the vehicles. So it depends on what your main goal is for using the class hierarchy. And in some cases interfaces may be the better choice (for example, wheeled/winged/floating are often better represented with interfaces). </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-can-you-differentiate-the-parent-class-from-the-child-class","title":"Question: How can you differentiate the parent class from the child class?","text":"<p>All classes are child classes since when they do not have an <code>extends</code> clause then they implicitly extend the <code>Object</code> class.  The easiest way to tell them apart is that the class child will have an <code>extends</code> statement in its class header, explicitly stating that it is a child of its parent class.  For example, suppose we have the following class declarations:</p> <pre><code>public CollegeStudent extends Student {\n    ...// we don't care how this class is implemented for this example\n}\npublic PartTimeStudent extends CollegeStudent {\n    ...// we don't care how this class is implemented for this example\n}\n</code></pre> <p>These two classes, <code>CollegeStudent</code> &amp; <code>PartTimeStudent</code>, are related by inheritance with <code>CollegeStudent</code> being the parent class and <code>PartTimeStudent</code> being the child class. The fact that <code>CollegeStudent</code> also extends <code>Student</code> indicates that <code>Student</code> means that <code>CollegeStudent</code> is a child class (of student) in addition to a parent class (of <code>PartTimeStudent</code>).</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-is-inheritance-different-from-defining-a-private-class-inside-another-class","title":"Question: How is inheritance different from defining a private class inside another class?","text":"<p>From the standpoint of the class there is not a whole lot of difference other than the visibility modifiers, but through inheritance multiple classes can inherit the attributes and methods of a class. If that same class is defined as a private class it only can be included inside a single class.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-does-a-class-inherit-the-attributes-methods-of-its-parent-if-the-parent-is-a-child-class","title":"Question: Does a class inherit the attributes &amp; methods of its parent if the parent is a child class?","text":"<p>The child class inherits all the attributes and methods of its parent class, including any that are inherited by the parent class.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-with-a-narrowing-conversion-what-data-does-the-child-reference-have-access-to","title":"Question: With a narrowing conversion, what data does the child reference have access to?","text":"<p>A narrowing conversion refers to a situation where you have a child class object reference that is referring to a parent class object. In this case, the child reference thinks it knows about the child references, but in actuality only the public members of the parent object are available to it. So, a call to a child method would be allowed by the compiler, but would cause a run-time error since that method would not exist in the object being referenced.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-extending-a-class-by-inheritance-does-that-make-a-single-class-or-are-there-two-classes","title":"Question: When extending a class by inheritance does that make a single class or are there two classes?","text":"<p>Think of extending a class by inheritance as similar to purchasing a premium version of a game that includes an expansion pack. The parent is the original game and the child includes the original game and an expansion pack. So there are two separate options (the parent and the child) but if you choose the child you get both. So, inheritance results in two classes (the parent and child) but there is part of both classes that is identical.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-does-shadowing-mean","title":"Question: What does shadowing mean?","text":"<p>Shadowing occurs when a child class declares a variable with the same name as a variable in the parent class. So there are two copies of the variable with the same name - one declared in the child, one declared in the parent. The parent copy is essentially invisible to the child (even if it is public or protected) since any time the variable name is used it will refer to the child variable. To access the parent variable, the super reference would need to be used, for example <code>super.myShadow</code>.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-do-shadowed-members-relate-to-parentchild-members","title":"Question: How do shadowed members relate to parent/child members?","text":"<p>A shadowed member is one where both the child and the parent have an attribute with the same name. You should avoid shadow members. Shadowed members \"collide\" in their naming. Suppose you have a <code>Parent</code> &amp; <code>Child</code> class that both define a data member called <code>sidewalk</code>. If you have a  variable called <code>joe</code>, then <code>joe.sidewalk</code> will refer to the child class's <code>sidewalk</code> variable - there is no way for variable <code>joe</code> to reference the parent class's <code>sidewalk</code> variable, even if it is public because it is hidden by the child class member.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-is-there-a-limit-to-inheritance-is-there-a-maximum-number-of-classes-in-a-class-hierarchy","title":"Question: Is there a limit to inheritance?  Is there a maximum number of classes in a class hierarchy?","text":"<p>A class can inherit from at most one other class. However, the class hierarchy can be as deep as you want it to be - in that case the bottommost child class inherits everything from its parent, grandparent, and so on. Also there is no technical limit to how many classes inherit from a parent class, though sometimes having inheritance too deep can result in code that is difficult to understand.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-if-the-class-hierarchy-goes-on-for-multiple-levels-isnt-that-the-same-as-multiple-inheritance-since-a-class-inherits-more-than-one-other-class","title":"Question: If the class hierarchy goes on for multiple levels, isn't that the same as multiple inheritance since a class inherits more than one other class?","text":"<p>No. Each class can inherit from a single other class. The parent class may inherit from other classes, but the inherited methods and attributes are still a part of the child class.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-can-an-overridden-function-deal-with-data-that-has-been-added-to-the-child-class","title":"Question: How can an overridden function deal with data that has been added to the child class?","text":"<p>You would work with the additional member data in the overridden function the same way you would with any other data in the class. In addition, you could use the super reference to call the parent's function to allow it to deal with any inherited data as long as the parent is doing something you also want the child to be doing. For example, we usually call the super class constructor to allow the parent class to handle the data members it provides. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#uestion-what-is-the-difference-between-overloading-and-overriding","title":"uestion: What is the difference between overloading and overriding?","text":"<p>With overloading, the methods are usually in the same class and must have a different signature. Overloading is used when the same method will work with different types or a different number of parameters.</p> <p>With overriding, the methods are in a different class and must have the same signature. Overriding is used when the child class wants to implement a method differently from the parent.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-do-we-always-have-to-override-equals-and-tostring","title":"Question: Do we always have to override <code>equals()</code> and <code>toString()</code>?","text":"<p>In most cases, you will want to override toString() so you are able to print out a string representation of your class. You would override equals() when you want to be able to check equality between two objects of the same type. For example, if you have a student record class you could check that the student ID's are equal. However, you don't always have to override either of the methods - the application will dictate whether it is useful or not. But if you don't override them then you get the default implementation which is typically not what you want.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-purpose-of-the-override-tag","title":"Question: What is the purpose of the <code>@Override</code> tag?","text":"<p>The <code>@Override</code> tag is an optional tag that indicates that a method is overriding a method in the parent class or interface. It has two main purposes. First, it is a way for the programmer to document their intent. Second, and most helpfully, it indicates to the compiler that the method is intended to override a method in the parent class or interface. The compiler will then try to find a corresponding method in the parent class or interface and will throw an error if no method with a matching signature is required.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-is-the-override-tag-required","title":"Question: Is the <code>@Override</code> tag required?","text":"<p>The <code>@Override</code> tag is not required, but it is a good idea to use it anytime you override a method. If you accidentally change the method signature (so that it no longer has the same signature as a parent method) you will get a compiler warning. It is always best to use the compiler to help you find your errors!</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-are-inheritance-and-composition-different","title":"Question: How are inheritance and composition different?","text":"<p>In both cases the new classes share data and methods with the original class. With inheritance (\"is-a\"), the methods and data of the parent class become methods and data of the child class. This allows the child class to be treated like the parent type. With composition (\"has-a\"), the original class is a data member of the new class and only the new class has access to the (public) data members and methods of the original class. This allows the new class to limit access to the original class, so even if the \"is-a\" relationship holds it may be best to use composition.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-is-a-inheritance-and-has-a-containment","title":"Question: What is the difference between \"is-a\" (inheritance) and \"has-a\" (containment)?","text":"<p>Suppose you have a class hierarchy of Trucks. A Ford F-150 \"is-a\" truck as is a Dodge Ram. So the F-150 &amp; Ram have a \"is-a\" relationship with Trucks. May parts go into the creation of a truck, such as a steering wheel, an engine, seats, etc. So, any truck will have a \"has-a\" relationship with the steering wheel object, the seat object, and so forth since the truck will contain those things inside it. To summarize, a Ford F-150 \"is-a\" truck and \"has-a\" steering wheel.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-would-you-want-to-use-inheritance-if-you-dont-have-an-is-a-relation","title":"Question: When would you want to use inheritance if you don't have an \"is-a\" relation?","text":"<p>If the parent class implements all the methods you want then using inheritance lets the child class have all the parent methods by default. If you use containment in this case you need to have a method in the child class that calls the parent method for each method you want to use. This is a bit of a misuse of object-oriented principles, but it is possible.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-do-you-have-to-use-inheritance-when-would-you-not-use-inheritance","title":"Question: Do you have to use inheritance?  When would you not use inheritance?","text":"<p>You don't have to use inheritance at all. You should only use it when there is a well-defined class hierarchy that makes sense for the problem you are trying to solve. Inheritance is just one tool in your programming toolkit. Use it when it makes sense, but you shouldn't feel like you have to use it. There are billions of lines of code in use today that don't use inheritance at all.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-an-abstract-class","title":"Question: What is an abstract class?","text":"<p>An abstract class serves as a placeholder in the class hierarchy. It cannot be instantiated, but other classes can inherit from it. It can have data members and implemented methods that would be passed on to child classes, but it can also have abstract methods that are not implemented but that must instead be implemented in a child class.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-an-abstract-class-have-variables-implemented-methods","title":"Question: Can an abstract class have variables &amp; implemented methods?","text":"<p>Yes.  An abstract class can contain variables, constants, and fully implemented methods. There is no requirement for it to have any abstract methods, though of course those can be included as well. Note that the <code>abstract</code> keyword in the class header is what indicates that the class is abstract, not the presence of abstract methods.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-purpose-does-an-abstract-class-serve-when-we-just-have-a-regular-class","title":"Question: What purpose does an abstract class serve when we just have a regular class?","text":"<p>You don't have to make any class abstract - that is up to you. However, since an abstract class is intended as a placeholder and not something that you would instantiate objects of, making a class abstract prevents it from being instantiated accidentally. It is also an indicator to someone looking at your code that the class is not intended to be final - it should be extended before it is used. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-you-use-a-regular-class-instead-of-an-abstract-class","title":"Question: Can you use a regular class instead of an abstract class?","text":"<p>Yes, but then the abstract class cannot have any abstract methods, and that is one of the benefits of an abstract class. The point of abstract methods is to force child classes to define certain methods, but it leaves the specific implementation up to the child class. With a regular class, the child class can override a method, but there is no requirement that they do so unlike with an abstract class. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-benefit-of-not-allowing-an-abstract-class-to-be-instantiated","title":"Question: What is the benefit of not allowing an abstract class to be instantiated?","text":"<p>An abstract class represents an <code>abstract</code> concept, so there is no reason to instantiate one. You are not allowed to instantiate one because there would never be a reason to - the assumption is that any attempt to do so would be a bug. For example, suppose you were writing a game and you had an abstract GameCharacter class. You would never want to instantiate a GameCharacter - how would you know what skills they should have or what power they should have?  Instead, you could have Archer and Wizard classes that extend GameCharacter. They would have to implement all the abstract methods of GameCharacter and you would know what sort of skills each class would have.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-is-an-abstract-method-useful","title":"Question: When is an abstract method useful?","text":"<p>An abstract method is useful any time you want to force a child class to implement a method. For example, suppose you are writing a game and you have several classes of characters. Each character needs to be able to move and act. You could have a parent GameCharacter class that had two abstract methods - move() and act(). Then each character would have its own class that was a child class of GameCharacter. Each character could have whatever methods it needed, but they would all be forced to implement move() and act(). This makes it easier to work with characters in a general way (we will see examples of this when we talk about polymorphism).</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-do-i-have-to-use-abstract-classes","title":"Question: Do I have to use abstract classes?","text":"<p>No. You don't have to do anything. Abstract classes are just a tool - use them when they make sense, and don't use them when they don't provide any value. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-does-the-root-class-of-a-class-hierarchy-have-to-be-abstract","title":"Question: Does the root class of a class hierarchy have to be abstract?","text":"<p>No. Suppose you have a class you use that you later decide to extend. You may still want the existing (parent) class even after you create child classes that inherit from it. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-one-abstract-class-extend-another","title":"Question: Can one abstract class extend another?","text":"<p>Yes. It often makes sense for one abstract class to extend another if it represents a more specific, yet still abstract, concept in the class hierarchy. For example, Animal -&gt; Reptile -&gt; Rattlesnake. Here Animal and Reptile should both be abstract classes. In addition, abstract classes can implement interfaces.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-are-some-real-world-examples-of-when-you-would-want-to-have-an-abstract-class","title":"Question: What are some real world examples of when you would want to have an abstract class?","text":"<p>In addition to the game character example above, here are some other real-world examples:</p> Abstract Class Child Classes <code>Account</code> <code>CheckingAccount</code>, <code>SavingsAccount</code>, <code>InvestmentAccount</code> <code>Window</code> (in a GUI) <code>AlertWindow</code>, <code>TerminalWindow</code>, <code>TextWindow</code> <code>Event</code> (in an operating system or application) <code>MouseClick</code>, <code>SwipeUp</code>, <code>AudioInput</code> <code>Fruit</code> <code>Apple</code>, <code>Banana</code>, <code>Mango</code>, <code>Pineapple</code>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-are-some-examples-of-abstract-methods","title":"Question: What are some examples of abstract methods?","text":"<p>Suppose we had an <code>Account</code> class. The different types of account would need deposit &amp; withdrawal methods. Since the specifics of the method would be dependent on what the child class is implementing, those methods could be abstract methods in the <code>Account</code> class. Or for a <code>Window</code>  class, there could be abstract methods called resize and close so that any class derived from Window  would have to implement those methods. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-point-of-exceptions","title":"Question: What is the point of exceptions?","text":"<p>Exceptions allow the programmer to handle extraordinary cases without the program crashing. In a lot of cases, the same result could be achieved by checking that everything is ok before we execute code. But exceptions allow us to handle cases we don't foresee after they happen. They also can lead to cleaner code since one try block can handle multiple exceptions. It is sometimes easier to ask forgiveness (exceptions) than permission (pre-checking). One example would be if you prompt the user for a filename to read. If the file doesn't exist an exception is thrown. Handling that exception lets you prompt the user for better input instead of having the program crash.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-why-wouldnt-we-use-if-statements-instead-of-exceptions","title":"Question: Why wouldn't we use if statements instead of exceptions?","text":"<p>For many error handling situations, if statements are fine and are more efficient than using an exception. For example, if you want to check that an entered number is in a certain range, or that a method returned successfully then using an if statement or some other mechanism other than an exception will work fine. However, for cases where the problem is more fundamental than a bad value, such as a character being entered instead of a number, or something else catastrophic happening that prevented a method from executing then exception handling will help you recover.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-is-there-a-case-where-we-would-not-want-to-catch-an-exception","title":"Question: Is there a case where we would not want to catch an exception?","text":"<p>Yes - anytime you want your program to crash if something unexpected happens. For example, suppose you are writing software to control a dangerous piece of hardware (such as a chainsaw, a bulldozer, or a self-chopping ax). There may be exceptions you can catch and handle, but if an unexpected exception occurs that you have not anticipated then you likely want to stop (crash) immediately to prevent possible real-world damage. Again in those cases the best thing to do is likely to catch the exception then gracefully exit (think in a case for an amusement park ride where riders are suspended upside down during the ride), but there are situations where immediately crashing is the best outcome. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-do-i-need-to-create-my-own-exceptions","title":"Question: When do I need to create my own exceptions?","text":"<p>If the built-in exceptions work for you, then just use those. Otherwise, create exceptions for any out-of-the-ordinary situation you want client code to handle.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-do-i-need-to-memorize-the-exception-hierarchy","title":"Question: Do I need to memorize the exception hierarchy?","text":"<p>No - you will just want to review it and be aware of what is there and know some of the most common ones (stack overflow, arithmetic exceptions, etc). </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-does-a-try-catch-finally-block-look-like","title":"Question: What does a try-catch-finally block look like?","text":"<pre><code>try {\n    //code that could throw an exception\n}\ncatch (ArithmeticException e) {\n    // Handle exception if it is an ArithmeticException\n}\ncatch (Exception e) {\n    // Handle any other exception\n}\nfinally {\n    // This code gets executed whether or not an exception\n    //   is thrown or if the try block succeeds \n}\n</code></pre>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-use-for-the-e-variable-in-the-catch-statement","title":"Question: What is the use for the \"e\" variable in the catch statement.","text":"<p><code>e</code> is the Exception object. There are multiple methods and attributes that you can get from that method to provide more information when that exception is caught.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-do-i-have-to-catch-a-specific-exception-what-if-i-want-to-handle-all-exceptions-in-one-catch","title":"Question: Do I have to catch a specific exception?  What if I want to handle all exceptions in one catch?","text":"<p>In general, you should catch as specific an exception as possible to ensure you handle it properly. For example, you would want to handle a divide-by-0 exception (<code>ArithmeticException</code>) differently from an exception thrown because the user entered the wrong type of input (an <code>InputMismatchException</code>) perhaps. But, you can write a catch for any exception by catching an <code>Exception</code> object. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-should-go-in-a-try-block-and-catch-statement","title":"Question: What should go in a try block and catch statement?","text":"<p>Any code that might throw an exception. Or any code that you don't know whether or not it will throw an exception. You can catch any exception you know might be thrown. If you aren't sure, you can throw a more general exception higher up on the exception hierarchy. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-point-of-the-finally-block","title":"Question: What is the point of the finally block?","text":"<p>The finally block allows the programmer to specify code that will be executed whether or not there is an exception. This is helpful to allow the programmer to do any clean up required such as closing system resources like files or close database connections. The only time the finally block would not get executed is if a fatal exception happened at the runtime level or if there was a system exit call in the catch block.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-is-the-finally-block-different-from-just-having-code-at-the-end-of-the-try-catch-block","title":"Question: How is the finally block different from just having code at the end of the try-catch block?","text":"<p>The finally block will always execute after the try-catch block executes. If there is a <code>return</code> or <code>continue</code> statement in the catch block then any code after the <code>try-catch</code> block will not execute if an exception is caught. Adding the code to a <code>finally</code> block guarantees that it will execute even in cases when the control flow would mean that any code after the <code>try-catch</code> was not executed. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-is-the-finally-block-required","title":"Question: Is the finally block required?","text":"<p>No, the finally block is optional.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-is-there-an-error-that-any-exception-cannot-catch","title":"Question: Is there an error that any exception cannot catch?","text":"<p>Certain catastrophic errors cannot be caught, such as a situation where the Java Virtual Machine (JVM) crashes or anything that causes physical damage to the computer. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-point-of-checked-exceptions","title":"Question: What is the point of checked exceptions?","text":"<p>Checked exceptions are checked at compile time so the compiler forces you to handle them. If you write code that includes code that could throw a checked exception then you must either handle the exception with a try-catch block or specify in the method signature that the method throws that checked exception. Checked exceptions are used for cases where the code using your method/class can be reasonably expected to recover from whatever caused the exception. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-does-it-mean-to-rethrow-an-exception","title":"Question: What does it mean to rethrow an exception?","text":"<p>It means that you throw an exception after you catch it. Sometimes you want the caller to know what exception was thrown, but you need to do some cleanup yourself. In that case, you wouldn't want to let the exception propagate, as that would prevent you from doing your cleanup, so you could catch the exception, do what you need to do, then (re)throw the exception.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-purpose-of-a-throws-clause-in-a-method","title":"Question: What is the purpose of a throws clause in a method?","text":"<p>A <code>throws</code> clause looks like this:</p> <pre><code>public void myMethod() throws NullPointerException\n</code></pre> <p>and indicates to anyone calling <code>myMethod()</code> that <code>myMethod()</code> may throw a <code>NullPointerException</code>. In the case of checked exceptions, a <code>throws</code> clause is required if the method may throw an checked exception that is not handled within the method.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-checked-unchecked-exceptions","title":"Question: What is the difference between checked &amp; unchecked exceptions?","text":"<p>The compiler will verify that all checked exceptions are handled somehow - either with a <code>try..catch</code> block or by including a <code>throws</code> clause in the method signature. If a method includes a <code>throws</code> clause that lets callers know that an exception may occur which they must handle (or include their own <code>throws</code> clause). Unchecked exceptions are not verified by the compiler.  The intention of checked exceptions is to ensure that exceptions are properly handled by the programmer. Once the program is executing there is no difference between checked &amp; unchecked exceptions. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-would-we-throw-an-exception","title":"Question: When would we throw an exception?","text":"<p>You can throw an exception any time some extraordinary problem occurs. For example, suppose we have a \"bag of things\" class with a \"put\" method. If the bag is full, then we can't \"put\" anything in it, so in that case we could choose to throw an exception. We can either throw an existing exception or create a new exception and throw that. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-should-i-use-exceptions-to-validate-input","title":"Question: Should I use exceptions to validate input?","text":"<p>It is a good idea to catch any exceptions when getting input. For example, a user may enter an input of the wrong type, say a character instead of an integer.</p> <p>You could also use an exception to catch invalid values that are input - say a phone number that has too many digits, though in that case you would need to define your own exception to throw. </p> <p>It is usually simpler to just validate the value and re-prompt until you get a valid input.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-we-create-our-own-exception-how-would-you-do-that","title":"Question: Can we create our own exception?  How would you do that?","text":"<p>You can create a new exception by extending an existing exception. You can add checks in your code for whatever the exception is then throw the exception when it happens.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-meant-by-exception-propagation-how-does-exception-propagation-work","title":"Question: What is meant by exception propagation?  /  How does exception propagation work?","text":"<p>If an exception is not caught, then the current method exists and the exception is propagated to the calling method. This process repeats until the exception is caught or, if the exception reaches the main method and it is not caught there, the program exits.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-do-i-know-where-to-catch-an-exception","title":"Question: How do I know where to catch an exception?","text":"<p>It is a design decision whether to handle an exception in a particular method or force any caller to handle.. You can indicate that a method does not catch an exception by adding a throws clause to the method declaration. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-try-catch-blocks-be-nested","title":"Question: Can try-catch blocks be nested?","text":"<p>Yes. For example, suppose you have a program that needs to keep running no matter what. You might have a try-catch around your entire program logic that catches a general Exception to ensure that it keeps running. Inside that outer try block you may have other exceptions you want to catch and recover from, for example a resource is unavailable or you get bad input. You can nest a try-catch statement so that you deal with those where they happen.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-you-catch-exceptions-outside-the-main-method","title":"Question: Can you catch exceptions outside the main() method?","text":"<p>You can catch exceptions anywhere in your code. Though keep in mind that <code>main()</code> is the entry point of your program so technically all of your code is part of <code>main()</code>.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-do-we-know-what-exception-to-catch","title":"Question: How do we know what exception to catch?","text":"<p>You can look at the Java exception hierarchy to see which ones are already defined and which ones might be thrown. You can also give your program input which you think might cause an exception and take note of what exception gets thrown when you run your program. You can catch an <code>Exception</code> object, which will handle any exception that is thrown, though you should be careful doing that since it may squash important information about bugs in your program. Also keep in mind that you can catch multiple types of exceptions by using multiple catch blocks. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-a-run-time-error-and-runtimeexceptions","title":"Question: What is the difference between a run time error and <code>RuntimeExceptions</code>?","text":"<p>A run time error is any error that happens during run time due to a bug in the program. Many run time errors, such as using an invalid array index or division by zero, will result in a <code>RuntimeException</code> being thrown. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-exceptions-be-caught-outside-of-the-main-method","title":"Question: Can exceptions be caught outside of the <code>main()</code> method?","text":"<p>Exceptions can be caught where they are thrown. If they are not caught when they occur then the exception propagates to the calling function.  </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-autocloseable","title":"Question: What is <code>AutoCloseable</code>?","text":"<p><code>AutoCloseable</code> is an interface that allows an object to be handled by a try-with-resources block. It contains a single method:</p> <pre><code>void close();\n</code></pre> <p>to ensure that the try-with-resources block is able to call the close method for the object when the block is complete.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-why-would-i-want-to-create-a-class-that-implements-autocloseable","title":"Question: Why would I want to create a class that implements <code>AutoCloseable</code>?","text":"<p>You would want to implement a the <code>AutoCloseable</code> interface anytime you have a class that uses resources (eg. a <code>Scanner</code> or network sockets) you want to be usable with a try-with-resources block.  When objects of classes that implement the <code>AutoCloseable</code> interface are used in a try-with-resources block, the <code>close()</code> method is called when the object goes out of scope.  This means the object is able to clean up after itself (freeing/closing resources) without the client explicitly having to close it.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/","title":"Inheritance and Exceptions - Notes","text":"","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#csc205-module-2","title":"CSC205 - Module 2","text":"","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#containment","title":"Containment","text":"<p>One of the powerful features of object-oriented programming is how you can reuse existing objects. Up to this point,  you have created classes through aggregation - your classes have contained members of other classes or primitive types. If <code>Object A</code> contains an object reference variable of type <code>Object B</code> then we say that <code>A</code> contains <code>B</code>. We use containment when a \"has-a\" relationship exists between two classes. For example, a book has an author, a city has a mayor, a person has a name, and so on. In the code below, we define a class that we can use to manage characters in a game. Each character has a name, strength, and health. We would then add methods to update the characters strength and health as the game was played.</p> <pre><code>public class GameCharacter {\n    private String name;\n    private int strength;\n    private int health;\n\n    // methods go here\n}\n</code></pre>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#inheritance","title":"Inheritance","text":"<p>In addition to containment, object-oriented programming languages allow us to associate classes together using inheritance where one class inherits the methods and data of another class. Inheritance allows a programmer to reuse an existing class (the parent / super / base class). The new class is called the child / sub / derived class. The child can then define changes to the parent class. Inheritance is used when an \"is-a\" relationship exists between two classes.</p> <p>The following diagram has 3 examples of inheritance. Notice how, for each of these, you could say the child class \"is-a\" parent class.</p> <pre><code>flowchart BT\n    Airplane --&gt; Vehicle\n    GasGiant --&gt; Planet\n    Platypus --&gt; Mammal</code></pre> <p>We could instantiate an instance of each child class as follows:</p> <pre><code>Airplane flight = new Airplane(\"Boeing\", 747, \"VH-OJL\");\nGasGiant destination = new GasGiant(\"Saturn\");\nPlatypus secrentAgent = new Platypus(\"Perry\");\n</code></pre> <p>Note that the child class is not a proper noun, but the instantiation includes a proper noun. Also, in each case, the variable name refers to how the object will be used in the program.</p> <p>The derived class can do any or all of the following: - Add new variables - Add new methods - Change existing methods by overriding - Have a new name and otherwise be identical to the parent class</p> <p>Java uses the extends keyword to indicate one class is inheriting from another. Java permits a class to inherit from only one other class. Recall that the super reference refers to the parent class. The most common use is to call the parent's constructor from the child class - <code>super()</code>. Java requires the call to the parent\u2019s constructor (if there is one) to be the first line of the constructor.</p> <p>In the code below, we define a class that inherits from the GameCharacter class we saw above. The Wizard class extends GameCharacter, so it has name, health, and strength members that it inherits. It also adds an array of spells.</p> <p><pre><code>public class Wizard extends GameCharacter {\n\n    private Spell spells[];\n\n    // methods go here\n}\n</code></pre> Notice that the Wizard class is associated to GameCharacter through inheritance (a Wizard \"is-a\" GameCharacter) and to Spell through containment (a Wizard \"has-a\" array of spells)</p> <p>Inheritance provides many benefits. It eliminates the need to re-implement the same methods multiple times. Any changes to a parent class are instantly propagated to the child classes. Abstract classes (which we will cover next) can serve as a blueprint for child classes to reduce development time.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#inheritance-vs-containment","title":"Inheritance vs. Containment","text":"<p>Use inheritance when there is an \"is-a\" relationship between the two classes and you want to reuse a lot of the parent class\u2019s members. Use containment when there is a \"has-a\" relationship. Think of a <code>Car</code> class which could inherit from <code>Vehicle</code> and use its <code>start</code>, <code>steer</code>, and <code>brake</code> methods. It could also contain <code>Tire</code> (hopefully 4!), <code>Engine</code>, and <code>SteeringWheel</code> classes, among others.</p> Object Relationship Object Computer has-a CPU Rocket has-a Engine Song has-a Title Old MacDonald has-a Farm House has-a Den Square is-a Shape Kitchen is-a Room MacBook is-a Computer Zilog Z8000 is-a CPU Grasshopper is-a Insect <p>Suppose we want to create a <code>Sedan</code> class. A sedan \"is-a\" car, so it would extend a <code>Car</code> class. A sedan has 4 doors and a trunk, so it would contain those as members (in addition to elements like 4 wheels, a transmission, and other members it would get from <code>Car</code>). So the (partial) class definition would look something like this:</p> <pre><code>public class Sedan extends Car // Sedan \"is-a\" car {\n\n    private int trunk;       // Sedan \"has-a\" trunk\n    private Door doors[4];   // Sedan \"has-a\" set of 4 doors\n}\n</code></pre> <p>To summarize, the Sedan class would inherit from Car since a sedan is-a car, and it would contain 4 doors and a trunk since a sedan has-a trunk and has-a set of 4 doors.</p> <p>Note that there are exceptions to the is-a and has-a rules. Even if there is not a clear is-a relationship you may want to use inheritance if the child class needs most of the parent class's methods. You may want to use containment even if there is not a has-a relationship if you want to change access to a parent class's members. For example, suppose you have a <code>Backpack</code> class with a <code>public open()</code> method - maybe you want to use containment so that you can create your own <code>private open()</code> method that calls the <code>Backpack.open()</code> method.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#special-references-this-and-super","title":"Special References - <code>this</code> and <code>super</code>","text":"<p>Java objects contain two special references. The \"this\" reference refers to the object itself. It allows an object to refer to itself, such as calling another overloaded constructor or referring to its members when they have been shadowed by a local variable name or parameter. This reference can be useful to make methods more clear, especially when another object of the same type is involved, such as when a class has a method that takes an object of that same class as a parameter (as with <code>compareTo</code>).</p> <p>The \"super\" reference refers to the parent class of an object. The super reference can be used to call the parent class's constructor (always a good idea!). For example, in the example below, from the last module's notes, we call the <code>Account</code> class parent constructor:</p> <pre><code>public Account(String name, int credits) {\n        super();\n        this.name = name;\n        this.level = credits;\n        this.accountNumber = generateAccountNumber();\n}\n</code></pre> <p>The super constructor must be called in the first line of code in the constructor or else not at all.</p> <p>It can also be used if both the parent class and the child class have a member with the same name (which is not good class design). </p> <p>Note that neither this nor super can be used in a static method since they refer to a specific instance. </p> <p>The diagram below demonstrates how these special references work. The <code>super</code> reference can be used to access (public or protected) members of the parent class. The <code>this</code> reference can be used to access all members of the child class except for private members and shadowed members of the parent class. If we have shadowed members, for example if both the parent and child classes declare a variable called <code>MyNumber</code>, then there are two copies of the <code>MyNumber</code> in every object of the child class - one from the parent class and one from the child class. You can see how this can only reference the <code>MyNumber</code> from the child class, but we can use super to refer to the <code>MyNumber</code> from the parent class. </p> \"this\" Members \"super\"  Yes Parent Class Members  Yes  Yes Shadowed Members  Yes  Yes Child Class Members   No <p>However, to reiterate - shadowed members are a bad thing and should be avoided unless absolutely necessary. And it probably isn\u2019t absolutely necessary, so do not do it.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#visibility-modifiers","title":"Visibility Modifiers","text":"<p>In Java, class members are private by default. Private data and methods in the parent class cannot be accessed (directly) by the child class. The protected modifier makes class members \"public\" to derived classes and \"private\" to everything else. Object-oriented purists will argue (correctly) that the protected modifier breaks encapsulation, but others will argue (also correctly) that it only breaks encapsulation a little bit and using protected members results in cleaner code syntax than calling accessors and mutators on parent class data. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#overriding-methods","title":"Overriding Methods","text":"<p>A child can override (redefine) the parent class's methods. This can be useful when the parent method doesn't work for the child or if the child needs to do additional work. To override a method, the method signature in the child class must be the same. The type of the object executing the method determines which version is invoked. Parent methods can still be invoked using the super reference. Members which are modified with the final modifier cannot be overwritten.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#the-override-annotation","title":"The <code>@Override</code> Annotation","text":"<p>When overriding a method, it is good practice to use the <code>@Override</code> annotation to indicate to the compiler that the method is intended to override a method in a parent class (or in an interface, which we will cover in the next module). For example, the <code>toString</code> should always be intended to override the <code>Object.toString</code> method (since every class inherits from the O`bject class) so we add the annotation as follows:</p> <pre><code>@Override\npublic String toString() {\n    return \"Task [priority=\" + priority + \", name=\" + name + \"]\";\n}\n</code></pre> <p>The annotation simply tells the compiler that <code>toString</code> is overriding a method. Eclipse adds the <code>@Override</code> annotation when you have it automatically generate inherited abstract methods. The annotation has no impact on how the program runs. However, it does help the programmer avoid bugs by indicating when a method that is intended to override another method is not actually overriding anything. For example, if we added a parameter to the toString method above we would get a compiler error.</p> <p></p> <p>This can prevent hard-to-find bugs where the wrong method is being called. </p> <p>To reiterate, you can override a method with or without using the <code>@Override</code> annotation. We would be overriding the <code>toString</code> in the example above whether we used the annotation or not. The annotation is just there to let the compiler help you ensure that methods that are intended to be overriding other methods actually do so. You should always get in the practice of using the <code>@Override</code> annotation when you are overriding methods.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#overloading-vs-overriding","title":"Overloading vs Overriding","text":"<p>We saw in the previous module how overloading works. Overloading and overriding are often confused. Keep in mind the following:</p> <ul> <li>Overloading<ul> <li>Deals with members in the same class</li> <li>The methods have the same name, but different signatures</li> <li>Used when methods have a similar operation but different parameters</li> </ul> </li> <li>Overriding<ul> <li>Deals with members in different classes</li> <li>The methods have the same name and same signature</li> <li>Used when methods have a similar operation with different object types</li> </ul> </li> </ul> <p>As an example, suppose we have a parent classed defined as below:</p> <pre><code>public class Base {\n\n    protected int a;\n\n    public void change(int x) {\n        a = x;\n    }\n\n    public void print() {\n        System.out.println(\"BASE: a=\" + a);\n    }\n\n}\n</code></pre> <p>And suppose we have a child class defined as below:</p> <pre><code>public class Derived extends Base{\n\n    private String s;\n\n    public void change(String y) {\n        s = y;\n    }\n\n    public void change(int x, String y) {\n        a = x;\n        s = y;\n    }\n\n    public void print() {\n        System.out.println(\"DERIVED: a=\" + a + \" and s=\" + s);\n    }\n\n}\n</code></pre> <p>Here, the Derived class overrides the print method since the signature is the same as in the <code>Base</code> class. The change method is overloaded. In fact, there are 3 versions of change in the <code>Derived</code> class:</p> <p><pre><code>    public void change(int x)\n</code></pre> which <code>Derived</code> inherits from the <code>Base</code> class and</p> <pre><code>    public void change(String y)\n    public void change(int x, String y)\n</code></pre> <p>which <code>Derived</code> overloads. So - <code>print()</code> is overridden, and <code>change()</code> is overloaded in this example.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#class-hierarchies","title":"Class Hierarchies","text":"<p>Classes related by inheritance can be arranged into class hierarchies. For example, here is an example class hierarchy of animals:</p> <pre><code>flowchart TD\n    B[Animal]\n    B--&gt;C[Reptile]\n    B--&gt;D[Mammal]\n    B--&gt;E[Insect]\n    C--&gt;F[Snake]\n    C--&gt;G[FlyingDragon]\n    D--&gt;H[Horse]\n    D--&gt;I[Bat]\n    E--&gt;J[Ant]\n    E--&gt;K[DragonFly]</code></pre> <p>Each child inherits from all its ancestor classes. Common features should be placed as high in the hierarchy as possible (but no higher!). So things that apply to all animals (breath oxygen, reproduce sexually, able to move, etc) should go in the <code>Animal</code> class, while things related more specifically to mammals (such as warm-blooded, bear live young, hair) should go in the <code>Mammal</code> class. Then additional child classes could be more specific. Anything in the <code>Animal</code> class should apply to any child class and anything in the <code>Insect</code> class should pertain to all Insect child classes. You would not want to put something such as \"has 6 legs\" in the <code>Animal</code> class since not all <code>Animals</code> have 6 legs, but such an attribute would be appropriate for the <code>Insect</code> class, but you If there are exceptions (such as penguins are birds but don\u2019t fly) they can be dealt with in the child class (for example Penguin could have an empty fly method), but your class hierarchy design should minimize the number of exceptions required. </p> <p>There can be (and often is) more than one \"correct\" hierarchy. For example, suppose you want to create a class hierarchy that contains the same classes as the example above. Then the following class hierarchy is also perfectly reasonable:</p> <pre><code>flowchart TD\n    B[Animal]\n    B--&gt;C[FlyingAnimal]\n    B--&gt;D[LandBased]\n    C--&gt;E[Bat]\n    C--&gt;F[FlyingDragon]\n    C--&gt;G[DragonFly]\n    D--&gt;H[Snake]\n    D--&gt;I[Horse]\n    D--&gt;J[Ant]</code></pre> <p>It is up to the program designer to determine the class hierarchy that best fits the problem domain. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#the-java-object-class","title":"The Java Object Class","text":"<p>All Java classes are derived from the <code>Object</code> class. A class without the <code>extends</code> keyword by default will extend the Object class. (I\u2019m not a huge fan of that name - it means that every class \"is-a\" Object. If you come across a reasonable explanation for that name please let me know.)  </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#the-object-class-includes-a-few-useful-methods","title":"The Object class includes a few useful methods","text":"<ul> <li>toString</li> <li>equals</li> <li>clone</li> </ul> <p>Nearly every class you implement should override the <code>toString()</code> method and many should also override <code>equals()</code> so that you can check equality of two objects. Keep in mind that the <code>==</code> operator in Java checks that two references are equal, not two objects!</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#abstract-classes","title":"Abstract Classes","text":"<p>An abstract class is a placeholder that represents a generic concept in the class hierarchy. An abstract class cannot be instantiated, but you can instantiate their non-abstract child classes. Abstract classes are declared with the <code>abstract</code> modifier as below:</p> <pre><code>public abstract class Animal {\n    // contents\n}\n</code></pre> <p>An abstract class can (but is not required to) contain abstract methods - methods with no definition. Non-abstract children must override these methods or else they will themselves be abstract. Abstract methods cannot be defined as final (think about why not). Abstract classes can also contain fully implemented methods and data members. </p> <p>Carefully consider where to put abstract classes in the class hierarchy. In our Animal class hierarchy above, the Animal, Insect, Mammal, and Reptile classes could be abstract since we would never instantiate an object of any of those classes. </p> <p>Abstract classes can be a difficult concept to wrap your mind around, especially without seeing an example. So be sure to review the video and code examples of abstract classes.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#designing-classes-in-a-hierarchy","title":"Designing Classes In a Hierarchy","text":"<p>Every child class should usually have an is-a relationship with the parent class</p> <ul> <li>Think about reuse</li> <li>Push common characteristics as high as possible</li> <li>Override methods to tailor or change child functionality as needed</li> <li>Add new variables in the child classes</li> <li>Be careful of shadowing inherited variables (creating a child class member with the same name as a parent class member)</li> <li>Allow each class to manage its own data</li> <li>Override general methods (toString, equal) with appropriate definitions</li> <li>Use abstract classes to represent general concepts</li> <li>Use visibility modifiers carefully to provide access while maintaining encapsulation </li> <li>Use the final modifier to curtail inheritance</li> </ul>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#exceptions","title":"Exceptions","text":"<p>An exception is an object that describes an unusual or erroneous situation. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#a-program-can-deal-with-an-exception-in-three-ways","title":"A program can deal with an exception in three ways:","text":"<ul> <li>Handle it where it occurs</li> <li>Allow it to propagate to another place in the program where it will be handled</li> <li>Ignore it (only for unchecked exceptions - checked exceptions must be handled)</li> </ul>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#verification-vs-exceptions","title":"Verification vs. Exceptions","text":"<p>There are two ways to find out something is not OK</p> <ul> <li>Verifying input/state is correct before execution<ul> <li>\"Is it OK to continue?\"</li> <li>\"Are we sure we are ready?\"</li> <li>\"Is everything set up correctly?\"</li> </ul> </li> <li>Checking for exceptions after execution<ul> <li>\"Did anything bad happen?\"</li> <li>\"Did everything work?\"</li> </ul> </li> </ul> <p>Which is better depends on the situation. Usually programs combine the two.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#exception-handling-in-java","title":"Exception Handling in Java","text":"<p>Java has a predefined set of exceptions. In Java, exceptions are objects with their own class hierarchy. Classes that define exceptions are related by inheritance. All error and exception classes are descendants of the <code>Throwable</code> class. We can create new exceptions by extending the <code>Exception</code> class or one of its descendants. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#some-common-java-exceptions-are","title":"Some common Java exceptions are:","text":"<ul> <li><code>NullPointerException</code> when you try to use an object reference that is null</li> <li><code>ArithmeticException</code> when you try to divide by 0</li> <li><code>ArrayIndexOutOfBoundsException</code> when you try to access an invalid array index</li> <li><code>FileNotFoundException</code> when you try to open a file that does not exist</li> <li><code>NumberFormatException</code> when you try to convert a string to a number in an invalid format</li> <li><code>IllegalArgumentException</code> when you call a method with a parameter of an invalid type</li> </ul> <p>If an exception is ignored (an uncaught exception), the program will terminate abnormally and produce an appropriate message. A call stack trace will be displayed indicating the line where the exception occurred and the method call trail that leads to execution.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#the-try-catch-finally-statement","title":"The <code>try-catch-finally</code> Statement","text":"<p>Code that may trigger an exception should be placed in a try block. The try block can be followed by one or more catch clauses (exception handlers). The first handler that matches the exception is executed. A finally block following the try-catch will always be executed (Ok, this is not strictly true if the computer is destroyed due to the exception, but the statement is close enough to being true for our purposes.)  </p> <pre><code>try {\n    // Code that may throw an exception\n} catch (Exception e) {\n    // Handle exception\n}\nfinally {\n    // This code executes no matter what\n}\n</code></pre> <p>The programmer can throw an exception using the throw statement. Usually this is done after checking a condition and detecting something is wrong.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#the-try-with-resources-construct","title":"The <code>try-with-resources</code> Construct","text":"<p>It is very common in Java to have code that opens resources (files, Scanner, database, network) that need to be closed when you are done. If an exception occurs, you still need to close the resource. One way is to close the resource in the finally block, but the programmer still has to remember to do this and you may need a separate set of exception handlers inside the finally block!  Closing the resource inside the finally block also means it has to be declared before the try block so that it is scope for the finally block.</p> <p>The try-with-resources construct allows the programmer to open a resource that will be automatically closed when the try-catch block is complete The resource class must implement the <code>AutoClosable</code> interface</p> <pre><code>try(ResourceClass res = new ResourceClass()) {\n    // code\n}\ncatch (Exception e) {\n    // Handle exception\n}\n// res will be automatically closed\n</code></pre>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#exception-propagation","title":"Exception Propagation","text":"<p>If an exception is not handled where it occurs it is passed to the calling method. Exceptions propagate up through the method call hierarchy until they are caught and handled or until they reach the main method. A try block will catch any exception thrown by a method inside it. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#checked-vs-unchecked-exceptions","title":"Checked vs Unchecked Exceptions","text":"<p>An exception can be either checked or unchecked. Checked exceptions must be either caught or listed in the throws clause of any method that may throw or propagate it. The compiler will complain if neither of these happens. For example, the method below expects the caller to handle the <code>EmptyCollectionException</code></p> <pre><code>public T getRootElement() throws EmptyCollectionException {\n\n}\n</code></pre> <p>An unchecked exception does not require explicit handling. Objects of type <code>RuntimeException</code> are the only unchecked exceptions in Java. Errors are similar to RuntimeExceptions and should not be caught and do not require a throws clause. </p> <p>Unchecked exceptions extend the <code>RuntimeException</code> class, while checked exceptions extend the <code>Exception</code> class.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#exception-handling-summary","title":"Exception Handling Summary","text":"<ul> <li>try to execute statements within a block of code</li> <li><code>throw</code> an exception if you detect a problem</li> <li><code>catch</code> and process the exception</li> <li><code>finally</code> execute code that will run even if an exception is thrown</li> </ul> <p>You should always handle exceptions appropriately!</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#java-io","title":"Java I/O","text":"<p>A stream is a sequence of bytes. Our programs can read from an input string and write to an output stream. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#there-are-three-standard-io-streams","title":"There are three standard I/O streams:","text":"<ul> <li><code>System.in</code> - standard input</li> <li><code>System.out</code> - standard output</li> <li><code>System.err</code> - standard error</li> </ul> <p><code>System.in</code> and <code>System.err</code> will both display on the cursor, with <code>System.err</code> in red. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#ioexception-class","title":"IOException Class","text":"<p>An <code>IOException</code> is a checked exception. It is thrown any time there is an issue with I/O, such as</p> <ul> <li>A file does not exist</li> <li>Program cannot open a file</li> <li>Data is in incorrect format</li> </ul>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#writing-text-files","title":"Writing Text Files","text":"<p>The <code>FileWriter</code> class represents a text output file. It provides minimal support for manipulating data. A <code>PrintWriter</code> gives us methods to print. Output streams should be closed, either by calling <code>close()</code> explicitly or using try-with-resources.</p>","boost":1},{"location":"csc205/module-3/","title":"Polymorphism and Interfaces - Index","text":"","boost":1},{"location":"csc205/module-3/#csc205-module-3","title":"CSC205 - Module 3","text":"","boost":1},{"location":"csc205/module-3/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-3/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-3/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-3/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-3/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-3/#frequently-asked-questions","title":"Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-4/","title":"Recursion and Analysis of Algorithms - Index","text":"","boost":1},{"location":"csc205/module-4/#csc205-module-4","title":"CSC205 - Module 4","text":"","boost":1},{"location":"csc205/module-4/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-4/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-4/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-4/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-4/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-4/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<ul> <li>Programming Exercise 4 - Recursion</li> </ul>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/","title":"Module 4 - Programming Exercise - Recursion","text":"<p>The purpose of these exercises is to give you additional practice writing recursive methods.</p> <p>For the sample output, the input is given in [brackets].</p> <p>Feel free to use additional helper methods if you would like, but the function signature for the calling method should match the function signature given.</p> <p>Check your answers against the provided solutions. Solutions written in C, C++, or Java should be similar to each other.</p> <p>These would also make good practice for Scheme and Prolog (though Prolog will require additional parameters).</p> <p>For questions that ask you to print a sequence you can alternatively add the sequence to a list.</p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#1-write-a-recursive-method-func1n-that-calculates-the-following-function","title":"1. Write a recursive method <code>func1(n)</code> that calculates the following function:","text":"\\[ \\begin{align*} &amp;f(1) = 10 \\\\ &amp;f(n) = f(n-1) + 3 \\\\ \\end{align*}  \\] <p>Sample output: <code>[1]: 10   [5]: 22   [10]: 37   [20]: 67</code></p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#2-write-a-recursive-method-func2n-that-calculates-the-following-function","title":"2. Write a recursive method <code>func2(n)</code> that calculates the following function:","text":"\\[ \\begin{align*} &amp;f(1) = 1 \\\\ &amp;f(n) = n^2\\times f(n-1) \\\\ \\end{align*}  \\] <p>Sample output:  <code>[1]: 1   [5]: 14400  [10]: 13168189440000</code></p> <p>Your code may not calculate f(10) correctly depending on the type/language you use.</p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#3-write-a-recursive-method-func3n-that-calculates-the-sum-of-the-series-1-2-3-4-5-6-n","title":"3. Write a recursive method <code>func3(n)</code> that calculates the sum of the series <code>-1 + 2 - 3 + 4 - 5 + 6 ... n</code>.","text":"<p>Sample output: <code>[1]: -1   [5]: -3   [10]: 5   [20]: 10</code></p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#4-write-a-recursive-method-tribonaccin-that-returns-the-nth-tribonacci-number-defined-as","title":"4. Write a recursive method <code>tribonacci(n)</code> that returns the <code>nth</code> Tribonacci number defined as:","text":"\\[ \\begin{align*} &amp;f(1) = 1 \\\\ &amp;f(2) = 1 \\\\ &amp;f(3) = 2 \\\\ &amp;f(n) = f(n-1) + f(n-2) + f(n-3) \\\\ \\end{align*}  \\] <p>Sample output:<code>[1]: 1   [5]: 7   [10]: 149   [20]: 66012</code></p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#5-write-a-recursive-method-addx-y-that-recursively-computes-the-sum-of-x-and-y-you-can-assume-that-x-and-y-are-both-positive","title":"5. Write a recursive method <code>add(x, y)</code> that recursively computes the sum of <code>x</code> and <code>y</code>.  You can assume that <code>x</code> and <code>y</code> are both positive.","text":"<p>Sample output: <code>[1 + 1] = 2     [3 + 2] = 5     [7 + 8] = 15</code></p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#6-write-a-recursive-method-printdownfromn-that-prints-the-numbers-from-n-down-to-1","title":"6. Write a recursive method <code>printDownFrom(n)</code> that prints the numbers from <code>n</code> down to <code>1</code>.","text":"<p>Sample output:</p> <pre><code>[1]: 1\n[5]: 5 4 3 2 1\n[10]: 10 9 8 7 6 5 4 3 2 1\n[20]: 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n</code></pre>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#7-write-a-recursive-method-printupton-that-prints-the-numbers-1-to-n","title":"7. Write a recursive method <code>printUpTo(n)</code> that prints the numbers <code>1</code> to <code>n</code>.","text":"<p>Sample output:</p> <pre><code>[1]: 1\n[5]: 1 2 3 4 5\n[10]: 1 2 3 4 5 6 7 8 9 10\n[20]: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n</code></pre>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#8-write-a-recursive-method-gcdx-y-that-calculates-greatest-common-divisor-of-two-numbers-using-the-following-method","title":"8. Write a recursive method <code>gcd(x, y)</code> that calculates greatest common divisor of two numbers using the following method:","text":"<pre><code>gcd(x, y) = y if y &lt;= x and y divides x\n\ngcd(x, y) is gcd(y, x) if x \\&lt; y\n\ngcd(x, y) is gcd(y, x % y) otherwise\n</code></pre> <p>Sample output: <code>[96 and 60] 12    [30 and 10] 10    [96 and 120] 24</code> </p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#9-write-a-recursive-method-ispalindromes-that-returns-true-if-s-is-a-palindrome-and-false-otherwise","title":"9. Write a recursive method isPalindrome(s) that returns true if s is a palindrome and false otherwise.","text":"<p>Sample output:</p> <pre><code>[abcd] = false\n[abccba] = true\n[aabcbaa] = true\n</code></pre>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#10-a-recursive-method-called-collatzn-that-prints-the-numbers-in-the-collatz-sequence-in-which-each-successive-value-is-obtained-using-the-following-function","title":"10. A recursive method called <code>collatz(n)</code> that prints the numbers in the Collatz sequence in which each successive value is obtained using the following function:","text":"\\[ f(n) = \\Bigg \\{ \\begin{align*} \\frac{n}{2} &amp; \\text{} n \\equiv 0 \\pmod{2} \\\\ 3n+1        &amp; \\text{} n \\equiv 1 \\pmod{2} \\\\ \\end{align*} \\Bigg . \\] <p>Sample output:</p> <pre><code>[1] : 1  \n[5] : 5, 16, 8, 4, 2, 1  \n[19] : 19, 58, 29, 88, 44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1\n</code></pre>","boost":1},{"location":"csc205/module-5/","title":"Collections Generics and Iterators - Index","text":"","boost":1},{"location":"csc205/module-5/#csc205-module-5","title":"CSC205 - Module 5","text":"","boost":1},{"location":"csc205/module-5/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-5/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-5/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-5/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-5/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-5/#frequently-asked-questions","title":"Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-6/","title":"Linked Lists - Index","text":"","boost":1},{"location":"csc205/module-6/#csc205-module-6","title":"CSC205 - Module 6","text":"","boost":1},{"location":"csc205/module-6/#topics","title":"Topics","text":"<ul> <li>Ordered Lists</li> <li>Unordered lists</li> <li>Linked Lists</li> <li>implementing an iterator</li> <li>using arrays vs. linked nodes to implement a list</li> </ul>","boost":1},{"location":"csc205/module-6/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-6/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter 13.1 - 13.3 and 15</li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections 1.3</li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-6/#notes","title":"Notes","text":"<ul> <li>Linked Lists - Notes</li> </ul>","boost":1},{"location":"csc205/module-6/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-6/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<ul> <li>Linked Lists - Frequently Asked Questions</li> </ul>","boost":1},{"location":"csc205/module-6/linked-lists-faq/","title":"Linked Lists - Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-6/linked-lists-faq/#csc205-module-6","title":"CSC205 - Module 6","text":"","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-what-is-the-difference-between-csc205-jsjf-and-javautil","title":"Question: What is the difference between csc205, jsjf, and java.util?","text":"<p>Different data structures we will use will be contained in one of those packages. * <code>java.util</code> - built in Java packages, including collections, exceptions, iterators, and other useful items. * <code>jsjf</code> - the package with classes and interfaces from the Java Foundations book with minor modifications made by the instructor. * <code>csc205</code> - package with classes and interfaces developed by the instructor.</p> <p>The <code>java.util</code> packages are included with the Java SDK while <code>csc205</code> and <code>jsjf</code> will be included in the example code for the modules that require them. In general, you should use the data structures in the <code>csc205</code> or <code>jsjf</code> packages for your assignments as those are the classes that we will be completing as part of this course.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-what-is-the-benefit-of-using-linked-lists","title":"Question: What is the benefit of using linked lists?","text":"<p>Linked lists are linear data structures that hold data. Like an array, there is an idea of a next or previous element, though in an array each element is stored at a specific index while a linked list uses \u201cpointers\u201d to the neighboring elements.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-what-is-the-difference-between-a-list-and-an-array","title":"Question: What is the difference between a list and an array?","text":"<p>They are both linear collections and you can implement a list with an array. However, if there are a few differences in how they are used:</p> <ul> <li>The size of an array has to be known when it is instantiated, while a list can grow to an arbitrarily large size.</li> <li>An array is typically allocated in contiguous memory, while elements in a list are not stored together.</li> <li>Memory is allocated for an array when it is created, whereas memory for a list is allocated as each new element is added to it.</li> <li>The programmer has to handle what to do when an array is full, while the list has no notion of being \"full\".</li> </ul> <p>You can still implement a list using an array as the underlying data structure, since a \"list\" defines how the collection should act conceptually. The details are left up to the collection's implementer, and there is no reason they could not be implemented with an array.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-are-linked-lists-important-to-know-in-industry-other-than-for-interviewing","title":"Question: Are linked lists important to know in industry other than for interviewing?","text":"<p>They are definitely important for interviewing, so certainly you need to know them for at least that. Beyond that, it depends on what sort of programming you want to do. Code that models real-world items or processes can often benefit from linked lists. You don\u2019t use them all the time, but they are a good tool to have. For example, I once worked on a project where we had some objects that needed to be arranged in a certain way. I was able to take my knowledge of linked lists and create a solution that was significantly faster and more accurate than the original solution. While I didn\u2019t use linked lists directly, my solution wouldn\u2019t have been possible if I didn\u2019t know about linked lists.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-how-do-you-use-a-linked-list-to-implement-a-stackqueuedeque","title":"Question: How do you use a linked list to implement a stack/queue/deque?","text":"<p>We will cover that next week. Once you know how a linked list works, understanding how to use them to implement a stack or queue is fairly straightforward.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-why-would-you-use-a-linked-list-over-an-array-or-an-arraylist","title":"Question: Why would you use a linked list over an array or an ArrayList?","text":"<p>One clear example would be if you don\u2019t know how many items you want to store before you begin, and you don\u2019t want to deal with the performance hit of having to resize an array. Also if you are keeping an ordered list of elements, a linked list is much more efficient when it comes to inserting elements in the interior of the list.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-can-elements-be-inserted-only-at-the-front-or-rear-of-a-linkedlist","title":"Question: Can elements be inserted only at the front or rear of a LinkedList?","text":"<p>You can insert anywhere you want into a Linked List, though the implementation differs depending on whether you are inserting at the front, interior, or rear. Some data structures built on linked lists (such as stacks or queues) specifically disallow insertion or deletion in the middle and at one of the ends, though that is an attribute of those data structures, not the underlying linked list.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-how-would-you-implement-a-linked-list","title":"Question: How would you implement a linked list?","text":"<p>The starting point is typically a \"node\" class of some sort which contains a reference to the element stored at that node and a reference to the next (and possibly previous) node(s). The nodes can be stored in an array (next/prev references are array indexes) or instantiated on an as-needed basis using object reference variables.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-why-do-we-need-to-know-both-the-array-and-linked-implementation-of-a-list-which-one-is-better","title":"Question: Why do we need to know both the array and linked implementation of a list? Which one is better?","text":"<p>To use a list, you don\u2019t need to know its implementation. But, understanding the implementation will help you better understand the benefits and drawbacks of each type of list. The concepts used in each type of list implementation are ones that you can apply in many situations, not just lists.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-does-a-list-have-to-be-a-linked-data-structure","title":"Question: Does a list have to be a linked data structure?","text":"<p>No. An ArrayList is not a linked data structure but it implements the List interface.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-what-is-the-difference-between-a-list-and-a-linked-list","title":"Question: What is the difference between a <code>List</code> and a linked list?","text":"<p>A <code>List</code> is an abstract data type that tracks a sequence of items. A Linked List is a data structure that can be used to implement a list.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-why-do-you-do-listinteger-items-new-linkedlistinteger","title":"Question: Why do you do <code>List&lt;Integer&gt; items = new LinkedList&lt;Integer&gt;;</code>?","text":"<p>In this case, we are using an interface (<code>List</code>) as the type of the object reference variable. Recall that using an interface as the type here is permitted, we just have to instantiate an object of an actual type, in this case <code>LinkedList</code>. We are doing this because for this application we want a list - we don\u2019t necessarily care if it is a linked list or an <code>ArrayList</code>. There are a few benefits of doing this, including ensuring that we only use methods from the interface and allowing us to easily change to a different type of list. Note that in this case, just changing \"LinkedList\" to \"ArrayList\" is sufficient to change \"items\" from a linked list to an <code>ArrayList</code>.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-are-arraylists-and-lists-just-the-same-thing","title":"Question: Are <code>ArrayLists</code> and <code>Lists</code> just the same thing?","text":"<p><code>ArrayLists</code> are <code>Lists</code>, but not all <code>Lists</code> are <code>ArrayLists</code>. <code>LinkedLists</code>, <code>OrderedLists</code>, and <code>IndexedLists</code> are all also lists. They have the methods in the <code>List</code> interface in common, but they add additional features and have a different underlying implementation (for example, arrays vs linked structures).</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-which-works-better-in-a-loop-an-array-or-a-linked-list","title":"Question: Which works better in a loop: an array or a linked list?","text":"<p>There isn\u2019t really a benefit to either data structure if you are going to loop through the entire array or list - both are <code>O(n)</code> operations since you have to look at each element. The exception would be if you are looping through every <code>n</code>th element. In that case an array would be more efficient because you could add <code>n</code> to the index during each iteration to skip the intermediate elements. A linked list would require you to iterate through each element whether you wanted to or not.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-how-are-linked-lists-linked","title":"Question: How are linked lists linked?","text":"<p>Linked lists themselves are not linked. Linked lists are made up of individual nodes. Each node contains (at least) 2 references - one to the \"next\" item in the list and one to the data stored at that list entry.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-do-nodes-have-a-size-limit","title":"Question: Do nodes have a size limit?","text":"<p>There is no hard limit on the size of a node, you are only limited by the resources of the computer your code is running on.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-how-many-nodes-can-be-in-a-list","title":"Question: How many nodes can be in a list?","text":"<p>As many as you have memory for.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-do-you-have-to-use-a-separate-node-class-to-implement-a-linked-list","title":"Question: Do you have to use a separate node class to implement a linked list?","text":"<p>No, you can have a linked list that is made up of nodes. The <code>LinkedList</code> reference would refer to the first node in the list. However, having a separate <code>ListNode</code> class allows you to keep track of more than one node reference (for example a reference to the end of the list) and other statistics about the list, such as the size.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-what-is-meant-by-a-linear-data-structure","title":"Question: What is meant by a \u201clinear data structure\u201d?","text":"<p>A linear data structure stores the data in a sequential fashion. For example, in an array or list, there is a first element, a second element, and a last element. This contrasts with non-linear data structures in which there is no notion of a \"first element\", \"last element\" or even a \"next element\". We will see several examples of both linear and non-linear data structures this semester so the distinction should become more clear as you see examples of both.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-are-all-linked-data-structures-linear","title":"Question: Are all linked data structures linear?","text":"<p>No. Trees and graphs are two examples of non-linear, linked data structures (though we will also see how to implement them without links).</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-how-are-non-numeric-objects-ordered","title":"Question: How are non-numeric objects ordered?","text":"<p>For our examples in this class, we will use objects that implement the <code>Comparable</code> interface, so we will be able to compare them using the <code>compareTo</code> method. It is up to the class to implement the <code>compareTo</code> in such a way as to ensure that the objects are ordered appropriately.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-can-an-unordered-list-be-used-to-keep-a-sorted-list","title":"Question: Can an unordered list be used to keep a sorted list?","text":"<p>Sure. However, it is up to the client to insert elements in the appropriate locations. Unlike with an ordered list, the data structure itself doesn\u2019t help.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-why-would-you-use-an-unordered-list-vs-an-ordered-list","title":"Question: Why would you use an unordered list vs an ordered list?","text":"<p>It depends on how you are going to use the list and what you need it to do. The obvious answer is that you would use an ordered list when you want to keep the elements in order. But what if you don\u2019t care about the order of the elements? You may still want an ordered list. For example, suppose you have an application where the most important metric is how fast you can remove something from the list. While adding and removing from the front or back of an unordered list is very efficient, removing a specific element is not - you have to search through the entire list. So while adding and removing an element is slower in an ordered list, removing a specific element is faster because there are ways to find something faster in an ordered list than by searching every element in the list.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-unordered-lists-are-ordered","title":"Question: Unordered lists are ordered?!?!?","text":"<p>Yes. You can shuffle a deck of cards and they will be out of order - an \"unordered list\". Now draw one at a time. You will draw a first card, a second card, and so on. There is no ordering between different cards (list elements), but there is an order to how you draw them.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-what-is-the-difference-between-an-unordered-list-and-an-indexed-list","title":"Question: What is the difference between an unordered list and an indexed list?","text":"<p>An indexed list is unordered since elements are stored at a given index, not in their \"correct\" place based on some ordering among the elements. However you could use an indexed list to implement an ordered list if you determine in which index a certain element should be inserted.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-why-is-an-indexed-list-considered-unordered-since-its-elements-are-stored-at-indices-1-2-3-etc","title":"Question: Why is an indexed list considered \"unordered\" since its elements are stored at indices 1, 2, 3, etc?","text":"<p>While the indices themselves are ordered, the elements stored at those indices do not have to be. Keep in mind that when we discuss \"ordering\" with respect to lists we are talking about the lists, not the elements they contain. Indexed lists do not do anything to ensure that the elements themselves are stored in any particular order. </p> <p>Consider the two ArrayLists pictured below:</p> <p></p> <p>In the first <code>ArrayList</code> the elements are out of order, while in the second the elements are in order. However, since <code>ArrayLists</code> are unordered lists, the fact that the elements are in order in the 2<sup>nd</sup> <code>ArrayList</code> is due to how they were added, not anything inherent in the <code>ArrayList</code>. So while the elements may be ordered, the list data structure is not.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-when-would-you-use-an-indexed-list","title":"Question: When would you use an indexed list?","text":"<p>Any time you would use an array.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-why-is-getting-an-index-from-a-linked-list-hard","title":"Question: Why is getting an index from a Linked List hard?","text":"<p>Since <code>LinkedLists</code> do not have indexes, you have to figure out how you are going to provide that.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-what-is-the-point-of-a-doubly-linked-list","title":"Question: What is the point of a doubly linked list?","text":"<p>For one thing, a doubly linked list makes it easier to remove the last element since you can get to the next to the last element (the new last element) using a link from the last element. It also makes it easier to go back and forth through the list if that is something your application requires.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-when-is-a-doubly-linked-list-preferable-to-a-singly-linked-list","title":"Question: When is a doubly linked list preferable to a singly linked list?","text":"<p>The doubly linked list isn\u2019t significantly more difficult to implement, nearly always. The functionality is the same, except that a doubly linked list allows two-way traversal of the list. That makes many operations more efficient.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-is-there-a-way-to-make-linked-lists-more-efficient","title":"Question: Is there a way to make linked lists more efficient?","text":"<p>It depends on what you mean by \"efficient\". Linked lists are very efficient when it comes to adding things to the end of the list (either end). A doubly linked list is more efficient when you need to traverse back and forth along the list. If you need direct access to individual nodes then it is probably better to use an array.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-what-is-a-circular-array","title":"Question: What is a circular array?","text":"<p>You can think of a circular array as an array where the element after the last element is the first element. So if the size of the array is N, element 0 is the first element and also the Nth element is the first element (N mod N = 0). Circular arrays have lots of uses in addition to efficient queues. For example, suppose you have an array of objects that you need to perform the same task over and over to each object. You can use a circular array to keep track of where you are.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-are-all-collections-iterable","title":"Question: Are all collections Iterable?","text":"<p>The Iterable interface is a Java feature, not one inherent to a particular data structure. A Java collection is only Iterable if it implements the Iterable interface. Since iterators make dealing with a collection easier it is typically advisable to make your Java collections Iterable.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-how-do-i-know-whether-to-use-a-collection-or-a-linked-list","title":"Question: How do I know whether to use a collection or a linked list?","text":"<p>A linked list is a collection. We will discuss the tradeoffs involved in many different collections over the rest of the semester. Collections differ in how efficiently they add, remove, or store items in addition to any sort of special structure or limitations they provide. For example, items can be stored in a stack very efficiently, but only the top item is available at any given time.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-what-is-the-purpose-of-a-private-class","title":"Question: What is the purpose of a private class?","text":"<p>A private class is only accessible to the class in which it is defined, so it is used when a class is only useful to another class, such as our node class which is only useful when used as part of a linked list, so we defined it inside our <code>LinkedList</code> class.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-why-create-a-separate-node-class-in-our-linked-list-why-not-just-use-the-linked-list-class","title":"Question: Why create a separate node class in our linked list? Why not just use the linked list class?","text":"<p>You don\u2019t need a separate node class. In fact, the node class is essentially a linked list class because every linked list node is the head of a linked list. The node class can be separate, as in the example from the Java Foundations book, or a private class in the linked list class like we did in class. The advantage of the separate node class is that it allows the linked list class to store attributes of the list itself - <code>head</code>, <code>tail</code>, <code>count</code>, etc - that would not be a good fit for a node class.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-there-are-two-different-examples-of-the-private-node-class-what-is-the-difference-between-these-two-and-which-should-we-use","title":"Question: There are two different examples of the private Node class. What is the difference between these two and which should we use?","text":"<pre><code>private class Node&lt;Item&gt; {\n    private Item item;\n    private Node&lt;Item&gt; next;\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#and","title":"and","text":"<pre><code>private class Node &lt;Item&gt; {\n    private Item item;\n    private Node next;\n    private Node prev;\n}\n</code></pre> <p>The first Node class is for singly-linked lists, the second is for doubly-linked lists. Note how the 2<sup>nd</sup> one has both next and previous references. Which one you use depends on which kind of list you are trying to create.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-how-do-you-keep-a-reference-to-an-element-stored-at-a-node-if-you-delete-the-node","title":"Question: How do you keep a reference to an element stored at a node if you delete the node?","text":"<p>Keep in mind that the node only holds a reference to the element, not the element itself! So, if we delete a node, nothing happens to the element immediately. If we get a reference to the element before we delete it (or technically, before we update references to the node we are deleting), then that element will still be there after the node is removed from the list.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-what-happens-if-we-delete-a-node-without-saving-the-reference-to-its-data","title":"Question: What happens if we delete a node without saving the reference to its data?","text":"<p>The data becomes garbage if there are no other references to it and will be deleted by the garbage collector.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-what-happens-if-you-lose-the-reference-to-a-node-in-the-linked-list","title":"Question: What happens if you lose the reference to a node in the linked list?","text":"<p>If you lose the reference to a node, then you will no longer be able to access that data. In a singly-linked list, you won\u2019t be able to access any nodes after the lost node, either, and if you lose the head of a singly-linked list you will lose access to the entire list. In some cases, that is OK, such as if you are deleting the node. But if you want to keep the node then you do not want to lose the reference. In general, this shouldn\u2019t happen because when you are manipulating the list you should be careful to maintain the references.</p>","boost":1},{"location":"csc205/module-6/linked-lists-faq/#question-could-you-have-a-linked-list-that-forks-in-the-middle-could-a-node-point-to-two-other-nodes-depending-on-certain-parameters-or-should-you-have-separate-lists","title":"Question: Could you have a linked list that forks in the middle? Could a node point to two other nodes depending on certain parameters or should you have separate lists?","text":"<p>Yes. This is called a tree (or a graph, depending on what rules you enforce on the node connections). We will cover both data structures later this semester.</p>","boost":1},{"location":"csc205/module-6/linked-lists-notes/","title":"Linked Lists - Notes","text":"","boost":1},{"location":"csc205/module-6/linked-lists-notes/#csc205-module-6","title":"CSC205 - Module 6","text":"","boost":1},{"location":"csc205/module-6/linked-lists-notes/#lists-and-linked-data-structures","title":"Lists and Linked Data Structures","text":"","boost":1},{"location":"csc205/module-6/linked-lists-notes/#lists","title":"Lists","text":"<p>A list is a linear data structure. Elements can be added to or removed from either end or the middle of the list. There are three types of lists: unordered, ordered, and indexed.</p> <p>Ordered lists store elements in order based on some inherent ordering among the elements. When elements are added to an ordered list the location where they are added is based on maintaining the order among elements of the list.</p> <p></p> <p>The order of elements in unordered lists is not based on a relationship between the elements. However, there is some order to the list - the list has a first and last element and there is a previous and next element for each element in the list. The user of the list determines the order of the elements based on where they add them. Elements can be added at the front, rear, or after an existing element (though not every unordered list implementation will include all 3 add methods).</p> <p></p> <p>In indexed lists, the location where elements are stored can be referenced by an index, similar to an array. Indexed lists are unordered - it is up to the user to determine in what order the elements will be stored. Indexes have to be updated if the order changes.</p> <p></p>","boost":1},{"location":"csc205/module-6/linked-lists-notes/#java-list-api","title":"Java List API","text":"<p>The list classes in the Java API focus on indexed lists though there are some unordered lists. Java does not provide an ordered list, but you can implement one using the capabilities of the other types of lists. <code>ArrayList</code> and <code>LinkedList</code> are commonly used classes that implement the <code>List&lt;E&gt;</code> interface.</p>","boost":1},{"location":"csc205/module-6/linked-lists-notes/#java-list-operations","title":"Java List Operations","text":"<p>Java\u2019s List interface includes the following methods:</p> <ul> <li><code>add(E element)</code>adds an element to the end of the list.</li> <li><code>add(int index, E element)</code> inserts an element at the specified index.</li> <li><code>get(int index)</code> returns the element at the specified index.</li> <li><code>remove(int index)</code> removes the element at the specified index.</li> <li><code>remove(E object)</code> removes the first occurrence of the specified object.</li> <li><code>set(int index, E element)</code> replaces the element at the specified index.</li> <li><code>size()</code> returns the number of elements in the list.</li> <li><code>isEmpty()</code> returns true if the list is empty, false if it is not.</li> </ul>","boost":1},{"location":"csc205/module-6/linked-lists-notes/#implementing-lists","title":"Implementing Lists","text":"<p>The <code>jsjf</code> package has implementations of different kinds of lists. We will also implement a separate <code>LinkedList</code> class that we will build from the ground up.</p>","boost":1},{"location":"csc205/module-6/linked-lists-notes/#list-operations","title":"List operations","text":"<p>All the lists implemented in the <code>jsjf</code> package will support the following operations:</p> <ul> <li><code>removeFirst()</code> removes the first element in the list.</li> <li><code>removeLast()</code> removes the last element in the list.</li> <li><code>remove(E element)</code> removes the specified element.</li> <li><code>first()</code> returns the first element in the list.</li> <li><code>last()</code> returns the last element in the list.</li> <li><code>contains(E element)</code> returns true if the specified element is in the list, false if it is not.</li> <li><code>size()</code> returns the number of elements in the list.</li> <li><code>isEmpty()</code> returns true if the list is empty, false if it is not.</li> </ul> <p>Unordered lists add the following methods:</p> <ul> <li><code>addtoFront(E element)</code> adds an element to the front of the list.</li> <li><code>addtoRear(E element)</code> adds an element to the rear of the list.</li> <li><code>addtoRear(E elementToAdd, E element)</code> adds an element after the specified element.</li> </ul> <p>Ordered lists add the following method:</p> <ul> <li><code>add(E element)</code> adds an element to the list in the appropriate location.</li> </ul>","boost":1},{"location":"csc205/module-6/linked-lists-notes/#implementing-lists-with-arrays","title":"Implementing Lists with Arrays","text":"<p>One way to implement lists is with arrays. Arrays give us a built-in place to store the elements. The implementation is fairly straightforward. However, there are some drawbacks to using arrays. First off, we can\u2019t avoid shifting elements unless we add the element at the end. Also, using arrays we have to know the array size beforehand - so we may wind up wasting space if the array isn\u2019t full and we will have to resize the array if it is full.</p> <p></p>","boost":1},{"location":"csc205/module-6/linked-lists-notes/#implementing-lists-with-linked-structures","title":"Implementing Lists with Linked Structures","text":"<p>Linked structures are an alternative to array-based collections. A linked structure uses object references to create links between objects. We call the objects in the list nodes.</p> <p></p> <p>Note that while our linked lists will be linear data structures, linked structures can also be non-linear (we will study trees &amp; graphs later this semester).</p> <p></p> <p>It is also possible for nodes to have two-way links so that we can traverse the collection in either direction:</p> <p></p> <p>In the** doubly-linked list** above, while the arrows are shown to be bidirectional, if we implement a doubly-linked list in Java we will have two references for each link - one reference in each direction.</p> <p>Our linked list will be made up of objects that have references to another object in the list. However, we don\u2019t want our objects in the list to have references to other objects in our collection, so we will use a separate node object that has two references: one reference to an element and another reference to the next node. Doubly-linked lists would add an additional reference to the previous node.</p> <p></p> <p></p> <p></p> <p>The linked list object itself will need to keep track of the head (first) and tail (last) nodes in the list. The tail reference isn\u2019t necessarily required, but it makes some operations much easier. The linked list object will also keep track of the number of elements in the list (count). It is important to use care when adding and removing nodes from any linked data structure - you should make sure you always maintain the existing links when necessary.</p> <p>Since linked lists do not have indexes like arrays, we cannot directly access individual nodes (and therefore the elements stored at those nodes) directly. Instead, we have to traverse the list to access individual nodes. We start at the head node then continue to follow the next references until we arrive at the node we are looking for.</p>","boost":1},{"location":"csc205/module-6/linked-lists-notes/#inserting-a-node-at-the-front","title":"Inserting a Node at the Front","text":"<p>To insert an element at the front of the list, first create the new node and add the new element to it. Then, set the new node\u2019s next reference to the head of the list. Finally, set the head of the list to the new node. Notice that the order you do this is critical - if you set the head to the new node before setting the next reference you will lose the reference to the rest of the list!</p> <p></p>","boost":1},{"location":"csc205/module-6/linked-lists-notes/#inserting-a-node-in-the-middle","title":"Inserting a Node in the Middle","text":"<p>To insert a new node in the middle of the list, first create the new node, then set the new node\u2019s next reference to the node that will follow it in the list. Then, set the previous node\u2019s next reference to the new node.</p> <p></p>","boost":1},{"location":"csc205/module-6/linked-lists-notes/#inserting-a-node-at-the-rear","title":"Inserting a Node at the Rear","text":"<p>To insert an element at the rear of the list, first create the new node and add the new element to it. Its next should be null since it will be the tail of the list. Then, set the (old) tail node\u2019s next to the new node and set the tail of the linked list to the new node.</p> <p></p>","boost":1},{"location":"csc205/module-6/linked-lists-notes/#deleting-a-node-at-the-front","title":"Deleting a Node at the Front","text":"<p>To delete the first node in a linked list, first make sure to save a reference to the element stored in that node. Once that is done, set the head to the old head node\u2019s next.</p> <p></p>","boost":1},{"location":"csc205/module-6/linked-lists-notes/#deleting-a-node-from-the-middle","title":"Deleting a Node From the Middle","text":"<p>To delete the first node from the middle of a linked list, first make sure to save a reference to the element stored in that node. Once that is done, set the next reference of the node before the one you are deleting to the deleted node\u2019s next.</p> <p></p>","boost":1},{"location":"csc205/module-6/linked-lists-notes/#deleting-a-node-at-the-rear","title":"Deleting a Node at the Rear","text":"<p>To delete the last node in a linked list, first make sure to save a reference to the element stored in that node. Once that is done, you need to find the next-to-last node in the list. For a singly-linked list this means you need to traverse the list starting at the head. Once you\u2019ve found the next-to-last node, set its next reference to null (to end the list) and set the tail to that node.</p> <p></p>","boost":1},{"location":"csc205/module-6/code/","title":"Linked Lists - Example Code - Index","text":"","boost":1},{"location":"csc205/module-6/code/#_1","title":"/","text":"<ul> <li>Module 6 README.md</li> <li>LinkedListDriver.java</li> <li>ListExamples.java</li> </ul>","boost":1},{"location":"csc205/module-6/code/#csc205","title":"/csc205/","text":"<ul> <li>LinkedList.java</li> </ul>","boost":1},{"location":"csc205/module-6/code/#jsjf","title":"/jsjf/","text":"<ul> <li>ArrayList.java</li> <li>ArrayOrderedList.java</li> <li>ArrayUnOrderedList.java</li> <li>LinearNode.java</li> <li>LinkedList.java</li> <li>LinkedOrderedList.java</li> <li>LinkedUnorderedList.java</li> <li>ListADT.java</li> <li>OrderedList.ADT.java</li> <li>UnorderedListADT.java</li> </ul>","boost":1},{"location":"csc205/module-6/code/#jsjfexceptions","title":"/jsjf/exceptions/","text":"<ul> <li>ElementNotFoundException.java</li> <li>EmptyCollectionException.java</li> <li>NonComparableElementException.java</li> </ul>","boost":1},{"location":"csc205/module-6/code/LinkedListDriver/","title":"LinkedListDriver.java","text":"<pre><code>package videoexamples.module06;\n\nimport videoexamples.module06.csc205.LinkedList;\n\npublic class LinkedListDriver {\n\n    public static void main(String[] args) {\n        LinkedList&lt;String&gt; myList = new LinkedList&lt;String&gt;();\n        String[] searchValues = {\"Hello\", \"World\", \"Arizona\", \"CGCC\", \"Chandler\", \"205\"};\n\n        myList.addToFront(\"World\");\n        myList.addToFront(\"Hello\");\n        myList.addToRear(\"Chandler\");\n        myList.addToRear(\"Gilbert\");\n\n        System.out.println(myList);\n\n        System.out.println(\"Size = \" + myList.size());\n        System.out.println(\"First = \" + myList.first());\n        System.out.println(\"Last = \" + myList.last());\n\n        if (myList.isEmpty()) {\n            System.out.println(\"List is empty\");\n        }\n        else {\n            System.out.println(\"List is not empty\");\n        }\n\n        System.out.println();\n        System.out.println(\"Iterator test:\");\n        System.out.print(\"  \");\n        for(String s : myList) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println();\n        System.out.println(\"Contains testing (part 1):\");\n        for (String val : searchValues) {\n            if (myList.contains(val)) {\n                System.out.println(\"  myList contains \" + val + \" at index \" + myList.indexOf(val));\n            }\n            else {\n                System.out.println(\"  myList does not contain \" + val + \" index=\" + myList.indexOf(val));\n            }\n        }\n\n        System.out.println();\n        System.out.println(\"Remove some stuff:\");\n        String front = myList.removeFirst();\n        String rear = myList.removeLast();\n        System.out.println(\"Old front = \" + front);\n        System.out.println(\"Old rear = \" + rear);\n        System.out.println(\"Current list = \" + myList);\n        System.out.println(\"Size = \" + myList.size());\n        System.out.println(\"First = \" + myList.first());\n        System.out.println(\"Last = \" + myList.last());\n\n        System.out.println();\n        System.out.println(\"Contains testing (part 2):\");\n        for (String val : searchValues) {\n            if (myList.contains(val)) {\n                System.out.println(\"  myList contains \" + val + \" at index \" + myList.indexOf(val));\n            }\n            else {\n                System.out.println(\"  myList does not contain \" + val + \" index=\" + myList.indexOf(val));\n            }\n        }\n\n\n        System.out.println();\n        System.out.println(\"Remove the rest of the nodes:\");\n        front = myList.removeFirst();\n        rear = myList.removeLast();\n        System.out.println(\"Old front = \" + front);\n        System.out.println(\"Old rear = \" + rear);\n        System.out.println(\"Current list = \" + myList);\n        System.out.println(\"Size = \" + myList.size());\n\n        System.out.println();\n        System.out.println(\"Finishing up:\");\n        myList.addToFront(\"The\");\n        myList.addToRear(\"End\");\n        System.out.println(\"First = \" + myList.first());\n        System.out.println(\"Last = \" + myList.last());\n        System.out.println(\"Current list = \" + myList);\n        System.out.println(\"Size = \" + myList.size());\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/ListExamples/","title":"ListExamples.java","text":"<pre><code>package videoexamples.module06;\n\nimport videoexamples.module06.jsjf.*;\nimport java.util.Random;\n\n\npublic class ListExamples {\n\n    public static void main(String[] args) {\n        OrderedListADT&lt;Integer&gt; orderedList = new ArrayOrderedList&lt;Integer&gt;(2);\n        UnorderedListADT&lt;Integer&gt; unorderedList1 = new ArrayUnorderedList&lt;Integer&gt;(2);\n        UnorderedListADT&lt;Integer&gt; unorderedList2 = new ArrayUnorderedList&lt;Integer&gt;(2);\n\n        Random gen = new Random();\n\n        for (int ii=0;ii&lt;10;ii++) {\n            int num = gen.nextInt(100);\n            orderedList.add(num);\n            unorderedList1.addToFront(num);\n            unorderedList2.addToRear(num);\n        }\n\n        System.out.println(\"OrderedList [\" + orderedList.size() + \"]: \" + orderedList);\n        System.out.println(\"UnorderedList1 [\" + unorderedList1.size() + \"]: \" + unorderedList1);\n        System.out.println(\"UnorderedList2 [\" + unorderedList2.size() + \"]: \" + unorderedList2);\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/module-6-readme/","title":"README.md","text":"","boost":1},{"location":"csc205/module-6/code/module-6-readme/#module-6-linked-lists","title":"Module 6 - Linked Lists","text":"","boost":1},{"location":"csc205/module-6/code/module-6-readme/#introductory-videos","title":"Introductory videos","text":"<p>These videos give a brief overview of the types of lists and with how linked lists work.  I recommend watching these first, especially before watching the linked list video.</p> <ul> <li>VIDEO - Overview of Lists (5:42) gives a general introduction to List data structures and the types of lists.</li> <li>VIDEO - Overview of Linked Lists - Implementation &amp; Operations (11:33) gives a more specific introduction to Linked Lists.  </li> </ul>","boost":1},{"location":"csc205/module-6/code/module-6-readme/#csc205","title":"csc205","text":"<p>This package contains an implementation of a linked list.  This is a different implementation than the one in the jsjf package, intended to give you a simplified example of writing an abstract data type class.</p> <ul> <li>Video 1 (16:06) - Methods to add to the linked list, toString, report its size, and return the first and last elements of the linked list.</li> <li>Video 2 (20:25) - Methods to remove from the linked list and the contains() method</li> <li>Video 3 (7:54) - An iterator for our linked list</li> </ul> <p>Source code</p> <ul> <li>LinkedList.java - Linked List implementation</li> <li>LinkedListDriver.java - Code using the Linked List we implemented</li> </ul>","boost":1},{"location":"csc205/module-6/code/module-6-readme/#jsjf","title":"jsjf","text":"<p>The jsjf package contains code from the JavaFoundations book.  The videos below contain walkthroughs of that code.</p> <ul> <li>ArrayList.java Video (12:19) - Example implementation of an ArrayList</li> <li>LinkedList.java &amp; LinearNode.java Video (9:49) - Example of implementing a LinkedList with a separate LinearNode class.</li> <li>Ordered Lists Video (5:50) -  Ordered lists based on ArrayLists (ArrayOrderedList.java) and LinkedLists (LinkedOrderedList.java)</li> <li>Unordered Lists Video (7:19) - Unordered lists based on ArrayLists (ArrayUnorderedList.java) and LinkedLists (LinkedUnorderedList.java)</li> </ul>","boost":1},{"location":"csc205/module-6/code/csc205/","title":"Linked Lists - /csc205/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-6/code/csc205/#csc205","title":"/csc205/","text":"<ul> <li>LinkedList.java</li> </ul>","boost":1},{"location":"csc205/module-6/code/csc205/LinkedList/","title":"LinkedList.java","text":"<pre><code>package videoexamples.module06.csc205;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\npublic class LinkedList&lt;T&gt; implements Iterable&lt;T&gt; {\n\n    private ListNode&lt;T&gt; head;\n    private ListNode&lt;T&gt; tail;\n    private int size;\n\n    private class ListNode&lt;E&gt; {\n        private E element;\n        private ListNode&lt;E&gt; next;\n\n        public ListNode(E element, ListNode&lt;E&gt; next) {\n            this.element = element;\n            this.next = next;\n        }\n    }\n\n    public LinkedList() {\n        super();\n        size = 0;\n        head = tail = null;\n    }\n\n    public void addToFront(T elementToAdd) {\n        // Create a new node that has the old head as its next\n        ListNode&lt;T&gt; newNode = new ListNode&lt;T&gt;(elementToAdd, head);\n\n        // The head should now refer to the new node (the new head)\n        head = newNode;\n\n        // If the list was empty, this is the only node so it is also the tail!\n        if (isEmpty()) {\n            tail = newNode;\n        }\n        size++;\n    }\n\n    public void addToRear(T elementToAdd) {\n        if(isEmpty()) {\n            addToFront(elementToAdd);\n        }\n        else {\n            // Create a new node with a null next\n            ListNode&lt;T&gt; newNode = new ListNode&lt;T&gt;(elementToAdd, null);\n\n            // The new node will follow the existing tail\n            tail.next = newNode;\n\n            // Set the tail to the new node\n            tail = newNode;\n\n            size++;\n        }\n    }\n\n    public T removeFirst() {\n        // Check if the list is empty\n        if (isEmpty()) {\n            throw new NoSuchElementException(\"Empty Linkedlist\");\n        }\n\n        // Get the element from the head node\n        T ret = head.element;\n\n        // Set the head to the old head's next\n        ListNode&lt;T&gt; oldHead = head;\n        head = head.next;   // Set the new head\n\n        // Clear the reference in the old head node\n        oldHead.element = null;\n        oldHead.next = null;\n\n        size --;\n\n        if(isEmpty()) {\n            tail = null;     // The tail should be null if the list is empty\n        }\n        return ret;\n    }\n\n    public T removeLast() {\n        // Check if the list is empty\n        if (isEmpty()) {\n            throw new NoSuchElementException(\"Empty Linkedlist\");\n        }\n\n        // Get the element from the tail node\n        T ret = tail.element;\n\n        if (size==1) {\n            ret = removeFirst();\n        }\n        else {\n            // Traverse the list to find the next-to-last node which will\n            //  become the new tail.  The next-to-last node will have \n            //  next = tail\n            ListNode&lt;T&gt; newTail = head;  // Start looking at the tail\n            while (newTail.next != tail) {\n                newTail=newTail.next;\n            }\n            // At this point, new tail is referring to the next-to-last node\n\n            // Clear the old tail\n            ListNode&lt;T&gt; oldTail = tail;\n            oldTail.element = null;\n            oldTail.next = null;\n\n            // Set the tail to the new tail\n            tail = newTail;\n            tail.next = null;  // This was pointing to the old tail\n            size --;\n        }\n        return ret;\n    }\n\n    public Boolean contains(T value) {\n        Boolean found = false;\n\n        // Traverse the list, checking each node\n        ListNode&lt;T&gt; current = head;\n        while ((current != null) &amp;&amp; !(found)) {\n            // Check if the current node holds the element\n            found = current.element.equals(value);  \n            current = current.next;\n        }\n        return found;\n    }\n\n    public int indexOf(T value) {\n        int ret = -1;\n        int index = 0;\n\n        // Traverse the list, checking each node\n        ListNode&lt;T&gt; current = head;\n        while (current != null) {\n            if (current.element.equals(value)) {\n                ret = index;\n                break;\n            }\n            current = current.next;\n            index ++;\n        }\n        return ret;\n    }\n\n    public boolean isEmpty() {\n        return (size==0);\n    }\n\n    public int size() {\n        return size;\n    }\n\n    public T first() {\n        // Check if the list is empty\n        if (isEmpty()) {\n            throw new NoSuchElementException(\"Empty LinkedList\");\n        }\n        return head.element;\n    }\n\n    public T last() {\n        // Check if the list is empty\n        if (isEmpty()) {\n            throw new NoSuchElementException(\"Empty LinkedList\");\n        }\n        return tail.element;\n    }\n\n    @Override\n    public String toString() {\n        String ret = \"head -&gt; \";\n\n        // Traverse the list\n        ListNode&lt;T&gt; current = head;    // First element in the list\n        while (current != null) {\n            ret += current.element + \" -&gt; \";\n            current = current.next;   // Moves to the next node\n        }\n        return ret + \"tail\";\n    }\n\n    @Override\n    public Iterator&lt;T&gt; iterator() {\n        return new LinkedListIterator&lt;T&gt;(head);\n    }\n\n    private class LinkedListIterator&lt;E&gt; implements Iterator&lt;E&gt; {\n\n        private ListNode&lt;E&gt; current;\n\n        public LinkedListIterator(ListNode&lt;E&gt; current) {\n            super();\n            this.current = current;\n        }\n\n        @Override\n        public boolean hasNext() {\n            return (current != null);\n        }\n\n        @Override\n        public E next() {\n            // First check if there is anything left\n            if (!(hasNext())) {\n                return null;\n            }\n            E ret = current.element;\n            current = current.next;\n            return ret;\n        }\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/","title":"Linked Lists - /jsjf/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-6/code/jsjf/#jsjf","title":"/jsjf/","text":"<ul> <li>ArrayList.java</li> <li>ArrayOrderedList.java</li> <li>ArrayUnOrderedList.java</li> <li>LinearNode.java</li> <li>LinkedList.java</li> <li>LinkedOrderedList.java</li> <li>LinkedUnorderedList.java</li> <li>ListADT.java</li> <li>OrderedList.ADT.java</li> <li>UnorderedListADT.java</li> </ul>","boost":1},{"location":"csc205/module-6/code/jsjf/ArrayList/","title":"ArrayList.java","text":"<pre><code>package videoexamples.module06.jsjf;\n\nimport java.util.*;\n\nimport videoexamples.module06.jsjf.exceptions.*;\n\n/**\n * ArrayList represents an array implementation of a list. The front of\n * the list is kept at array index 0. This class will be extended\n * to create a specific kind of list.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic abstract class ArrayList&lt;T&gt; implements ListADT&lt;T&gt;, Iterable&lt;T&gt;\n{\n    private final static int DEFAULT_CAPACITY = 100;\n    private final static int NOT_FOUND = -1;\n\n    protected int rear;\n    protected T[] list; \n    protected int modCount;\n\n    /**\n     * Creates an empty list using the default capacity.\n     */\n    public ArrayList()\n    {\n        this(DEFAULT_CAPACITY);\n    }\n\n    /**\n     * Creates an empty list using the specified capacity.\n     *\n     * @param initialCapacity the integer value of the size of the array list\n     */\n    public ArrayList(int initialCapacity)\n    {\n        rear = 0;\n        list = (T[])(new Object[initialCapacity]);\n        modCount = 0;\n    }\n\n    /**\n     * Creates a new array to store the contents of this list with\n     * twice the capacity of the old one. Called by descendant classes\n     * that add elements to the list.\n     */\n    protected void expandCapacity()\n    {\n        T[] newList = (T[]) (new Object[list.length * 2]);\n        for(int ii=0;ii&lt;list.length;ii++) {\n            newList[ii] = list[ii];\n        }\n        list = newList;\n    }\n\n    /**\n     * Removes and returns the last element in this list.\n     *\n     * @return the last element in the list\n     * @throws EmptyCollectionException if the element is not in the list\n     */\n    public T removeLast() throws EmptyCollectionException\n    {\n        if (isEmpty()) {\n            throw new EmptyCollectionException(\"ArrayList\");\n        }\n\n        rear --;\n        T ret = list[rear];\n        list[rear] = null;\n        modCount++;\n\n        return ret; \n    }\n\n    /**\n     * Removes and returns the first element in this list.\n     *\n     * @return the first element in the list\n     * @throws EmptyCollectionException if the element is not in the list\n     */\n    public T removeFirst() throws EmptyCollectionException\n    {\n        if (isEmpty()) {\n            throw new EmptyCollectionException(\"ArrayList\");\n        }       \n\n        T ret = list[0];\n\n        // shift elements forward\n        rear --;\n        for (int scan=0; scan &lt; rear; scan++) {\n            list[scan] = list[scan+1];\n        }\n        list[rear] = null;\n\n        modCount ++;\n        return ret;  \n    }\n\n    /**\n     * Removes and returns the specified element.\n     *\n     * @param  element the element to be removed and returned from the list\n     * @return the removed element\n     * @throws ElementNotFoundException if the element is not in the list\n     */\n    public T remove(T element)\n    {\n        T result;\n        int index = find(element);\n\n        if (index == NOT_FOUND) {\n            throw new ElementNotFoundException(\"ArrayList\");\n        }\n\n        result = list[index];\n        rear--;\n\n        // shift the appropriate elements \n        for (int scan = index; scan &lt; rear; scan++) {\n            list[scan] = list[scan+1];\n        }\n\n        list[rear] = null;\n\n        modCount++;\n        return result;\n    }\n\n    /**\n     * Returns a reference to the element at the front of this list.\n     * The element is not removed from the list.  Throws an\n     * EmptyCollectionException if the list is empty.  \n     *\n     * @return a reference to the first element in the list\n     * @throws EmptyCollectionException if the list is empty\n     */\n    public T first() throws EmptyCollectionException\n    {\n        if (isEmpty()) {\n            throw new EmptyCollectionException(\"ArrayList\");\n        }\n\n        return list[0];\n    }\n\n    /**\n     * Returns a reference to the element at the rear of this list.\n     * The element is not removed from the list. Throws an\n     * EmptyCollectionException if the list is empty.  \n     *\n     * @return a reference to the last element of this list\n     * @throws EmptyCollectionException if the list is empty\n     */\n    public T last() throws EmptyCollectionException\n    {\n        if (isEmpty()) {\n            throw new EmptyCollectionException(\"ArrayList\");\n        }\n\n        return list[rear-1];\n    }\n\n    /**\n     * Returns true if this list contains the specified element.\n     *\n     * @param target the target element\n     * @return true if the target is in the list, false otherwise \n     */\n    public boolean contains(T target)\n    {\n        return (find(target) != NOT_FOUND);\n    }\n\n    /**\n     * Returns the array index of the specified element, or the\n     * constant NOT_FOUND if it is not found.\n     *\n     * @param target the target element\n     * @return the index of the target element, or the \n     *         NOT_FOUND constant\n     */\n    private int find(T target)\n    {\n        int scan = 0; \n        int result = NOT_FOUND;\n\n        if (!isEmpty()) {\n            while (result == NOT_FOUND &amp;&amp; scan &lt; rear) {\n                if (target.equals(list[scan])) {\n                    result = scan;\n                }\n                else {\n                    scan++;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns true if this list is empty and false otherwise. \n     *\n     * @return true if the list is empty, false otherwise\n     */\n    public boolean isEmpty()\n    {\n        return (rear == 0);\n    }\n\n    /**\n     * Returns the number of elements currently in this list.\n     *\n     * @return the number of elements in the list\n     */\n    public int size()\n    {\n        return rear; \n    }\n\n    /**\n     * Returns a string representation of this list. \n     * \n     * @return the string representation of the list\n     */\n    public String toString()\n    {\n        String ret = \"\";\n\n        for (int ii=0;ii&lt;rear;ii++) {\n            ret += list[ii] + \" \";\n        }\n\n        return ret; \n    }\n\n    /**\n     * Returns an iterator for the elements currently in this list.\n     * \n     * @return an iterator for the elements in the list\n     */\n    public Iterator&lt;T&gt; iterator()\n    {\n        return new ArrayListIterator();\n    }\n\n    /**\n     * ArrayListIterator iterator over the elements of an ArrayList.\n     */ \n    private class ArrayListIterator implements Iterator&lt;T&gt;\n    {\n        int iteratorModCount;\n        int current;\n\n        /**\n         * Sets up this iterator using the specified modCount.\n         * \n         * @param modCount the current modification count for the ArrayList\n         */\n        public ArrayListIterator()\n        {\n            iteratorModCount = modCount;\n            current = 0;\n        }\n\n        /**\n         * Returns true if this iterator has at least one more element\n         * to deliver in the iteration.\n         *\n         * @return  true if this iterator has at least one more element to deliver\n         *          in the iteration\n         * @throws  ConcurrentModificationException if the collection has changed\n         *          while the iterator is in use\n         */\n        public boolean hasNext() throws ConcurrentModificationException\n        {\n            if (iteratorModCount != modCount)\n                throw new ConcurrentModificationException();\n\n            return (current &lt; rear);\n        }\n\n        /**\n         * Returns the next element in the iteration. If there are no\n         * more elements in this iteration, a NoSuchElementException is\n         * thrown.\n         *\n         * @return  the next element in the iteration\n         * @throws  NoSuchElementException if an element not found exception occurs\n         * @throws  ConcurrentModificationException if the collection has changed\n         */\n        public T next() throws ConcurrentModificationException\n        {\n            if (!hasNext())\n                throw new NoSuchElementException();\n\n            current++;\n\n            return list[current - 1];\n        }\n\n        /**\n         * The remove operation is not supported in this collection.\n         * \n         * @throws UnsupportedOperationException if the remove method is called\n         */\n        public void remove() throws UnsupportedOperationException\n        {\n            throw new UnsupportedOperationException();\n        }\n\n    }   \n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/ArrayOrderedList/","title":"ArrayOrderedList.java","text":"<pre><code>package videoexamples.module06.jsjf;\n\nimport videoexamples.module06.jsjf.exceptions.*;\n\n/**\n * ArrayOrderedList represents an array implementation of an ordered list.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class ArrayOrderedList&lt;T&gt; extends ArrayList&lt;T&gt;\nimplements OrderedListADT&lt;T&gt;\n{   \n    /**\n     * Creates an empty list using the default capacity.\n     */\n    public ArrayOrderedList()\n    {\n        super();\n    }\n\n    /**\n    * Creates an empty list using the specified capacity.\n    *\n    * @param initialCapacity the initial size of the list\n    */\n    public ArrayOrderedList(int initialCapacity)\n    {\n        super(initialCapacity);\n    }\n\n    /**\n    * Adds the specified Comparable element to this list, keeping\n    * the elements in sorted order.\n    *\n    * @param element the element to be added to the list\n    */\n    public void add(T element)\n    {\n        if (!(element instanceof Comparable)) {\n            throw new NonComparableElementException(\"OrderedList\");\n        }\n\n        Comparable&lt;T&gt; comparableElement = (Comparable&lt;T&gt;)element;\n\n        if (size() == list.length) {\n           expandCapacity();\n        }\n\n        int scan = 0;  \n\n        // find the insertion location\n        while (scan &lt; rear &amp;&amp; comparableElement.compareTo(list[scan]) &gt; 0) {\n           scan++;\n        }\n\n        // shift existing elements up one\n        for (int shift=rear; shift &gt; scan; shift--) {\n           list[shift] = list[shift-1];\n        }\n\n        // insert element\n        list[scan] = element;\n        rear++;\n        modCount++;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/ArrayUnorderedList/","title":"ArrayUnorderedList.java","text":"<pre><code>package videoexamples.module06.jsjf;\n\nimport videoexamples.module06.jsjf.exceptions.*;\n\n/**\n * ArrayUnorderedList represents an array implementation of an unordered list.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class ArrayUnorderedList&lt;T&gt; extends ArrayList&lt;T&gt; \nimplements UnorderedListADT&lt;T&gt;\n{\n    /**\n     * Creates an empty list using the default capacity.\n     */\n    public ArrayUnorderedList()\n    {\n        super();\n    }\n\n    /**\n     * Creates an empty list using the specified capacity.\n     *\n     * @param initialCapacity the initial size of the list\n     */\n    public ArrayUnorderedList(int initialCapacity)\n    {\n        super(initialCapacity);\n    }\n\n    /**\n     * Adds the specified element to the front of this list.\n     * \n     * @param element the element to be added to the front of the list\n     */\n    public void addToFront(T element)\n    {\n        if (size() == list.length)\n            expandCapacity();\n\n        // shift elements up one \n        for (int scan=rear; scan &gt; 0; scan--) {\n            list[scan] = list[scan-1];\n        }\n\n        list[0] = element;\n        rear++;\n        modCount++;\n    }\n\n    /**\n     * Adds the specified element to the rear of this list.\n     *\n     * @param element the element to be added to the list\n     */\n    public void addToRear(T element)\n    {\n        if (size() == list.length)\n            expandCapacity();\n\n        list[rear] = element;\n        rear++;\n        modCount++;\n    }\n\n    /**\n     * Adds the specified element after the specified target element.\n     * Throws an ElementNotFoundException if the target is not found.\n     *\n     * @param element the element to be added after the target element\n     * @param target  the target that the element is to be added after\n     */\n    public void addAfter(T element, T target)\n    {\n        if (size() == list.length)\n            expandCapacity();\n\n        int scan = 0;\n\n        // find the insertion point\n        while (scan &lt; rear &amp;&amp; !target.equals(list[scan])) {\n            scan++;\n        }\n\n        if (scan == rear)\n            throw new ElementNotFoundException(\"UnorderedList\");\n\n        scan++;\n\n        // shift elements up one\n        for (int shift = rear; shift &gt; scan; shift--) {\n            list[shift] = list[shift - 1];\n        }\n\n        // insert element\n        list[scan] = element;\n        rear++;\n        modCount++;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/LinearNode/","title":"LinearNode.java","text":"<pre><code>package videoexamples.module06.jsjf;\n\n/**\n * LinearNode represents a node in a linked list.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class LinearNode&lt;E&gt;\n{\n    private LinearNode&lt;E&gt; next;\n    private E element;\n\n    /**\n     * Creates an empty node.\n     */\n    public LinearNode()\n    {\n        next = null;\n        element = null;\n    }\n\n    /**\n     * Creates a node storing the specified element.\n     *\n     * @param elem the element to be stored within the new node\n     */\n    public LinearNode(E elem)\n    {\n        next = null;\n        element = elem;\n    }\n\n    /**\n     * Returns the node that follows this one.\n     *\n     * @return the node that follows the current one\n     */\n    public LinearNode&lt;E&gt; getNext()\n    {\n        return next;\n    }\n\n    /**\n     * Sets the node that follows this one.\n     *\n     * @param node the node to be set to follow the current one\n     */\n    public void setNext(LinearNode&lt;E&gt; node)\n    {\n        next = node;\n    }\n\n    /**\n     * Returns the element stored in this node.\n     *\n     * @return the element stored in this node\n     */\n    public E getElement()\n    {\n        return element;\n    }\n\n    /**\n     * Sets the element stored in this node.\n     *\n     * @param elem the element to be stored in this node\n     */\n    public void setElement(E elem)\n    {\n        element = elem;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/LinkedList/","title":"LinkedList.java","text":"<pre><code>package videoexamples.module06.jsjf;\n\nimport java.util.*;\n\nimport videoexamples.module06.jsjf.exceptions.*;\n\n/**\n * LinkedList represents a linked implementation of a list.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic abstract class LinkedList&lt;T&gt; implements ListADT&lt;T&gt;, Iterable&lt;T&gt;\n{\n    protected int count;\n    protected LinearNode&lt;T&gt; head, tail;\n    protected int modCount;\n\n    /**\n     * Creates an empty list.\n     */\n    public LinkedList()\n    {\n        count = 0;\n        head = tail = null;\n        modCount = 0;\n    }\n\n    /**\n     * Removes the first element in this list and returns a reference\n     * to it. Throws an EmptyCollectionException if the list is empty.\n     *\n     * @return a reference to the first element of this list\n     * @throws EmptyCollectionException if the list is empty\n     */\n    public T removeFirst() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Removes the last element in this list and returns a reference\n     * to it. Throws an EmptyCollectionException if the list is empty.\n     *\n     * @return the last element in this list\n     * @throws EmptyCollectionException if the list is empty    \n     */\n    public T removeLast() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Removes the first instance of the specified element from this\n     * list and returns a reference to it. Throws an EmptyCollectionException \n     * if the list is empty. Throws a ElementNotFoundException if the \n     * specified element is not found in the list.\n     *\n     * @param  targetElement the element to be removed from the list\n     * @return a reference to the removed element\n     * @throws EmptyCollectionException if the list is empty\n     * @throws ElementNotFoundException if the target element is not found\n     */\n    public T remove(T targetElement) throws EmptyCollectionException, \n    ElementNotFoundException \n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"LinkedList\");\n\n        boolean found = false;\n        LinearNode&lt;T&gt; previous = null;\n        LinearNode&lt;T&gt; current = head;\n\n        while (current != null &amp;&amp; !found)\n            if (targetElement.equals(current.getElement()))\n                found = true;\n            else\n            {\n                previous = current;\n                current = current.getNext();\n            }\n\n        if (!found)\n            throw new ElementNotFoundException(\"LinkedList\");\n\n        if (size() == 1)  // only one element in the list\n            head = tail = null;\n        else if (current.equals(head))  // target is at the head \n            head = current.getNext();\n        else if (current.equals(tail))  // target is at the tail\n        {\n            tail = previous;\n            tail.setNext(null);\n        }\n        else  // target is in the middle\n            previous.setNext(current.getNext());\n\n        count--;\n        modCount++;\n\n        return current.getElement();\n    }\n\n    /**\n     * Returns the first element in this list without removing it. \n     *\n     * @return the first element in this list\n     * @throws EmptyCollectionException if the list is empty\n     */\n    public T first() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Returns the last element in this list without removing it. \n     *\n     * @return the last element in this list  \n     * @throws EmptyCollectionException if the list is empty\n     */\n    public T last() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Returns true if the specified element is found in this list and \n     * false otherwise. Throws an EmptyCollectionException if the list \n     * is empty.\n     *\n     * @param  targetElement the element that is sought in the list\n     * @return true if the element is found in this list\n     * @throws EmptyCollectionException if the list is empty\n     */\n    public boolean contains(T targetElement) throws EmptyCollectionException \n    {\n        // To be completed as a Programming Project\n\n        return true;  // temp\n    }\n\n    /**\n     * Returns true if this list is empty and false otherwise.\n     *\n     * @return true if the list is empty, false otherwise\n     */\n    public boolean isEmpty()\n    {\n        // To be completed as a Programming Project\n\n        return true;  // temp\n    }\n\n    /**\n     * Returns the number of elements in this list.\n     *\n     * @return the number of elements in the list\n     */\n    public int size()\n    {\n        // To be completed as a Programming Project\n\n        return 0;  // temp\n    }\n\n    /**\n     * Returns a string representation of this list.\n     *\n     * @return a string representation of the list    \n     */\n    public String toString()\n    {\n        // To be completed as a Programming Project\n\n        return \"\";  // temp\n    }\n\n    /**\n     * Returns an iterator for the elements in this list. \n     *\n     * @return an iterator over the elements of the list\n     */\n    public Iterator&lt;T&gt; iterator()\n    {\n        return new LinkedListIterator();\n    }\n\n    /**\n     * LinkedIterator represents an iterator for a linked list of linear nodes.\n     */\n    private class LinkedListIterator implements Iterator&lt;T&gt;\n    {\n        private int iteratorModCount;  // the number of elements in the collection\n        private LinearNode&lt;T&gt; current;  // the current position\n\n        /**\n         * Sets up this iterator using the specified items.\n         *\n         * @param collection  the collection the iterator will move over\n         * @param size        the integer size of the collection\n         */\n        public LinkedListIterator()\n        {\n            current = head;\n            iteratorModCount = modCount;\n        }\n\n        /**\n         * Returns true if this iterator has at least one more element\n         * to deliver in the iteration.\n         *\n         * @return  true if this iterator has at least one more element to deliver\n         *          in the iteration\n         * @throws  ConcurrentModificationException if the collection has changed\n         *          while the iterator is in use\n         */\n        public boolean hasNext() throws ConcurrentModificationException\n        {\n            if (iteratorModCount != modCount) \n                throw new ConcurrentModificationException();\n\n            return (current != null);\n        }\n\n        /**\n         * Returns the next element in the iteration. If there are no\n         * more elements in this iteration, a NoSuchElementException is\n         * thrown.\n         *\n         * @return the next element in the iteration\n         * @throws NoSuchElementException if the iterator is empty\n         */\n        public T next() throws ConcurrentModificationException\n        {\n            if (!hasNext())\n                throw new NoSuchElementException();\n\n            T result = current.getElement();\n            current = current.getNext();\n            return result;\n        }\n\n        /**\n         * The remove operation is not supported.\n         * \n         * @throws UnsupportedOperationException if the remove operation is called\n         */\n        public void remove() throws UnsupportedOperationException\n        {\n            throw new UnsupportedOperationException();\n        }\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/LinkedOrderedList/","title":"LinkedOrderedList.java","text":"<pre><code>package videoexamples.module06.jsjf;\n\nimport videoexamples.module06.jsjf.exceptions.*;\n\n/**\n * LinkedOrderedList represents a singly linked implementation of an \n * ordered list.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class LinkedOrderedList&lt;T&gt; extends LinkedList&lt;T&gt; \nimplements OrderedListADT&lt;T&gt;\n{\n    /**\n     * Creates an empty list.\n     */\n    public LinkedOrderedList()\n    {\n        super();\n    }\n\n    /**\n     * Adds the specified element to this list at the location determined by\n     * the element's natural ordering. Throws a NonComparableElementException \n     * if the element is not comparable.\n     *\n     * @param element the element to be added to this list\n     * @throws NonComparableElementException if the element is not comparable\n     */\n    public void add(T element)\n    {\n        // To be completed as a Programming Project\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/LinkedUnorderedList/","title":"LinkedUnorderedList.java","text":"<pre><code>package videoexamples.module06.jsjf;\n\nimport videoexamples.module06.jsjf.exceptions.*;\n\n/**\n * LinkedUnorderedList represents a singly linked implementation of an \n * unordered list.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class LinkedUnorderedList&lt;T&gt; extends LinkedList&lt;T&gt; \nimplements UnorderedListADT&lt;T&gt;\n{\n    /**\n     * Creates an empty list.\n     */\n    public LinkedUnorderedList()\n    {\n        super();\n    }\n\n    /**\n     * Adds the specified element to the front of this list.\n     *\n     * @param element the element to be added to the list\n     */\n    public void addToFront(T element)\n    {\n        // To be completed as a Programming Project\n    }\n\n    /**\n     * Adds the specified element to the rear of this list.\n     *\n     * @param element the element to be added to the list\n     */\n    public void addToRear(T element)\n    {\n        // To be completed as a Programming Project\n    }\n\n\n    /**\n     * Adds the specified element to this list after the given target.\n     *\n     * @param  element the element to be added to this list\n     * @param  target the target element to be added after\n     * @throws ElementNotFoundException if the target is not found\n     */\n    public void addAfter(T element, T target)\n    {\n        // To be completed as a Programming Project\n    }   \n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/ListADT/","title":"ListADT.java","text":"<pre><code>package videoexamples.module06.jsjf;\n\nimport java.util.Iterator;\n\n/**\n * ListADT defines the interface to a general list collection. Specific\n * types of lists will extend this interface to complete the\n * set of necessary operations.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface ListADT&lt;T&gt; extends Iterable&lt;T&gt;\n{\n    /**  \n     * Removes and returns the first element from this list. \n     * \n     * @return the first element from this list\n     */\n    public T removeFirst();\n\n    /**  \n     * Removes and returns the last element from this list. \n     *\n     * @return the last element from this list\n     */\n    public T removeLast();\n\n    /**  \n     * Removes and returns the specified element from this list. \n     *\n     * @param element the element to be removed from the list\n     */\n    public T remove(T element);\n\n    /**  \n     * Returns a reference to the first element in this list. \n     *\n     * @return a reference to the first element in this list\n     */\n    public T first();\n\n    /**  \n     * Returns a reference to the last element in this list. \n     *\n     * @return a reference to the last element in this list\n     */\n    public T last();\n\n    /**  \n     * Returns true if this list contains the specified target element. \n     *\n     * @param target the target that is being sought in the list\n     * @return true if the list contains this element\n     */\n    public boolean contains(T target);\n\n    /**  \n     * Returns true if this list contains no elements. \n     *\n     * @return true if this list contains no elements\n     */\n    public boolean isEmpty();\n\n    /**  \n     * Returns the number of elements in this list. \n     *\n     * @return the integer representation of number of elements in this list\n     */\n    public int size();\n\n    /**  \n     * Returns an iterator for the elements in this list. \n     *\n     * @return an iterator over the elements in this list\n     */\n    public Iterator&lt;T&gt; iterator();\n\n    /**  \n     * Returns a string representation of this list. \n     *\n     * @return a string representation of this list\n     */\n    public String toString();\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/OrderedListADT/","title":"OrderedListADT.java","text":"<pre><code>package videoexamples.module06.jsjf;\n\n/**\n * OrderedListADT defines the interface to an ordered list collection. Only\n * Comparable elements are stored, kept in the order determined by\n * the inherent relationship among the elements.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface OrderedListADT&lt;T&gt; extends ListADT&lt;T&gt;\n{\n    /**\n     * Adds the specified element to this list at the proper location\n     *\n     * @param element the element to be added to this list\n     */\n    public void add(T element);\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/UnorderedListADT/","title":"UnorderedListADT.java","text":"<pre><code>package videoexamples.module06.jsjf;\n\n/**\n * UnorderedListADT defines the interface to an unordered list collection. \n * Elements are stored in any order the user desires.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface UnorderedListADT&lt;T&gt; extends ListADT&lt;T&gt;\n{\n    /**  \n     * Adds the specified element to the front of this list. \n     *\n     * @param element the element to be added to the front of this list    \n     */\n    public void addToFront(T element);  \n\n    /**  \n     * Adds the specified element to the rear of this list. \n     *\n     * @param element the element to be added to the rear of this list    \n     */\n    public void addToRear(T element); \n\n    /**  \n     * Adds the specified element after the specified target. \n     *\n     * @param element the element to be added after the target\n     * @param target  the target is the item that the element will be added\n     *                after    \n     */\n    public void addAfter(T element, T target);\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/exceptions/","title":"Linked Lists - /jsjf/exceptions/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-6/code/jsjf/exceptions/#jsjfexceptions","title":"/jsjf/exceptions/","text":"<ul> <li>ElementNotFoundException.java</li> <li>EmptyCollectionException.java</li> <li>NonComparableElementException.java</li> </ul>","boost":1},{"location":"csc205/module-6/code/jsjf/exceptions/ElementNotFoundException/","title":"ElementNotFoundException.java","text":"<pre><code>package videoexamples.module06.jsjf.exceptions;\n\n/**\n * ElementNotFoundException represents the situation in which a target element \n * is not present in a collection\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class ElementNotFoundException extends RuntimeException\n{\n    /**\n     * Sets up this exception with an appropriate message.\n     */\n    public ElementNotFoundException (String collection)\n    {\n        super (\"The target element is not in this \" + collection);\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/exceptions/EmptyCollectionException/","title":"EmptyCollectionException.java","text":"<pre><code>package videoexamples.module06.jsjf.exceptions;\n\n/**\n * Represents the situation in which a collection is empty.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class EmptyCollectionException extends RuntimeException\n{\n    /**\n     * Sets up this exception with an appropriate message.\n     * @param collection the name of the collection\n     */\n    public EmptyCollectionException(String collection)\n    {\n        super(\"The \" + collection + \" is empty.\");\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-6/code/jsjf/exceptions/NonComparableElementException/","title":"NonComparableElementException.java","text":"<pre><code>package videoexamples.module06.jsjf.exceptions;\n\n/**\n * NonComparableElementException  represents the situation in which an attempt \n * is made to add an element that is not comparable to an ordered collection\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class NonComparableElementException extends RuntimeException\n{\n    /**\n     * Sets up this exception with an appropriate message.\n     * \n     * @param collection  the exception message to deliver\n     */\n    public NonComparableElementException (String collection)\n    {\n        super (\"The \" + collection + \" requires Comparable elements.\");\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/","title":"Stacks and Queues - Index","text":"","boost":1},{"location":"csc205/module-7/#csc205-module-7","title":"CSC205 - Module 7","text":"","boost":1},{"location":"csc205/module-7/#topics","title":"Topics","text":"<ul> <li>Stacks</li> <li>Queues</li> <li>FIFO vs LIFO</li> <li>array and linked implementations</li> <li>circular arrays</li> </ul>","boost":1},{"location":"csc205/module-7/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-7/#book","title":"Book","text":"<ul> <li>Java Foundations <ul> <li>Chapter 12 - 14 </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections 1.3</li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-7/#notes","title":"Notes","text":"<ul> <li>Stacks and Queues - Notes</li> </ul>","boost":1},{"location":"csc205/module-7/#slides","title":"Slides","text":"<ul> <li>Slides - 12 - Introduction to Collections - Stacks</li> <li>Slides - 13 - Linked Structures - Stacks</li> <li>Slides - 14 - Queues</li> </ul>","boost":1},{"location":"csc205/module-7/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-7/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<ul> <li>Stacks and Queues - Frequently Asked Questions</li> </ul>","boost":1},{"location":"csc205/module-7/#notes-from-the-algorithms-book","title":"Notes from the Algorithms book","text":"<ul> <li>1.3 Bags, Queues, and Stacks</li> <li>4.3 Stacks and Queues</li> </ul>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/","title":"Stacks and Queues - Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#csc205-module-7","title":"CSC205 - Module 7","text":"","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-how-do-we-get-the-jsjf-package","title":"Question: How do we get the jsjf package?","text":"<p>Each module in the <code>videoexamples</code> package contains a <code>jsjf</code> package with the relevant classes and interfaces for that particular module.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-why-use-a-stack-when-there-are-more-advanced-data-structures-available-today","title":"Question: Why use a stack when there are more advanced data structures available today?","text":"<p>There are some applications for which a stack is more well-suited than other data structures. While other collections may offer more features, those features may be undesirable for a particular application. For example, think of a card game where the cards are drawn from a stack. You only want players to take the top card (\u201cpop\u201d) - you wouldn\u2019t want the player to have the ability to search for a particular card and remove it from the middle of the stack and you don\u2019t need to worry about how efficient it is to find a certain card since you only care about the top card.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-what-is-the-benefit-of-using-a-stack-or-queue-instead-of-a-linked-list","title":"Question: What is the benefit of using a stack or queue instead of a linked list?","text":"<p>First, note that we can implement either a stack or queue using a linked list, so it isn\u2019t exactly an either-or situation. The benefit of stacks and queues is that they limit where items are removed and added and don\u2019t allow access to any other location. So for a stack, only the top is accessible while for a queue only the head and tail are accessible. For many applications, it is desirable to limit where items are added and to prevent random access to elements in the collection. Stacks and queues are two data structures that meet that requirement.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-why-would-you-use-a-list-for-a-stack-or-queue-instead-of-just-a-stack-or-queue","title":"Question: Why would you use a list for a stack or queue instead of just a stack or queue?","text":"<p>You can certainly use a list (either a Linked List or Array List) instead of a stack or queue, though doing so means you will have access to more than just the stack and queue methods. That reduces the usefulness of a stack and queue - one of the benefits of using those data structures is specifically that it limits what you can do. On the other hand, if you don\u2019t have a stack or queue class available, a list will work - you just have to be careful not to do anything un-stack or un-queue-like, such as adding to the middle.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-why-are-we-implementing-a-stack-ourselves-instead-of-using-the-java-api-stack-class","title":"Question: Why are we implementing a stack ourselves instead of using the Java API Stack class?","text":"<p>The primary reason is that the best way to learn about something is to see how it is built. Additionally, the Java Stack class inherits many methods from Vector (its underlying data structure), including <code>elementAt</code>, <code>iterator</code>, and <code>setElementAt</code>, which may not be desirable for the client using the stack.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-what-is-lifo-and-fifo","title":"Question: What is LIFO and FIFO?","text":"<p>LIFO is an acronym for \"Last in - First out \"and FIFO is an acronym for \"First in - First out\". They describe how stacks (LIFO) and queues (FIFO) work. You will often hear stacks (or queues) referred to as LIFO (or FIFO) structures.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-can-you-add-to-the-middle-of-a-stack-or-queue","title":"Question: Can you add to the middle of a stack or queue?","text":"<p>No. The whole point of using a stack or queue is that you cannot add to the middle - only to one of the ends. If you need to add to the middle, you should use a different data type, such as a list.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-why-use-a-stack-or-queue-since-you-cant-add-items-to-the-middle-of-those-data-structures","title":"Question: Why use a stack or queue since you can\u2019t add items to the middle of those data structures?","text":"<p>There are situations where you don\u2019t want to allow adding in the middle. For example, if you are in line (a queue), you don\u2019t want someone to cut in front of you. If you use a stack to keep track of changes so you can undo, you don't want to add a change to the middle of that stack - if you did then the undo wouldn\u2019t work correctly. There are other data structures you can use if you want to add items to the middle, such as a linked list.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-can-stacks-and-queues-be-used-interchangeably","title":"Question: Can stacks and queues be used interchangeably?","text":"<p>No, not if the order elements are removed from the collection is important. Swapping a stack for a queue effectively reverses the order in which elements are processed. Here are two examples that show why swapping a stack for a queue (and vice versa) can be problematic: * A stack is used to remember changes made to a file to allow the \"undo\" operation to work. If swapped with a queue, then instead of the last change being undone, the first change would be undone. It would be very difficult to even determine how to update the file to incorporate that. * A queue is used when you wait in a checkout line. If swapped with a stack, then the last person who showed up in line would be the next person serviced. A viral video would likely result.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-what-is-the-difference-between-a-linked-stack-and-a-regular-stack","title":"Question: What is the difference between a linked stack and a regular stack?","text":"<p>From the client\u2019s point of view, there should not be any difference. From the implementation perspective, the linked stack does not require a resize like an array-based stack would when it gets full.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-what-are-the-advantages-of-using-a-linked-vs-array-implementation-of-a-stack","title":"Question: What are the advantages of using a linked vs array implementation of a stack?","text":"<p>From the client\u2019s point of view, there should not be any difference. From the implementation perspective, the linked stack does not require a resize like an array-based stack would when it gets full.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-when-are-queues-used-in-the-real-world","title":"Question: When are queues used in the real world?","text":"<p>Any situation where you have things that you want to process in the order they arrive in. For example, say you are writing an application that lets users sign up for tickets to an event with high demand. You want to make sure the first requests were handled first and later requests handled later.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-when-are-stacks-used-in-the-real-world","title":"Question: When are stacks used in the real world?","text":"<p>If you have ever used \"undo\" functionality, you have benefited from the use of a stack.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-why-dont-stacks-and-queues-have-remove-operations","title":"Question: Why don\u2019t stacks and queues have \"remove\" operations?","text":"<p>They do, but they aren\u2019t called remove - they are called <code>pop()</code> and <code>dequeue()</code>, respectively.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-why-are-there-so-many-different-terms-for-addremove-operations-in-queues","title":"Question: Why are there so many different terms for add/remove operations in queues?","text":"<p>The classic add/remove names for a queue are enqueue/dequeue. Though add and remove could be used. Java has different method names for its queue class which provide different functionality so the programmer can decide what should happen in error cases. Also a list could be used as a queue by using <code>addToRear</code> and <code>removeFirst</code> functions in place of enqueue/dequeue.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-when-we-remove-from-a-stack-or-queue-does-the-element-get-ignored-or-deleted","title":"Question: When we remove from a stack or queue does the element get ignored or deleted?","text":"<p>Technically, it depends on the implementation, but typically we will delete anything removed from a stack or queue to free up memory. But there\u2019s no reason you couldn\u2019t add a flag to each node to indicate a deleted node and then ignore that node.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-why-would-i-use-a-stack-instead-of-a-queue","title":"Question: Why would I use a stack instead of a queue?","text":"<p>Use a stack when you want to deal with the last thing that entered the collection - such as undoing the last change made in a file or backtracking to a previous step. A queue would be used when you want to handle things in the order they were added to the collection.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-the-examples-from-the-book-use-a-linked-list-as-a-queue-so-why-make-a-separate-class","title":"Question: The examples from the book use a linked list as a queue. So why make a separate class?","text":"<p>You can use a list as a queue by always adding to the rear and removing from the front (or vice versa!), but by creating a separate Queue class you can prevent unwanted methods from being exposed (traversal, adding in the middle, etc). And you get to define the names of the operations yourself. Also, by using the Queue interface you can change the underlying implementation without affecting client code.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-is-there-a-way-to-sort-a-queue-to-make-it-more-efficient","title":"Question: Is there a way to sort a queue to make it more efficient?","text":"<p>Adding and removing from a queue is already very efficient - O(1) if implemented properly. There is no reason to add any complexity for efficiency's sake. There is a data structure called a Priority Queue (which we will cover later) that does allow you to skip less important items in the queue in favor of more important items.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-when-would-you-use-a-circular-array","title":"Question: When would you use a circular array?","text":"<p>To efficiently implement a queue with an array we need to treat the array as a circular buffer (we treat the array as though the two ends are consecutive elements, so array[n-1] comes before array[0] and array[n] would be the same as array[0]).</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-why-is-a-circular-array-better-for-implementing-a-queue-does-the-complexity-of-implementation-override-the-benefit","title":"Question: Why is a circular array better for implementing a queue? Does the complexity of implementation override the benefit?","text":"<p>The circular array allows us to more efficiently implement queue operations. Going from O(n) to O(1) is a huge gain in efficiency. So, the added complexity of a circular array is worth it - we wind up with a much more efficient data structure.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-would-a-circular-array-work-for-implementing-a-stack","title":"Question: Would a circular array work for implementing a stack?","text":"<p>Yes, but since we can implement a stack with efficient operations without using a circular array, there is no reason to add that complexity. A regular array will suffice.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-how-can-a-circular-data-structure-be-fifo","title":"Question: How can a circular data structure be FIFO?","text":"<p>Keep in mind that we use the circular array to implement the queue, but the queue interface and the user of the queue should not be able to tell the difference between a linked or circular array implementation. There is still a head/front and tail/rear of the queue, it just moves around the circle.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-how-does-a-circular-queue-work-since-a-queue-has-to-have-a-set-front-and-rear","title":"Question: How does a circular queue work since a queue has to have a set front and rear?","text":"<p>A queue has a front and rear, but they aren\u2019t always in the same location in the array. A circular queue keeps track of the indices of the front and rear of the queue and adjusts those indices accordingly when something is added or removed. Note that a circular queue still cannot have more items in it than space in the array used to implement it.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-is-it-possible-to-add-elements-in-the-middle-when-using-a-circular-queue","title":"Question: Is it possible to add elements in the middle when using a circular queue?","text":"<p>It depends on what you mean. A queue implemented using a circular array should absolutely not allow elements to be added to the middle of the queue. However, the array used to implement the queue should absolutely allow items to be added to the middle since with a circular array the front/rear of the queue could be at any index in the array.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-the-circular-array-changes-the-front-in-dequeue-and-rear-in-enqueue-with-the-code-below","title":"Question: The circular array changes the front (in dequeue) and rear (in enqueue) with the code below:","text":"<pre><code>front = (front + 1) % queue.length // dequeue\n</code></pre>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#and","title":"and","text":"<pre><code>rear = (rear + 1) % queue.length // enqueue\n</code></pre>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#how-does-that-not-cause-an-index-error","title":"How does that not cause an index error?","text":"<p>And error is avoided by the modulus (remainder) operator (<code>%</code>). The result of that operation will be an index between <code>0</code> and <code>queue.length-1</code>. So the index will always be valid. Note that if front is <code>0</code> and rear was <code>queue.length-1</code> the result of that operation would be <code>0</code>. To avoid rear overwriting front we check that the circular array is not full before we add the element. If the array is full we resize it to ensure there is enough room.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-is-there-a-limit-to-the-size-of-a-stack-or-queue","title":"Question: Is there a limit to the size of a stack or queue?","text":"<p>For a linked implementation, the answer is no, at least in theory (your computer only has so much memory.). For an array implementation, we are limited by the size of the array unless we do a resize.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-how-would-you-implement-a-stack-using-a-queue","title":"Question: How would you implement a stack using a queue?","text":"<p>Using a single queue it would be tough. And there isn\u2019t an efficient way to do this - it is simpler to just implement a stack. With two queues you could simulate a stack by adding everything to one queue then when you move all the elements from the first queue to the second <code>(q2.enqueue(q1.dequeue())</code> until only one item is left in the first queue. That would be the most recent thing added. Then add things to the 2<sup>nd</sup> queue until you need to repeat the above procedure to pop again, (keeping in mind this time you are moving from q2 to q1).</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-what-is-the-point-of-a-repeating-key","title":"Question: What is the point of a repeating key?","text":"<p>Think of trying different keys on a key ring to open a lock. You can choose a key, try it, flip it to the back, and try the next one. If you continue this you will eventually reach the original key. That is the idea behind the repeating key. Instead of using a one character key (or an infinite character key) a key of several characters is used. The key will be shorter than the message you want to encrypt, so when you exhaust all the characters of the key you start over. This is a perfect application of a queue because by adding the character back to the queue after you use it it will be available to you at the appropriate time.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-is-there-an-advantage-to-using-postfix-expressions-rather-than-infix-expressions","title":"Question: Is there an advantage to using postfix expressions rather than infix expressions?","text":"<p>Yes - postfix expressions are unambiguous, so there is no need for order of operations, grouping symbols, and so on to indicate in what order the operations should be performed.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-faq/#question-can-you-make-an-ordered-stack-that-sorts-whatever-you-put-inside-of-it","title":"Question: Can you make an ordered stack that sorts whatever you put inside of it?","text":"<p>Well, if you sort it then it isn\u2019t really a FIFO stack, so no. However, the data structure you are describing is pretty much a heap, which we will study later.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/","title":"Stacks and Queues - Notes","text":"","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#csc205-module-7","title":"CSC205 - Module 7","text":"","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#stacks","title":"Stacks","text":"<p>A stack is a linear data structure whose elements are added in \u201clast in, first out\u201d (LIFO) order. So, when we remove an element from a stack it will be the last one we added.</p> <p></p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#stack-operations","title":"Stack Operations","text":"<ul> <li>push(E element) adds an element to top of the stack.</li> <li>pop() removes &amp; returns the top element from the stack.</li> <li>peek() returns the element at top of the stack.</li> <li>size() returns the number of elements in the stack.</li> <li>isEmpty() returns true if the stack is empty, false if it is not.</li> </ul>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#applications-of-stacks","title":"Applications of Stacks","text":"<p>Stacks have a wide variety of applications such as implementing an undo feature, storing the history in a browser (used by the back button), validating a string with a recursive structure (such as HTML).</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#application-postfix-expressions","title":"Application: Postfix Expressions","text":"<p>One natural application of a stack is for evaluating postfix expressions. A postfix expression is written with the operator following the two operands, as opposed to the infix notation you may be used to where the operator is between the two operands. </p> <p>The following expressions are equivalent:</p> <p>Postfix: <code>15 8 -</code> Infix: <code>15 - 8</code></p> <p>The benefit of postfix expressions is that they are unambiguous. They completely eliminate the need for parenthesis. </p> <p>The following expressions are equivalent:</p> <p>Postfix: <code>3 4 * 2 5 + - 4 * 2 /</code> Infix: <code>(3 * 4 - (2 + 5)) * 4 / 2</code></p> <p>We can use a stack to evaluate postfix expressions using the following algorithm: Scan the expression left to right</p> <ul> <li>When we read an operand, push it on the stack.</li> <li>When we read an operator, pop the top two elements of the stack, perform the operation, &amp; push the result.</li> <li>The result is the value on the stack when the expression is exhausted.</li> </ul> <p>The postfix expressions video has a walkthrough of the algorithm.</p> <p>https://youtu.be/P5YWUXrPEyw</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#java-api-stacks","title":"Java API: Stacks","text":"<p><code>java.util.Stack</code> is the Java API implementation of the Stack abstract data type. It implements all the operations, but there is no interface. It extends the <code>Vector</code> class so it allows several non-stack operations, which can be an issue in applications where you want to only allow stack operations. (Side note: one of the benefits of limiting the interface of a data structure is that it makes debugging easier. You don\u2019t have to worry about things getting stuck in the middle of a stack if you only have push &amp; pop operations). The Java API also provides other data structures that can perform like a stack (<code>java.util.Deque</code>, linked-list, etc), but again these do not use the standard stack method names and it is up to the programmer to ensure that the data structure acts like a stack.</p> <p>We can create our own Stack class that does not allow the user to perform illegal operations.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#stack-interface-jsjf","title":"Stack Interface - jsjf","text":"<p>For each abstract data type we implement in this class, the <code>jsjf</code> package provides an interface. Your code should use the interfaces and data structures defined in the <code>jsjf</code> package, not the Java API. The naming convention for the interfaces will be <code>ColllectionNameADT</code>. From this point forward all of your projects should make use of the <code>jsjf</code> package.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#stackadt-interface","title":"StackADT Interface","text":"<pre><code>package jsjf;\npublic interface StackADT&lt;T&gt;\n{\n    public void push(T element);\n    public T pop();\n    public T peek();\n    public boolean isEmpty();\n    public int size();\n    public String toString();\n}\n</code></pre> <p>Note</p> <p>Note that the <code>StackADT</code> interface is generic.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#defining-an-exception","title":"Defining an Exception","text":"<p>Our stack implementations will throw an <code>EmptyCollectionException</code> when a pop or peek is attempted on an empty stack. The <code>EmptyCollectionException</code> class extends <code>RuntimeException</code>. We will pass a string into the constructor to indicate the type of collection on which the error was thrown.</p> <pre><code>package jsjf.exceptions;\npublic class EmptyCollectionException extends RuntimeException\n{\n    /**\n    * Sets up this exception with an appropriate message.\n    * @param collection the name of the collection\n    */\n    public EmptyCollectionException(String collection)\n    {\n        super(\"The \" + collection + \" is empty.\");\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#implementing-stacks","title":"Implementing Stacks","text":"<p>When implementing an abstract data type, you must first decide on the underlying representation. We will see three different implementations:</p> <ol> <li>An implementation using the <code>LinkedList</code> data structure we created in the last module (in the <code>csc205</code> package).</li> <li>An implementation using arrays (in the <code>jsjf</code> package).</li> <li>An implementation using linked nodes (in the <code>jsjf</code> package).</li> </ol> <p>We will briefly discuss the three approaches above. See the example code and videos for each for a more detailed description.</p> <p>You may wonder why we bother implementing a stack (and later a queue) three different ways, or even at all since the Java API provides a stack for us. The reason we avoid the Java Stack is that it contains extraneous methods that allow our \"stack\" to be used like a Vector which is undesirable.</p> <p>Seeing different implementations has multiple benefits for you later on in your career:</p> <ul> <li>You get the opportunity to work with code you did not write.</li> <li>You learn more about how the data structures work so that you can make good choices about data structures.</li> <li>You get to see different approaches to solving a problem.</li> </ul> <p>While you may never actually implement a stack again once you leave this class, the three benefits above will all make you a better programmer.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#implementing-stacks-linked-list","title":"Implementing Stacks - Linked List","text":"<p>The simplest way to implement a stack is by using an existing data structure. For example, in our <code>FastStack</code> class, we use the <code>LinkedList</code> we created earlier. The <code>LinkedList</code> has all the functions we need to implement the StackADT interface.</p> StackADT LinkedList push(T element) addToFront(T element) pop() removeFromFront() peek() first() isEmpty() isEmpty() size() size() toString() toString() <p>Our FastStack class has one data member: a LinkedList.</p> <pre><code>LinkedList&lt;T&gt; elements;\n</code></pre> <p>Then, we implement each method in StackADT by calling the corresponding method of ListStack. For example, here is our pop() implementation:</p> <pre><code>@Override\npublic T pop() {\n    return elements.removeFirst();\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#implementing-stacks-arrays","title":"Implementing Stacks - Arrays","text":"<p>We can use an array as the underlying structure in a stack implementation. The ArrayStack class in the <code>jsjf</code> package does this. The array holds references to the objects stored in the stack. We also need to carefully handle the case when the array is full - our stack shouldn\u2019t be limited to the size of the array.</p> <p></p> <p>The bottom of the stack is at index 0. The top of the stack is at index 4 where the reference to Object5 is stored. We keep track of the top using a variable creatively named \u201ctop\u201d. Note that top actually points to the next available slot, so the actual top is at index top-1. The top also doubles as the size of the stack. You may notice this looks very similar to an ArrayList.</p> <p>The number of cells in the array is called its capacity. We can\u2019t change the capacity of an existing array. We should not have to worry too often about the stack reaching capacity, but when the top reaches the end of the array we will copy the array to an array of double the size.</p> <p>Pushing and popping elements will affect the stack. After popping (which removes Object5). It is up to the user what to do with Object5 after it is returned from the <code>pop()</code> method.</p> <p></p> <p>Next we push element Object6. Note the stack looks exactly like it did in the first example, except now index 4 refers to Object6.</p> <p></p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#implementing-stacks-linked-nodes","title":"Implementing Stacks - Linked Nodes","text":"<p>The <code>LinkedStack</code> class in the <code>jsjf</code> package implements the <code>StackADT</code> using linked nodes (<code>LinearNode</code>). Recall that the <code>LinkedList</code> class in <code>jsjf</code> also used <code>LinearNodes</code>. We will need to keep track of the <code>LinearNode</code> at the top of the stack as well as the count. Note that we don\u2019t need to concern ourselves with other nodes in the stack as the top node is the only node the stack \"cares\" about.</p> <p></p> <p>The LinkedStack after we pop:</p> <p></p> <p>The LinkedStack after we push Object6:</p> <p></p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#analysis-of-stack-methods","title":"Analysis of Stack Methods","text":"<p>All stack operations are O(1) for both linked and array based implementations. Since we know exactly where the top of the array is it is easy to find and modify. However, when using an array implementation, if the array is full it has to be resized which is an O(n) operation since we have to copy every element to the new array. Fortunately, resizing the array does not happen often - only after filling up the existing array. So while a worst case push operation could take linear (O(n)) time, that time averages out to O(1) time when spread out over all push operations (because if the size of the array is X it takes at least X push operations to fill the array).</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#queues","title":"Queues","text":"<p>A queue is a linear data structure whose elements are added in \"first in, first out\" (FIFO) order. We add elements to one end of the queue and remove them from the other. This has the effect of removing elements in the same order they are added to a queue.</p> <p></p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#queue-operations","title":"Queue Operations","text":"<ul> <li><code>enqueue(E element)</code> adds an element to rear of the queue.</li> <li><code>dequeue()</code> removes &amp; returns the top element from the queue.</li> <li><code>first()</code> returns the element at top of the queue.</li> <li><code>size()</code> returns the number of elements in the queue.</li> <li><code>isEmpty()</code> returns true if the queue is empty, false if it is not.</li> </ul>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#java-api-queues","title":"Java API: Queues","text":"<p>The Java API provides a Queue interface. The interface has two methods each for adding an element, removing an  element, and returning the first element in the queue. The first set of enqueue/dequeue/first methods throws an exception if a problem occurs during the operation, whereas the second set of methods returns a value indicating an error (boolean for offer, null for poll/peek). This allows the programmer to decide how to handle exceptional cases.</p> Queue Operation Throws Exception Returns Special Value enqueue add(element) offer(element) dequeue remove() poll() first element peek()","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#applications-of-queues","title":"Applications of Queues","text":"<p>Queues have a wide variety of applications. Operating systems use queues extensively to manage access to a single resource, such as a disk, printer, or network. Any application that uses a buffer, such as watching an online video, uses a queue to store the data that has been downloaded before it is presented to the user. Queues can also be used to model real-world situations where there is a line, such as a call center or a ticket window.</p> <p>There are video walkthroughs of the applications below on the GitHub repository.</p> <ul> <li>Videos</li> <li>Example Code</li> </ul>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#application-coded-messages","title":"Application: Coded Messages","text":"<ul> <li>Example Code - Codes.java</li> <li>Video</li> </ul> <p>A Caesar cipher encodes a message by shifting each letter in a message by some constant k. For example, if k=5, then A becomes F, B becomes G, etc.</p> <p></p> <p>Unfortunately, this is very easy to break (or fortunately if it is your enemies who are encoding messages this way).</p> <p>We can improve upon the Caesar cipher by changing the value of k depending on where the letter is in the message. We do this by using a repeating key: a series of integers that determine how much we shift a character.</p> <p>Given the repeating key {3 1 7 4 2}, we shift the first character by 3, the next by 1, the next by 7, and so on. When the key is exhausted, we start over at the beginning, so the 6<sup>th</sup> character would be shifted by 3, the 7<sup>th</sup> by 1, and so on. This is called the Vigen\u00e8re cipher.</p> <p>It was originally:</p> <p></p> <p>We can use a queue to hold the repeating key. Then as we encrypt (or decrypt) a character, we dequeue a key, use it, then enqueue it so that it can be used again if needed.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#application-ticket-counter-simulation","title":"Application: Ticket Counter Simulation","text":"<ul> <li>Example Code</li> <li>video</li> </ul> <p>We can use a queue to simulate waiting lines at a movie theater. Our program will determine how many cashiers are needed to keep the wait time below a certain threshold. We will assume customers arrive every 15 seconds and processing a request takes 2 minutes. We will adjust the number of cashiers until the average wait time is less than 7 minutes. We will use a queue to hold the customers that are currently waiting in line.</p> <p></p> <p>The ticket counter video walks through the ticket counter simulation.</p> <ul> <li>video</li> </ul>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#queue-interface-jsjf","title":"Queue Interface - jsjf","text":"<p>For each abstract data type we implement in this class, the <code>jsjf</code> package provides an interface. Your code should use the interfaces and data structures defined in the <code>jsjf</code> package, not the Java API. The naming convention for the interfaces will be <code>CollectionNameADT</code>. From this point forward all of your projects should make use of the <code>jsjf</code> package.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#queueadt-interface","title":"QueueADT Interface","text":"<pre><code>package jsjf;\n\npublic interface QueueADT&lt;T&gt;\n{\n    public void enqueue(T element);\n    public T dequeue();\n    public T first();\n    public boolean isEmpty();\n    public int size();\n    public String toString();\n}\n</code></pre> <p>Note that the <code>QueueADT</code> interface is generic.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#implementing-queues","title":"Implementing Queues","text":"<p>When implementing an abstract data type, you must first decide on the underlying representation. </p> <p>We will see three different implementations:</p> <ol> <li>An implementation using the LinkedList data structure we created in the last module (in the <code>csc205</code> package).</li> <li>An implementation using linked nodes (in the <code>jsjf</code> package).</li> <li>An implementation using circular arrays (in the <code>jsjf</code> package).</li> </ol> <p>We will briefly discuss the three approaches above. See the example code and videos for each for a more detailed description.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#implementing-queues-linked-list","title":"Implementing Queues - Linked List","text":"<p>The simplest way to implement a queue is by using an existing data structure. For example, in our <code>FastQueue</code> class, we use the <code>LinkedList</code> we created earlier. Just as with the <code>FastStack</code>, the <code>LinkedList</code> class has all the functions we need to implement the <code>QueueADT</code> interface. However, notice we add to the rear and remove from the front.</p> QueueADT LinkedList enqueue(T element) addToRear(T element) dequeue() removeFromFront() first() first() isEmpty() isEmpty() size() size() toString() toString() <p>Our <code>FastQueue</code> class has one data member: a <code>LinkedList</code>.</p> <pre><code>LinkedList&lt;T&gt; elements;\n</code></pre> <p>Then, we implement each method in <code>QueueADT</code> by calling the corresponding method of <code>ListStack</code>. For example, here is our <code>dequeue()</code> implementation:</p> <pre><code>@Override\npublic T dequeue() {\n    return elements.removeFromFront();\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#implementing-queues-linked-nodes","title":"Implementing Queues: Linked Nodes","text":"<p>This implementation is similar to <code>LinkedStack</code>, except that we add an additional reference to the rear node. We use <code>null</code> as the next reference of the last node (<code>rear</code>) to indicate the end of the list.</p> <p></p> <p>After removing an element from the front:</p> <p></p> <p>After enqueuing Object6:</p> <p></p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#implementing-queues-circular-array","title":"Implementing Queues: Circular Array","text":"<p>It may initially seem that we can use an array to implement a queue. However, since we add and remove from opposite ends, there is no way to avoid shifting the elements. If the front is at index <code>0</code>, then we have to shift the elements to the left when we <code>dequeue</code>.  conversely, if we set the rear to index <code>0</code>, we have to shift all the elements to the right when we <code>enqueue</code>. Both of these are linear time operations - O(n) - which is inefficient.</p> <p>We can improve the performance by using a circular array. A circular array is an array that is treated as if it loops back around on itself. We consider index <code>0</code> to come after the last index. When we reach the last index, we use the modulus operator (<code>%</code>) to reset the index back to <code>0</code> like</p> <pre><code>    rear = (rear + 1) % queue.count;\n</code></pre> <p>Our CircularArrayQueue will have data members to keep track of the front and rear and the total size, and we resize the array when it is full.</p> <p>Here is an example of a circular array with 4 objects:</p> <p></p> <p>After 2 dequeue operations and enqueuing Object5, we have an array that looks like this. Notice that the front is no longer at index 0;</p> <p></p> <p>And after another dequeue operation and enqueuing Object6, Object7, &amp; Object 8, the circular array looks like this:</p> <p></p> <p>The array itself that we are using looks like this:</p> <p></p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#analysis-of-queue-methods","title":"Analysis of Queue Methods","text":"<p>All stack operations are O(1) for both linked &amp; array based implementations, assuming our array implementation uses a circular array. Note that the same issues we had with resizing the array with stacks also occurs with our array queue implementation - a worst case push operation could take linear (O(n)) time though that time still averages out to O(1) time when spread out over all the enqueue operations.</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#queue-efficiency","title":"Queue Efficiency","text":"<p>All operations in a Linked Queue are O(1). For an array implementation where we make index 0 the front of the queue, enqueue is O(1) but dequeue is O(n) since we have to shift the elements in the array. Circular arrays avoid the shift, so all operations for a circular array implementation are O(1). Therefore, like with a stack, all queue methods are O(1) given an ideal implementation (linked or circular queue).</p>","boost":1},{"location":"csc205/module-7/stacks-and-queues-notes/#linked-versus-array-based-implementations","title":"Linked versus Array-based Implementations","text":"<p>Advantages to linked implementation:</p> <ul> <li>Nodes only added as they are needed, so no wasted space in the data structure.</li> <li>An efficient queue implementation is much simpler since the front/rear are not tied to a specific memory location.</li> </ul> <p>Advantages to array implementation:</p> <ul> <li>No extra memory allocated for the node references.</li> <li>Less wasteful if you know beforehand how big the stack or queue will need to be.</li> <li>More efficient since there is no need to constantly allocate space for new elements and no garbage collection is required.</li> <li>Arrays tend to be more optimizable by the compiler and JVM than linked lists.</li> </ul>","boost":1},{"location":"csc205/module-7/code/","title":"Stacks and Queues - Example Code - Index","text":"","boost":1},{"location":"csc205/module-7/code/#_1","title":"/","text":"<ul> <li>README.md</li> <li>StackQueueExample.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/#codes","title":"/codes/","text":"<ul> <li>Codes.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/#csc205","title":"/csc205/","text":"<ul> <li>FastQueue.java</li> <li>FastStack.java</li> <li>LinkedList.java</li> <li>QueueDriver.java</li> <li>StackDriver.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/#jsjf","title":"/jsjf/","text":"<ul> <li>ArrayStack.java</li> <li>CircularArrayQueue.java</li> <li>LinearNode.java</li> <li>LinkedQueue.java</li> <li>LinkedStack.java</li> <li>QueueADT.java</li> <li>StackADT.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/#jsjfexceptions","title":"/jsjf/exceptions/","text":"<ul> <li>EmptyCollectionException.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/#mazetester","title":"/mazetester/","text":"<ul> <li>Maze.java</li> <li>MazeSolver.java</li> <li>MazeTester.java</li> <li>Position.java</li> <li>testfile.txt</li> <li>testfile2.txt</li> <li>testfile3.txt</li> </ul>","boost":1},{"location":"csc205/module-7/code/#postfixtester","title":"/postfixtester/","text":"<ul> <li>PostfixEvaluator.java</li> <li>PostfixTester.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/#ticketcounter","title":"/ticketcounter/","text":"<ul> <li>Customer.java</li> <li>TicketCounter.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/#towersofhanoi","title":"/towersofhanoi/","text":"<ul> <li>SolveTowers.java</li> <li>TowersofHanoi.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/StackQueueExample/","title":"StackQueueExample.java","text":"<pre><code>package videoexamples.module07;\n\nimport java.util.Random;\n\nimport videoexamples.module07.csc205.FastQueue;\nimport videoexamples.module07.csc205.FastStack;\n\npublic class StackQueueExample {\n\n    public static void main(String[] args) {\n        FastStack&lt;Integer&gt; myStack = new FastStack&lt;Integer&gt;();\n        FastQueue&lt;Integer&gt; myQueue = new FastQueue&lt;Integer&gt;();\n        Random rand = new Random();\n\n        System.out.println(\"Adding: \");\n        for (int ii=0;ii&lt;10;ii++) {\n            int num = rand.nextInt(100);\n            System.out.print(num + \" \");\n            myStack.push(num);\n            myQueue.enqueue(num);\n        }\n        System.out.println(\"\\n\");\n\n        System.out.println(\"Initial data structures:\");\n        System.out.println(\"  myStack: \" + myStack);\n        System.out.println(\"  myQueue: \" + myQueue);\n\n        System.out.println(\"\\nRemoving: \");\n        for (int ii=0;ii&lt;4;ii++) {\n            System.out.print(\"From stack: \" + myStack.pop() + \" \");\n            System.out.println(\"From queue: \" + myQueue.dequeue() + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"Final data structures:\");\n        System.out.println(\"  myStack: \" + myStack);\n        System.out.println(\"  myQueue: \" + myQueue);\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/module-7-readme/","title":"README.md","text":"","boost":1},{"location":"csc205/module-7/code/module-7-readme/#module-7-stacks-queues","title":"Module 7 - Stacks &amp; Queues","text":"<p>Introductory Videos:</p> <ul> <li>Introduction to Stacks(3:49)</li> <li>Introduction to Queues(3:23)</li> </ul>","boost":1},{"location":"csc205/module-7/code/module-7-readme/#csc205","title":"csc205","text":"<p>This package contains a quick implementation of a stack &amp; queue using the LinkedList class we created in the previous module.  This allows us to have a working Stack &amp; Queue we can use, as the implementation of the jsjf Stack &amp; Queue will be left as an assignment.</p> <ul> <li> <p>LinkedList.java - Linked List implementation from previous module</p> </li> <li> <p>FastStack.java Video(10:28): Implementation of the StackADT interface using a LinkedList</p> </li> <li> <p>StackDriver.java - Driver class to test for FastStack</p> </li> <li> <p>FastQueue.java - Video(8:15): Implementation of the QueueADT interface using a LinkedList</p> </li> <li>QueueDriver.java - Driver class to test for FastQueue</li> </ul>","boost":1},{"location":"csc205/module-7/code/module-7-readme/#jsjf","title":"jsjf","text":"<p>The jsjf package contains code from the JavaFoundations book.  The videos below contain walkthroughs of that code.  Note that some of the examples have been changed to use FastStack &amp; FastQueue</p>","boost":1},{"location":"csc205/module-7/code/module-7-readme/#jsjf-stacks","title":"jsjf - Stacks","text":"<ul> <li>Video (5:03): Example implementations of an Stack using an array and a linked list</li> </ul> <p>StackADT.java - Stack interface ArrayStack.java - Array implementation of a stack LinkedStack.java - Linked implementation of a stack LinearNode.java - Linked node class used in linked implementation of a stack</p>","boost":1},{"location":"csc205/module-7/code/module-7-readme/#jsjf-queues","title":"jsjf - Queues","text":"<ul> <li>Video (9:04): Example implementations of an Queue using an array and a linked list</li> </ul> <p>QueueADT.java - Queue interface ArrayQueue.java - Array implementation of a Queue LinkedQueue.java - Linked implementation of a Queue LinearNode.java - Linked node class used in linked implementation of a Queue</p>","boost":1},{"location":"csc205/module-7/code/module-7-readme/#towersofhanoi-stack-example","title":"towersofhanoi - Stack example","text":"<p>Video (5:45): Example using a stack to show the solution to the Towers of Hanoi.  Also includes an example of using a HashMap.</p>","boost":1},{"location":"csc205/module-7/code/module-7-readme/#mazetester-stack-example","title":"mazetester - Stack example","text":"<p>Video (4:00): Example using a stack to solve a maze</p>","boost":1},{"location":"csc205/module-7/code/module-7-readme/#postfixtester-stack-example","title":"postfixtester - Stack example","text":"<p>Video (8:53): Example of a postfix calculator using a stack</p>","boost":1},{"location":"csc205/module-7/code/module-7-readme/#ticketcounter-queue-example","title":"ticketcounter - Queue example","text":"<p>Video (8:56): Example of a simulator of a movie ticket counter using queues</p>","boost":1},{"location":"csc205/module-7/code/module-7-readme/#codes-queue-example","title":"codes - Queue example","text":"<p>Video (6:44): Example of encryption/decryption using a queue to store a key</p>","boost":1},{"location":"csc205/module-7/code/codes/","title":"Stacks and Queues - /codes/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-7/code/codes/#codes","title":"/codes/","text":"<ul> <li>Codes.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/codes/Codes/","title":"Codes.java","text":"<pre><code>package videoexamples.module07.codes;\n\nimport videoexamples.module07.csc205.FastQueue;\nimport videoexamples.module07.jsjf.QueueADT;\n\n/**\n * Codes demonstrates the use of queues to encrypt and decrypt messages.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class Codes\n{\n    /**\n     * Encode and decode a message using a key of values stored in\n     * a queue.\n     */\n    public static void main(String[] args)\n    { \n        int[] key = {4, 8, 15, 16, 23, 42};\n        Integer keyValue;\n        String encoded = \"\", decoded = \"\";\n\n        String message = \"Computer Science is no more about computers than astronomy is about telescopes\";\n\n        QueueADT&lt;Integer&gt; encodingQueue = new FastQueue&lt;Integer&gt;();\n        QueueADT&lt;Integer&gt; decodingQueue = new FastQueue&lt;Integer&gt;();\n\n        System.out.println (\"Original Message:\\n\" + message + \"\\n\");\n\n        // load key queues \n        for (int scan = 0; scan &lt; key.length; scan++)\n        {\n            encodingQueue.enqueue(key[scan]);\n            decodingQueue.enqueue(key[scan]);\n        }\n\n        // encode message \n        for (int scan = 0; scan &lt; message.length(); scan++)\n        {\n            keyValue = encodingQueue.dequeue();\n            encoded += (char) (message.charAt(scan) + keyValue);\n            encodingQueue.enqueue(keyValue);\n        }\n\n        System.out.println (\"Encoded Message:\\n\" + encoded + \"\\n\");\n\n        // decode message \n        for (int scan = 0; scan &lt; encoded.length(); scan++)\n        {\n            keyValue = decodingQueue.dequeue();\n            decoded += (char) (encoded.charAt(scan) - keyValue);\n            decodingQueue.enqueue(keyValue);\n        }\n\n        System.out.println (\"Decoded Message:\\n\" + decoded);\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/csc205/","title":"Stacks and Queues - /csc205/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-7/code/csc205/#csc205","title":"/csc205/","text":"<ul> <li>FastQueue.java</li> <li>FastStack.java</li> <li>LinkedList.java</li> <li>QueueDriver.java</li> <li>StackDriver.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/csc205/FastQueue/","title":"FastQueue.java","text":"<pre><code>package videoexamples.module07.csc205;\n\nimport videoexamples.module07.jsjf.QueueADT;\n\npublic class FastQueue&lt;T&gt; implements QueueADT&lt;T&gt; {\n\n    LinkedList&lt;T&gt; elements;\n\n    public FastQueue() {\n        super();\n        this.elements = new LinkedList&lt;T&gt;();\n    }\n\n    @Override\n    public void enqueue(T element) {\n        elements.addToRear(element);\n    }\n\n    @Override\n    public T dequeue() {\n        return elements.removeFirst();\n    }\n\n    @Override\n    public T first() {\n        return elements.first();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return elements.isEmpty();\n    }\n\n    @Override\n    public int size() {\n        return elements.size();\n    }\n\n    @Override\n    public String toString() {\n        String ret = \"front-&gt; \";\n        for (T ele : elements) {\n            ret += ele + \" \";\n        }\n        return ret + \" &lt;- rear\";\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/csc205/FastStack/","title":"FastStack.java","text":"<pre><code>package videoexamples.module07.csc205;\n\nimport videoexamples.module07.jsjf.StackADT;\n\npublic class FastStack&lt;T&gt; implements StackADT&lt;T&gt; {\n\n    LinkedList&lt;T&gt; elements;\n\n    public FastStack() {\n        super();\n        this.elements = new LinkedList&lt;T&gt;();\n    }\n\n    @Override\n    public void push(T element) {\n        elements.addToFront(element);\n    }\n\n    @Override\n    public T pop() {\n        return elements.removeFirst();\n    }\n\n    @Override\n    public T peek() {\n        return elements.first();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return elements.isEmpty();\n    }\n\n    @Override\n    public int size() {\n        return elements.size();\n    }\n\n    @Override\n    public String toString() {\n        String ret = \"top-&gt; \";\n        for(T ele : elements) {\n            ret += ele + \" \";\n        }\n        return ret;\n    }\n\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/csc205/LinkedList/","title":"LinkedList.java","text":"<pre><code>package videoexamples.module07.csc205;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\npublic class LinkedList&lt;T&gt; implements Iterable&lt;T&gt; {\n\n    private ListNode&lt;T&gt; head;\n    private ListNode&lt;T&gt; tail;\n    private int size;\n\n    private class ListNode&lt;E&gt; {\n        private E element;\n        private ListNode&lt;E&gt; next;\n\n        public ListNode(E element, ListNode&lt;E&gt; next) {\n            this.element = element;\n            this.next = next;\n        }\n    }\n\n    public LinkedList() {\n        super();\n        size = 0;\n        head = tail = null;\n    }\n\n    public void addToFront(T elementToAdd) {\n        // Create a new node that has the old head as its next\n        ListNode&lt;T&gt; newNode = new ListNode&lt;T&gt;(elementToAdd, head);\n\n        // The head should now refer to the new node (the new head)\n        head = newNode;\n\n        // If the list was empty, this is the only node so it is also the tail!\n        if (isEmpty()) {\n            tail = newNode;\n        }\n        size++;\n    }\n\n    public void addToRear(T elementToAdd) {\n        if(isEmpty()) {\n            addToFront(elementToAdd);\n        }\n        else {\n            // Create a new node with a null next\n            ListNode&lt;T&gt; newNode = new ListNode&lt;T&gt;(elementToAdd, null);\n\n            // The new node will follow the existing tail\n            tail.next = newNode;\n\n            // Set the tail to the new node\n            tail = newNode;\n\n            size++;\n        }\n    }\n\n    public T removeFirst() {\n        // Check if the list is empty\n        if (isEmpty()) {\n            throw new NoSuchElementException(\"Empty Linkedlist\");\n        }\n\n        // Get the element from the head node\n        T ret = head.element;\n\n        // Set the head to the old head's next\n        ListNode&lt;T&gt; oldHead = head;\n        head = head.next;   // Set the new head\n\n        // Clear the reference in the old head node\n        oldHead.element = null;\n        oldHead.next = null;\n\n        size --;\n\n        if(isEmpty()) {\n            tail = null;     // The tail should be null if the list is empty\n        }\n        return ret;\n    }\n\n    public T removeLast() {\n        // Check if the list is empty\n        if (isEmpty()) {\n            throw new NoSuchElementException(\"Empty Linkedlist\");\n        }\n\n        // Get the element from the tail node\n        T ret = tail.element;\n\n        if (size==1) {\n            ret = removeFirst();\n        }\n        else {\n            // Traverse the list to find the next-to-last node which will\n            //  become the new tail.  The next-to-last node will have \n            //  next = tail\n            ListNode&lt;T&gt; newTail = head;  // Start looking at the tail\n            while (newTail.next != tail) {\n                newTail=newTail.next;\n            }\n            // At this point, new tail is referring to the next-to-last node\n\n            // Clear the old tail\n            ListNode&lt;T&gt; oldTail = tail;\n            oldTail.element = null;\n            oldTail.next = null;\n\n            // Set the tail to the new tail\n            tail = newTail;\n            tail.next = null;  // This was pointing to the old tail\n            size --;\n        }\n        return ret;\n    }\n\n    public Boolean contains(T value) {\n        Boolean found = false;\n\n        // Traverse the list, checking each node\n        ListNode&lt;T&gt; current = head;\n        while ((current != null) &amp;&amp; !(found)) {\n            // Check if the current node holds the element\n            found = current.element.equals(value);  \n            current = current.next;\n        }\n        return found;\n    }\n\n    public int indexOf(T value) {\n        int ret = -1;\n        int index = 0;\n\n        // Traverse the list, checking each node\n        ListNode&lt;T&gt; current = head;\n        while (current != null) {\n            if (current.element.equals(value)) {\n                ret = index;\n                break;\n            }\n            current = current.next;\n            index ++;\n        }\n        return ret;\n    }\n\n    public boolean isEmpty() {\n        return (size==0);\n    }\n\n    public int size() {\n        return size;\n    }\n\n    public T first() {\n        // Check if the list is empty\n        if (isEmpty()) {\n            throw new NoSuchElementException(\"Empty LinkedList\");\n        }\n        return head.element;\n    }\n\n    public T last() {\n        // Check if the list is empty\n        if (isEmpty()) {\n            throw new NoSuchElementException(\"Empty LinkedList\");\n        }\n        return tail.element;\n    }\n\n    @Override\n    public String toString() {\n        String ret = \"head -&gt; \";\n\n        // Traverse the list\n        ListNode&lt;T&gt; current = head;    // First element in the list\n        while (current != null) {\n            ret += current.element + \" -&gt; \";\n            current = current.next;   // Moves to the next node\n        }\n        return ret + \"tail\";\n    }\n\n    @Override\n    public Iterator&lt;T&gt; iterator() {\n        return new LinkedListIterator&lt;T&gt;(head);\n    }\n\n    private class LinkedListIterator&lt;E&gt; implements Iterator&lt;E&gt; {\n\n        private ListNode&lt;E&gt; current;\n\n        public LinkedListIterator(ListNode&lt;E&gt; current) {\n            super();\n            this.current = current;\n        }\n\n        @Override\n        public boolean hasNext() {\n            return (current != null);\n        }\n\n        @Override\n        public E next() {\n            // First check if there is anything left\n            if (!(hasNext())) {\n                return null;\n            }\n            E ret = current.element;\n            current = current.next;\n            return ret;\n        }\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/csc205/QueueDriver/","title":"QueueDriver.java","text":"<pre><code>package videoexamples.module07.csc205;\n\npublic class QueueDriver {\n\n    public static void main(String[] args) {\n        System.out.println(\"FastQueue testing:\");\n\n        FastQueue&lt;String&gt; queue1 = new FastQueue&lt;String&gt;();\n        FastQueue&lt;Integer&gt; queue2 = new FastQueue&lt;Integer&gt;();\n\n        queue1.enqueue(\"neworleans\");\n        queue1.enqueue(\"tampabay\");\n        queue1.enqueue(\"carolina\");\n        queue1.enqueue(\"atlanta\");\n\n        for(int x=1;x&lt;10;x++) {\n            queue2.enqueue(x);\n        }\n\n        System.out.println(\"Queue1 (size=\" + queue1.size() + \"): \" + queue1);\n        System.out.println(\"Queue2 (size=\" + queue2.size() + \"): \" + queue2);\n\n        queue1.dequeue();\n        queue2.dequeue();\n        queue2.dequeue();\n        queue2.dequeue();\n\n        System.out.println(\"After dequeue()\");\n        System.out.println(\"Queue1 (size=\" + queue1.size() + \"): \" + queue1);\n        System.out.println(\"Queue2 (size=\" + queue2.size() + \"): \" + queue2);\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/csc205/StackDriver/","title":"StackDriver.java","text":"<pre><code>package videoexamples.module07.csc205;\n\npublic class StackDriver {\n\n    public static void main(String args[]) {\n        System.out.println(\"FastStack testing:\");\n\n        FastStack&lt;String&gt; stack1 = new FastStack&lt;String&gt;();\n        FastStack&lt;Integer&gt; stack2 = new FastStack&lt;Integer&gt;();\n\n        stack1.push(\"neworleans\");\n        stack1.push(\"tampabay\");\n        stack1.push(\"carolina\");\n        stack1.push(\"atlanta\");\n\n        for(int x=1;x&lt;10;x++) {\n            stack2.push(x);\n        }\n        System.out.println(\"Stack1 (size=\" + stack1.size() + \"): \" + stack1);\n        System.out.println(\"Stack2 (size=\" + stack2.size() + \"): \" + stack2);\n\n        stack1.pop();\n        stack2.pop();\n        stack2.pop();\n        stack2.pop();\n\n        System.out.println(\"After pop():\");\n        System.out.println(\"Stack1 (size=\" + stack1.size() + \"): \" + stack1);\n        System.out.println(\"Stack2 (size=\" + stack2.size() + \"): \" + stack2);\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/jsjf/","title":"Stacks and Queues - /jsjf/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-7/code/jsjf/#jsjf","title":"/jsjf/","text":"<ul> <li>ArrayStack.java</li> <li>CircularArrayQueue.java</li> <li>LinearNode.java</li> <li>LinkedQueue.java</li> <li>LinkedStack.java</li> <li>QueueADT.java</li> <li>StackADT.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/jsjf/#jsjfexceptions","title":"/jsjf/exceptions/","text":"<ul> <li>EmptyCollectionException.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/jsjf/ArrayStack/","title":"ArrayStack.java","text":"<pre><code>package videoexamples.module07.jsjf;\n\nimport java.util.Arrays;\n\nimport videoexamples.module07.jsjf.exceptions.*;\n\n/**\n * An array implementation of a stack in which the bottom of the\n * stack is fixed at index 0.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class ArrayStack&lt;T&gt; implements StackADT&lt;T&gt;\n{\n    private final static int DEFAULT_CAPACITY = 100;\n\n    private int top;  \n    private T[] stack;\n\n    /**\n     * Creates an empty stack using the default capacity.\n     */\n    public ArrayStack()\n    {\n        this(DEFAULT_CAPACITY);\n    }\n\n    /**\n     * Creates an empty stack using the specified capacity.\n     * @param initialCapacity the initial size of the array \n     */\n    public ArrayStack(int initialCapacity)\n    {\n        top = 0;\n        stack = (T[])(new Object[initialCapacity]);\n    }\n\n    /**\n     * Adds the specified element to the top of this stack, expanding\n     * the capacity of the array if necessary.\n     * @param element generic element to be pushed onto stack\n     */\n    public void push(T element)\n    {\n        if (size() == stack.length) \n            expandCapacity();\n\n        stack[top] = element;\n        top++;\n    }\n\n    /**\n     * Creates a new array to store the contents of this stack with\n     * twice the capacity of the old one.\n     */\n    private void expandCapacity()\n    {\n        stack = Arrays.copyOf(stack, stack.length * 2);   \n    }\n\n    /**\n     * Removes the element at the top of this stack and returns a\n     * reference to it. \n     * @return element removed from top of stack\n     * @throws EmptyCollectionException if stack is empty \n     */\n    public T pop() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"stack\");\n\n        top--;\n        T result = stack[top];\n        stack[top] = null; \n\n        return result;\n    }\n\n    /**\n     * Returns a reference to the element at the top of this stack.\n     * The element is not removed from the stack.  \n     * @return element on top of stack\n     * @throws EmptyCollectionException if stack is empty\n     */\n    public T peek() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"stack\");\n\n        return stack[top-1];\n    }\n\n    /**\n     * Returns true if this stack is empty and false otherwise. \n     * @return true if this stack is empty\n     */\n    public boolean isEmpty()\n    {\n        // To be completed as a Programming Project\n\n        return true;  // temp\n    }\n\n    /**\n     * Returns the number of elements in this stack.\n     * @return the number of elements in the stack\n     */\n    public int size()\n    {\n        // To be completed as a Programming Project\n\n        return 0;  // temp\n    }\n\n    /**\n     * Returns a string representation of this stack. \n     * @return a string representation of the stack\n     */\n    public String toString()\n    {\n        // To be completed as a Programming Project\n\n        return \"\";  // temp\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/jsjf/CircularArrayQueue/","title":"CircularArrayQueue.java","text":"<pre><code>package videoexamples.module07.jsjf;\n\nimport videoexamples.module07.jsjf.exceptions.*;\n\n/**\n * CircularArrayQueue represents an array implementation of a queue in \n * which the indexes for the front and rear of the queue circle back to 0\n * when they reach the end of the array.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class CircularArrayQueue&lt;T&gt; implements QueueADT&lt;T&gt;\n{\n    private final static int DEFAULT_CAPACITY = 100;\n    private int front, rear, count;\n    private T[] queue; \n\n    /**\n     * Creates an empty queue using the specified capacity.\n     * @param initialCapacity the initial size of the circular array queue\n     */\n    public CircularArrayQueue(int initialCapacity)\n    {\n        front = rear = count = 0;\n        queue = (T[]) (new Object[initialCapacity]);\n    }\n\n    /**\n     * Creates an empty queue using the default capacity.\n     */\n    public CircularArrayQueue()\n    {\n        this(DEFAULT_CAPACITY);\n    }    \n\n    /**\n     * Adds the specified element to the rear of this queue, expanding\n     * the capacity of the queue array if necessary.\n     * @param element the element to add to the rear of the queue\n     */\n    public void enqueue(T element)\n    {\n        if (size() == queue.length) \n            expandCapacity();\n\n        queue[rear] = element;\n        rear = (rear + 1) % queue.length;\n\n        count++;\n    }\n\n    /**\n     * Creates a new array to store the contents of this queue with\n     * twice the capacity of the old one.\n     */\n    private void expandCapacity()\n    {\n        T[] larger = (T[]) (new Object[queue.length * 2]);\n\n        for (int scan = 0; scan &lt; count; scan++)\n        {\n            larger[scan] = queue[front];\n            front = (front + 1) % queue.length;\n        }\n\n        front = 0;\n        rear = count;\n        queue = larger;\n    }\n\n    /**\n     * Removes the element at the front of this queue and returns a\n     * reference to it. \n     * @return the element removed from the front of the queue\n     * @throws EmptyCollectionException  if the queue is empty\n     */\n    public T dequeue() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"queue\");\n\n        T result = queue[front];\n        queue[front] = null;\n        front = (front + 1) % queue.length;\n\n        count--;\n\n        return result;\n    }\n\n    /** \n     * Returns a reference to the element at the front of this queue.\n     * The element is not removed from the queue.  \n     * @return the first element in the queue\n     * @throws EmptyCollectionException if the queue is empty\n     */\n    public T first() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Returns true if this queue is empty and false otherwise.\n     * @return true if this queue is empty \n     */\n    public boolean isEmpty()\n    {\n        // To be completed as a Programming Project\n\n        return true;  // temp\n    }\n\n    /**\n     * Returns the number of elements currently in this queue.\n     * @return the size of the queue\n     */\n    public int size()\n    {\n        // To be completed as a Programming Project\n\n        return 0;  // temp\n    }\n\n    /**\n     * Returns a string representation of this queue. \n     * @return the string representation of the queue\n     */\n    public String toString()\n    {\n        // To be completed as a Programming Project\n\n        return \"\";  // temp\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/jsjf/LinearNode/","title":"LinearNode.java","text":"<pre><code>package videoexamples.module07.jsjf;\n\n/**\n * Represents a node in a linked list.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class LinearNode&lt;T&gt;\n{\n    private LinearNode&lt;T&gt; next;\n    private T element;\n\n    /**\n     * Creates an empty node.\n     */\n    public LinearNode()\n    {\n        next = null;\n        element = null;\n    }\n\n    /**\n     * Creates a node storing the specified element.\n     * @param elem element to be stored\n     */\n    public LinearNode(T elem)\n    {\n        next = null;\n        element = elem;\n    }\n\n    /**\n     * Returns the node that follows this one.\n     * @return reference to next node\n     */\n    public LinearNode&lt;T&gt; getNext()\n    {\n        return next;\n    }\n\n    /**\n     * Sets the node that follows this one.\n     * @param node node to follow this one\n     */\n    public void setNext(LinearNode&lt;T&gt; node)\n    {\n        next = node;\n    }\n\n    /**\n     * Returns the element stored in this node.\n     * @return element stored at the node\n     */\n    public T getElement()\n    {\n        return element;\n    }\n\n    /**\n     * Sets the element stored in this node.\n     * @param elem element to be stored at this node\n     */\n    public void setElement(T elem)\n    {\n        element = elem;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/jsjf/LinkedQueue/","title":"LinkedQueue.java","text":"<pre><code>package videoexamples.module07.jsjf;\n\nimport videoexamples.module07.jsjf.exceptions.*;\n\n/**\n * LinkedQueue represents a linked implementation of a queue.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class LinkedQueue&lt;T&gt; implements QueueADT&lt;T&gt;\n{\n    private int count;\n    private LinearNode&lt;T&gt; head, tail;\n\n    /**\n     * Creates an empty queue.\n     */\n    public LinkedQueue()\n    {\n        count = 0;\n        head = tail = null;\n    }\n\n    /**\n     * Adds the specified element to the tail of this queue.\n     * @param element the element to be added to the tail of the queue\n     */\n    public void enqueue(T element)\n    {\n        LinearNode&lt;T&gt; node = new LinearNode&lt;T&gt;(element);\n\n        if (isEmpty())\n            head = node;\n        else\n            tail.setNext(node);\n\n        tail = node;\n        count++;\n    }\n\n    /**\n     * Removes the element at the head of this queue and returns a\n     * reference to it. \n     * @return the element at the head of this queue\n     * @throws EmptyCollectionException if the queue is empty\n     */\n    public T dequeue() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"queue\");\n\n        T result = head.getElement();\n        head = head.getNext();\n        count--;\n\n        if (isEmpty())\n            tail = null;\n\n        return result;\n    }\n\n    /**\n     * Returns a reference to the element at the head of this queue.\n     * The element is not removed from the queue.  \n     * @return a reference to the first element in this queue\n     * @throws EmptyCollectionsException if the queue is empty\n     */\n    public T first() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Returns true if this queue is empty and false otherwise. \n     * @return true if this queue is empty \n     */\n    public boolean isEmpty()\n    {\n        // To be completed as a Programming Project\n\n        return true;  // temp\n    }\n\n    /**\n     * Returns the number of elements currently in this queue.\n     * @return the number of elements in the queue\n     */\n    public int size()\n    {\n        // To be completed as a Programming Project\n\n        return 0;  // temp\n    }\n\n    /**\n     * Returns a string representation of this queue. \n     * @return the string representation of the queue\n     */\n    public String toString()\n    {\n        // To be completed as a Programming Project\n\n        return \"\";  // temp\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/jsjf/LinkedStack/","title":"LinkedStack.java","text":"<pre><code>package videoexamples.module07.jsjf;\n\nimport videoexamples.module07.jsjf.exceptions.*;\n\n/**\n * Represents a linked implementation of a stack.\n *\n * @author Java Foundations \n * @version 4.0\n */\npublic class LinkedStack&lt;T&gt; implements StackADT&lt;T&gt;\n{\n    private int count;  \n    private LinearNode&lt;T&gt; top; \n\n    /**\n     * Creates an empty stack.\n     */\n    public LinkedStack()\n    {\n        count = 0;\n        top = null;\n    }\n\n    /**\n     * Adds the specified element to the top of this stack.\n     * @param element element to be pushed on stack\n     */\n    public void push(T element)\n    {\n        LinearNode&lt;T&gt; temp = new LinearNode&lt;T&gt;(element);\n\n        temp.setNext(top);\n        top = temp;\n        count++;\n    }\n\n    /**\n     * Removes the element at the top of this stack and returns a\n     * reference to it. \n     * @return element from top of stack\n     * @throws EmptyCollectionException if the stack is empty\n     */\n    public T pop() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"stack\");\n\n        T result = top.getElement();\n        top = top.getNext();\n        count--;\n\n        return result;\n    }\n\n    /**\n     * Returns a reference to the element at the top of this stack.\n     * The element is not removed from the stack.  \n     * @return element on top of stack\n     * @throws EmptyCollectionException if the stack is empty  \n     */\n    public T peek() throws EmptyCollectionException\n    {\n        // To be completed as a Programming Project\n\n        return null;  // temp\n    }\n\n    /**\n     * Returns true if this stack is empty and false otherwise. \n     * @return true if stack is empty\n     */\n    public boolean isEmpty()\n    {\n        // To be completed as a Programming Project\n\n        return true;  // temp\n    }\n\n    /**\n     * Returns the number of elements in this stack.\n     * @return number of elements in the stack\n     */\n    public int size()\n    {\n        // To be completed as a Programming Project\n\n        return 0;  // temp\n    }\n\n    /**\n     * Returns a string representation of this stack. \n     * @return string representation of the stack\n     */\n    public String toString()\n    {\n        // To be completed as a Programming Project\n\n        return \"\";  // temp\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/jsjf/QueueADT/","title":"QueueADT.java","text":"<pre><code>package videoexamples.module07.jsjf;\n\n/**\n * QueueADT defines the interface to a queue collection.\n *\n * @author Java Foundation\n * @version 4.0\n */\npublic interface QueueADT&lt;T&gt;\n{\n    /**  \n     * Adds one element to the rear of this queue. \n     * @param element  the element to be added to the rear of the queue  \n     */\n    public void enqueue(T element);\n\n    /**  \n     * Removes and returns the element at the front of this queue.\n     * @return the element at the front of the queue\n     */\n    public T dequeue();\n\n    /**  \n     * Returns without removing the element at the front of this queue.\n     * @return the first element in the queue\n     */\n    public T first();\n\n    /**  \n     * Returns true if this queue contains no elements.\n     * @return true if this queue is empty\n     */\n    public boolean isEmpty();\n\n    /**  \n     * Returns the number of elements in this queue. \n     * @return the integer representation of the size of the queue\n     */\n    public int size();\n\n    /**  \n     * Returns a string representation of this queue. \n     * @return the string representation of the queue\n     */\n    public String toString();\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/jsjf/StackADT/","title":"StackADT.java","text":"<pre><code>package videoexamples.module07.jsjf;\n\n/**\n * Defines the interface to a stack collection.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface StackADT&lt;T&gt;\n{\n    /**  \n     * Adds the specified element to the top of this stack. \n     * @param element element to be pushed onto the stack\n     */\n    public void push(T element);\n\n    /**  \n     * Removes and returns the top element from this stack. \n     * @return the element removed from the stack\n     */\n    public T pop();\n\n    /**  \n     * Returns without removing the top element of this stack. \n     * @return the element on top of the stack\n     */\n    public T peek();\n\n    /**  \n     * Returns true if this stack contains no elements. \n     * @return true if the stack is empty\n     */\n    public boolean isEmpty();\n\n    /** \n     * Returns the number of elements in this stack. \n     * @return the number of elements in the stack\n     */\n    public int size();\n\n    /**  \n     * Returns a string representation of this stack. \n     * @return a string representation of the stack\n     */\n    public String toString();\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/jsjf/exceptions/","title":"Stacks and Queues - /jsjf/exceptions/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-7/code/jsjf/exceptions/#jsjfexceptions","title":"/jsjf/exceptions/","text":"<ul> <li>EmptyCollectionException.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/jsjf/exceptions/EmptyCollectionException/","title":"EmptyCollectionException.java","text":"<pre><code>package videoexamples.module07.jsjf.exceptions;\n\n/**\n * Represents the situation in which a collection is empty.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class EmptyCollectionException extends RuntimeException\n{\n    /**\n     * Sets up this exception with an appropriate message.\n     * @param collection the name of the collection\n     */\n    public EmptyCollectionException(String collection)\n    {\n        super(\"The \" + collection + \" is empty.\");\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/mazetester/","title":"Stacks and Queues - /mazetester/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-7/code/mazetester/#mazetester","title":"/mazetester/","text":"<ul> <li>Maze.java</li> <li>MazeSolver.java</li> <li>MazeTester.java</li> <li>Position.java</li> <li>testfile.txt</li> <li>testfile2.txt</li> <li>testfile3.txt</li> </ul>","boost":1},{"location":"csc205/module-7/code/mazetester/Maze/","title":"Maze.java","text":"<pre><code>package videoexamples.module07.mazetester;\nimport java.util.*;\nimport java.io.*;\n\n/**\n * Maze represents a maze of characters. The goal is to get from the\n * top left corner to the bottom right, following a path of 1's. Arbitrary\n * constants are used to represent locations in the maze that have been TRIED\n * and that are part of the solution PATH.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class Maze\n{\n    private static final int OPEN = 1;\n    private static final int TRIED = 2;\n    private static final int PATH = 3;\n\n    private int numberRows, numberColumns;\n    private int endRow, endColumn;  // Coordinates of end point of maze\n    private int[][] grid;\n\n    /**\n     * Constructor for the Maze class. Loads a maze from the given file.  \n     * Throws a FileNotFoundException if the given file is not found.\n     *\n     * @param filename the name of the file to load\n     * @throws FileNotFoundException if the given file is not found\n     */\n    public Maze(String filename) throws FileNotFoundException\n    {\n        Scanner scan = new Scanner(new File(filename));\n        numberRows = scan.nextInt();\n        numberColumns = scan.nextInt();\n\n        grid = new int[numberRows][numberColumns];\n        for (int i = 0; i &lt; numberRows; i++)\n            for (int j = 0; j &lt; numberColumns; j++)\n                grid[i][j] = scan.nextInt();\n        scan.close();\n\n        endRow = getRows()-1;\n        endColumn = getColumns()-1;  \n\n    }\n\n    /**\n     * Marks the specified position in the maze as TRIED\n     *\n     * @param row the index of the row to try\n     * @param col the index of the column to try \n     */\n    public void tryPosition(int row, int col)\n    {\n        grid[row][col] = TRIED;\n    }\n\n\n    /**\n     * Check if a position is the end of the maze\n     *\n     * @param row the index of the row to try\n     * @param col the index of the column to try \n     */\n    public boolean solved(int row, int col)\n    {\n        return (row == endRow &amp;&amp; col == endColumn);  \n    }\n\n    /**\n     * Return the number of rows in this maze\n     *\n     * @return the number of rows in this maze\n     */\n    public int getRows()\n    {\n        return grid.length;\n    }\n\n    /**\n     * Return the number of columns in this maze\n     *\n     * @return the number of columns in this maze\n     */\n    public int getColumns()\n    {\n        return grid[0].length;\n    }\n\n    /**\n     * Marks a given position in the maze as part of the PATH\n     *\n     * @param row the index of the row to mark as part of the PATH\n     * @param col the index of the column to mark as part of the PATH \n     */\n    public void markPath(int row, int col)\n    {\n        grid[row][col] = PATH;\n    }\n\n    /**\n     * Determines if a specific location is valid. A valid location\n     * is one that is on the grid, is not blocked, and has not been TRIED.\n     *\n     * @param row the row to be checked\n     * @param column the column to be checked\n     * @return true if the location is valid    \n     */\n    public boolean validPosition(int row, int column)\n    {\n        boolean result = false;\n\n        // check if cell is in the bounds of the matrix \n        if (row &gt;= 0 &amp;&amp; row &lt; grid.length &amp;&amp;\n                column &gt;= 0 &amp;&amp; column &lt; grid[row].length)\n\n            //  check if cell is open (not blocked and not previously tried)\n            if (grid[row][column] == OPEN)\n                result = true;\n\n        return result;\n    }\n\n    /**\n     * Returns the maze as a string.\n     * \n     * @return a string representation of the maze\n     */\n    public String toString()\n    {\n        String result = \"\\n\";\n\n        for (int row=0; row &lt; grid.length; row++)\n        {\n            for (int column=0; column &lt; grid[row].length; column++)\n                result += grid[row][column] + \"\";\n            result += \"\\n\";\n        }\n\n        return result;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/mazetester/MazeSolver/","title":"MazeSolver.java","text":"<pre><code>package videoexamples.module07.mazetester;\n\nimport videoexamples.module07.csc205.FastStack;\nimport videoexamples.module07.jsjf.StackADT;\n\n/**\n * MazeSolver attempts to traverse a Maze using a stack. The goal is to get from the\n * given starting position to the bottom right, following a path of 1's. Arbitrary\n * constants are used to represent locations in the maze that have been TRIED\n * and that are part of the solution PATH.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class MazeSolver\n{\n    private Maze maze;\n\n    /**\n     * Constructor for the MazeSolver class.\n     */\n    public MazeSolver(Maze maze)\n    {\n        this.maze = maze;\n    }\n\n    /**\n     * Attempts to traverse the maze using a stack. Inserts special\n     * characters indicating locations that have been TRIED and that\n     * eventually become part of the solution PATH.\n     *\n     * @param row row index of current location\n     * @param column column index of current location\n     * @return true if the maze has been solved\n     */\n    public boolean traverse()\n    {\n        return traverse(0,0);\n    }\n    public boolean traverse(int x, int y)\n    {\n        boolean done = false;\n        Position pos = new Position(x,y);\n        StackADT&lt;Position&gt; stack = new FastStack&lt;Position&gt;();\n        stack.push(pos);\n\n        while (!(done) &amp;&amp; !stack.isEmpty())\n        {\n            pos = stack.pop();\n            maze.tryPosition(pos.getx(),pos.gety());  // this cell has been tried\n            if (maze.solved(pos.getx(), pos.gety())) {\n                done = true;  // the maze is solved\n            }\n            else\n            {\n                pushNewPos(pos.getx() - 1,pos.gety(), stack);   // up\n                pushNewPos(pos.getx(),pos.gety() - 1, stack);   // left\n                pushNewPos(pos.getx() + 1,pos.gety(), stack);   // down\n                pushNewPos(pos.getx(),pos.gety() + 1, stack);   // right\n            }\n        }\n\n        return done;\n    }\n\n    /**\n     * Push a new attempted move onto the stack\n     * @param x represents x coordinate\n     * @param y represents y coordinate\n     * @param stack the working stack of moves within the grid\n     * @return stack of moves within the grid\n     */\n    private void pushNewPos(int x, int y, \n            StackADT&lt;Position&gt; stack)\n    {\n        Position npos = new Position(x, y);\n        if (maze.validPosition(x,y))\n            stack.push(npos);\n    }\n\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/mazetester/MazeTester/","title":"MazeTester.java","text":"<pre><code>package videoexamples.module07.mazetester;\nimport java.util.*;\n\nimport videoexamples.module07.mazetester.Maze;\nimport videoexamples.module07.mazetester.MazeSolver;\n\nimport java.io.*;\n\n/**\n * MazeTester determines if a maze can be traversed.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class MazeTester\n{\n    /**\n     * Creates a new maze, prints its original form, attempts to\n     * solve it, and prints out its final form.\n     */\n    private static String filePath = \"src\\\\videoexamples\\\\module07\\\\mazetester\\\\\";\n\n    public static void main(String[] args) throws FileNotFoundException\n    {\n        Scanner scan = new Scanner(System.in);\n        System.out.print(\"Enter the name of the file containing the maze: \");\n        String filename = scan.nextLine();\n\n        // This assumes the text file is in your source directory\n        Maze labyrinth = new Maze(filePath + filename);\n\n        System.out.println(labyrinth);\n\n        MazeSolver solver = new MazeSolver(labyrinth);\n\n        if (solver.traverse(0,0))\n            System.out.println(\"The maze was successfully traversed!\");\n        else\n            System.out.println(\"There is no possible path.\");\n\n        System.out.println(labyrinth);\n        scan.close();\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/mazetester/Position/","title":"Position.java","text":"<pre><code>package videoexamples.module07.mazetester;\n/**\n * Represents a single position in a maze of characters.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class Position\n{\n    private int x; \n    private int y;\n\n    /**\n     * Constructs a position and sets the x &amp; y coordinates to 0,0.\n     */\n    Position ()\n    {\n        this(0,0);\n    }\n\n    Position (int x, int y)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Returns the x-coordinate value of this position.\n     * @return the x-coordinate of this position\n     */\n    public int getx()\n    {\n        return x;\n    }\n\n    /**\n     * Returns the y-coordinate value of this position.\n     * @return the y-coordinate of this position\n     */\n    public int gety()\n    {\n        return y;\n    }\n\n    /**\n     * Sets the value of the current position's x-coordinate.\n     * @param a value of x-coordinate\n     */\n    public void setx(int a)\n    {\n        x = a;\n    }\n\n    /**\n     * Sets the value of the current position's x-coordinate.\n     * @param a value of y-coordinate\n     */ \n    public void sety(int a)\n    {\n        y = a;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/mazetester/testfile/","title":"testfile.txt","text":"<pre><code>5 5 \n1 0 0 0 0\n1 1 1 1 0\n0 1 0 0 0\n1 1 1 1 0\n0 1 0 1 1\n</code></pre>","boost":1},{"location":"csc205/module-7/code/mazetester/testfile2/","title":"testfile2.txt","text":"<pre><code>21 35\n1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1\n1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 0 1 0\n0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 0 1 1 1 \n1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1\n1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 0 1 0\n1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1\n1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 0 1 0\n0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1\n1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1\n1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 0 1 0\n0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 0 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 0 1 1 1 \n0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 0 1 1 1 \n1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1\n1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 0 1 0\n1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1\n1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 0 1 0\n0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1\n</code></pre>","boost":1},{"location":"csc205/module-7/code/mazetester/testfile3/","title":"testfile3.txt","text":"<pre><code>21 35\n1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1\n1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 0 1 0\n0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 0 1 1 1 \n1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1\n1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 0 1 0\n1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 0 1 0\n0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1\n1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1\n1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 0 1 0\n0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 1 0 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 0 1 1 1 \n0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 0 1 1 1 \n1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 1 1 1 1 1 1 1 \n1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 0 1 0\n1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1\n1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 1 1 1 \n0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 1 0 1\n</code></pre>","boost":1},{"location":"csc205/module-7/code/postfixtester/","title":"Stacks and Queues - /postfixtester/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-7/code/postfixtester/#postfixtester","title":"/postfixtester/","text":"<ul> <li>PostfixEvaluator.java</li> <li>PostfixTester.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/postfixtester/PostfixEvaluator/","title":"PostfixEvaluator.java","text":"<pre><code>package videoexamples.module07.postfixtester;\n\nimport java.util.Scanner;\n\nimport videoexamples.module07.csc205.FastStack;\nimport videoexamples.module07.jsjf.StackADT;\n\n/**\n * Represents an integer evaluator of postfix expressions. Assumes \n * the operands are constants.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class PostfixEvaluator\n{\n    private final static char ADD = '+';\n    private final static char SUBTRACT = '-';\n    private final static char MULTIPLY = '*';\n    private final static char DIVIDE = '/';\n\n    private StackADT&lt;Integer&gt; stack;\n\n    /**\n     * Sets up this evaluator by creating a new stack.\n     */\n    public PostfixEvaluator()\n    {\n        stack = new FastStack&lt;Integer&gt;();\n    }\n\n    /**\n     * Evaluates the specified postfix expression. If an operand is\n     * encountered, it is pushed onto the stack. If an operator is\n     * encountered, two operands are popped, the operation is\n     * evaluated, and the result is pushed onto the stack.\n     * @param expr string representation of a postfix expression\n     * @return value of the given expression\n     */\n    public int evaluate(String expr)\n    {\n        Integer operand1, operand2, result = 0;\n        String token;\n        Scanner parser = new Scanner(expr);\n\n        while (parser.hasNext())\n        {\n            token = parser.next();\n\n            if (isOperator(token))\n            {\n                operand2 = (stack.pop()).intValue();\n                operand1 = (stack.pop()).intValue();\n                System.out.print(\"Pushing result of \");\n                result = evaluateSingleOperator(token.charAt(0), operand1, operand2);\n                stack.push(result);\n                System.out.println(\" [\" + result + \"]\");\n            }\n            else {\n                System.out.println(\"Pushing operand [\" + token + \"]\");\n                stack.push(Integer.parseInt(token));\n            }\n        }\n        parser.close();\n        return result;\n    }\n\n    /**\n     * Determines if the specified token is an operator.\n     * @param token the token to be evaluated \n     * @return true if token is operator\n     */\n    private boolean isOperator(String token)\n    {\n        Character op = token.charAt(0);\n\n        if (token.length() &gt; 1) {\n            return false;\n        }\n\n        return ( op.equals(ADD) || op.equals(SUBTRACT) ||\n                op.equals(MULTIPLY) || op.equals(DIVIDE) );\n    }\n\n    /**\n     * Performs integer evaluation on a single expression consisting of \n     * the specified operator and operands.\n     * @param operator operation to be performed\n     * @param op1 the first operand\n     * @param op2 the second operand\n     * @return value of the expression\n     */\n    private int evaluateSingleOperator(char operator, int op1, int op2)\n    {\n        int result = 0;\n\n        System.out.print(op1 + \" \" + operator + \" \" + op2);\n        switch (operator)\n        {\n        case ADD:\n            result = op1 + op2;\n            break;\n        case SUBTRACT:\n            result = op1 - op2;\n            break;\n        case MULTIPLY:\n            result = op1 * op2;\n            break;\n        case DIVIDE:\n            result = op1 / op2;\n        }\n\n        return result;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/postfixtester/PostfixTester/","title":"PostfixEvaluator.java","text":"<pre><code>package videoexamples.module07.postfixtester;\nimport java.util.Scanner;\n\n/**\n * Demonstrates the use of a stack to evaluate postfix expressions.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class PostfixTester    \n{\n    /**\n     * Reads and evaluates multiple postfix expressions.\n     */\n    public static void main(String[] args)\n    {\n        String expression, again;\n        int result;\n\n        Scanner in = new Scanner(System.in);\n\n        do\n        {  \n            PostfixEvaluator evaluator = new PostfixEvaluator();\n            System.out.println(\"Enter a valid post-fix expression one token \" +\n                    \"at a time with a space between each token (e.g. 5 4 + 3 2 1 - + *)\");\n            System.out.println(\"Each token must be an integer or an operator (+,-,*,/)\");\n            expression = in.nextLine();\n\n            result = evaluator.evaluate(expression);\n            System.out.println();\n            System.out.println(\"That expression equals \" + result);\n\n            System.out.print(\"Evaluate another expression [Y/N]? \");\n            again = in.nextLine();\n            System.out.println();\n        }\n        while (again.equalsIgnoreCase(\"y\"));\n        in.close();\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/ticketcounter/","title":"Stacks and Queues - /ticketcounter/ Example Code - Index","text":"","boost":1},{"location":"csc205/module-7/code/ticketcounter/#ticketcounter","title":"/ticketcounter/","text":"<ul> <li>Customer.java</li> <li>TicketCounter.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/ticketcounter/Customer/","title":"Customer.java","text":"<pre><code>package videoexamples.module07.ticketcounter;\n/**\n * Customer represents a waiting customer.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class Customer\n{\n    private int arrivalTime, departureTime;\n\n    /**\n     * Creates a new customer with the specified arrival time.\n     * @param arrives the arrival time\n     */\n    public Customer(int arrives)\n    {\n        arrivalTime = arrives;\n        departureTime = 0;\n    }\n\n    /**\n     * Returns the arrival time of this customer.\n     * @return the arrival time\n     */\n    public int getArrivalTime()\n    {\n        return arrivalTime;\n    }\n\n    /**\n     * Sets the departure time for this customer.\n     * @param departs the departure time\n     **/\n    public void setDepartureTime(int departs)\n    {\n        departureTime = departs;\n    }\n\n    /**\n     * Returns the departure time of this customer.\n     * @return the departure time\n     */\n    public int getDepartureTime()\n    {\n        return departureTime;\n    }\n\n    /**\n     * Computes and returns the total time spent by this customer.\n     * @return the total customer time\n     */\n    public int totalTime()\n    {\n        return departureTime - arrivalTime;\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/ticketcounter/TicketCounter/","title":"TicketCounter.java","text":"<pre><code>package videoexamples.module07.ticketcounter;\n\nimport videoexamples.module07.csc205.FastQueue;\nimport videoexamples.module07.jsjf.QueueADT;\n\n/**\n * TicketCounter demonstrates the use of a queue for simulating a line of customers.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class TicketCounter    \n{\n    private final static int PROCESS_TIME = 120;\n    private final static int MAX_CASHIERS = 10;\n    private final static int NUM_CUSTOMERS = 100;\n\n    public static void main(String[] args)\n    {\n        Customer customer;\n        QueueADT&lt;Customer&gt; customerQueue = new FastQueue&lt;Customer&gt;();\n        int[] cashierTime = new int[MAX_CASHIERS];  \n        int totalTime, averageTime, departs, start;\n\n        // run the simulation for various number of cashiers \n        for (int cashiers = 1; cashiers &lt; MAX_CASHIERS; cashiers++)\n        { \n            // set each cashiers time to zero initially\n            for (int count = 0; count &lt;= cashiers; count++)\n                cashierTime[count] = 0;\n\n            // load customer queue \n            for (int count = 1; count &lt;= NUM_CUSTOMERS; count++)\n                customerQueue.enqueue(new Customer(count * 15));\n\n            totalTime = 0;\n\n            // process all customers in the queue \n            while (!(customerQueue.isEmpty())) \n            {\n                // Fill cashiers\n                for (int count = 0; count &lt;= cashiers &amp;&amp; (!(customerQueue.isEmpty())); count++)\n                {\n                    customer = customerQueue.dequeue();\n                    if (customer.getArrivalTime() &gt; cashierTime[count])\n                        // cashier is free when customer arrives\n                        start = customer.getArrivalTime();\n                    else\n                        // customer has to wait for the cashier\n                        start = cashierTime[count]; \n                    departs = start + PROCESS_TIME;\n                    customer.setDepartureTime(departs);\n                    cashierTime[count] = departs;\n                    totalTime += customer.totalTime();\n                }\n            }\n\n            // output results for this simulation \n            averageTime = totalTime / NUM_CUSTOMERS;\n            System.out.println(\"Number of cashiers: \" + (cashiers + 1));\n            System.out.println(\"Average time: \" + averageTime + \" seconds \" +\n                    \"(\" + averageTime / 60 + \" min) \\n\");\n        }\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/towersofhanoi/","title":"Stacks and Queues - Example Code - Towers of Hanoi - Index","text":"<ul> <li>SolveTowers.java</li> <li>TowersofHanoi.java</li> </ul>","boost":1},{"location":"csc205/module-7/code/towersofhanoi/SolveTowers/","title":"SolveTowers.java","text":"<pre><code>package videoexamples.module07.towersofhanoi;\n/**\n * SolveTowers uses recursion to solve the Towers of Hanoi puzzle.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class SolveTowers\n{\n    /**\n     * Creates a TowersOfHanoi puzzle and solves it.\n     */\n    public static void main(String[] args)\n    {\n        System.out.println(\"Starting:\");\n        TowersOfHanoi towers = new TowersOfHanoi(4);\n        System.out.println(\"Solving:\");\n        towers.solve();\n        System.out.println(\"Done!\");\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-7/code/towersofhanoi/TowersOfHanoi/","title":"TowersOfHanoi.java","text":"<pre><code>package videoexamples.module07.towersofhanoi;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport videoexamples.module07.csc205.FastStack;\n\npublic class TowersOfHanoi\n{\n    private int totalDisks;\n    private Map&lt;Character, FastStack&lt;Integer&gt;&gt; pegs;\n\n    /**\n     * Sets up the puzzle with the specified number of disks.\n     *\n     * @param disks the number of disks \n     */\n    public TowersOfHanoi(int disks)\n    {\n        totalDisks = disks;\n        pegs = new HashMap&lt;Character,FastStack&lt;Integer&gt;&gt;();\n        pegs.put('A', new FastStack&lt;Integer&gt;());\n        pegs.put('B', new FastStack&lt;Integer&gt;());\n        pegs.put('C', new FastStack&lt;Integer&gt;());\n        for(int ii=disks;ii&gt;0;ii--) {\n            pegs.get('A').push(ii);\n        }\n    }\n\n    /**\n     * Performs the initial call to moveTower to solve the puzzle.\n     * Moves the disks from tower 1 to tower 3 using tower 2.\n     */\n    public void solve()\n    {\n        printTowers();\n        moveTower(totalDisks, 'A', 'C', 'B');\n    }\n\n    /**\n     * Moves the specified number of disks from one tower to another\n     * by moving a subtower of n-1 disks out of the way, moving one\n     * disk, then moving the subtower back. Base case of 1 disk.\n     *\n     * @param numDisks  the number of disks to move\n     * @param start     the starting tower\n     * @param end       the ending tower\n     * @param temp      the temporary tower\n     */\n    private void moveTower(int numDisks, Character start, Character end, Character temp)\n    {\n        FastStack&lt;Integer&gt; startPeg = pegs.get(start);\n        FastStack&lt;Integer&gt; endPeg = pegs.get(end);\n\n        if (numDisks == 1) {\n            endPeg.push(startPeg.pop());\n            printTowers();\n        }\n        else\n        {\n            moveTower(numDisks-1, start, temp, end);\n            endPeg.push(startPeg.pop());\n            printTowers();\n            moveTower(numDisks-1, temp, end, start);\n        }\n    }\n\n    public void printTowers() {\n        System.out.println();\n        for (Character c : pegs.keySet()) {\n            System.out.println(\"Peg \" + c + \": \" + pegs.get(c));\n        }\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/module-8/","title":"Midterm Exam - Index","text":"","boost":1},{"location":"csc205/module-8/#csc205-module-8","title":"CSC205 - Module 8","text":"","boost":1},{"location":"csc205/module-8/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-8/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-8/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-8/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-8/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-8/#frequently-asked-questions","title":"Frequently Asked Questions","text":"","boost":1},{"location":"csc205/module-9/","title":"Searching and Hashing - Index","text":"","boost":1},{"location":"csc205/module-9/#csc205-module-9","title":"CSC205 - Module 9","text":"","boost":1},{"location":"csc205/module-9/#topics","title":"Topics","text":"","boost":1},{"location":"csc205/module-9/#readings","title":"Readings","text":"","boost":1},{"location":"csc205/module-9/#book","title":"Book","text":"<ul> <li>Java Foundations<ul> <li>Chapter </li> </ul> </li> <li>Algorithms (recommended)<ul> <li>Sections </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-9/#notes","title":"Notes","text":"","boost":1},{"location":"csc205/module-9/#videos-and-example-source-code","title":"Videos and Example Source Code","text":"<ul> <li>Videos</li> <li>Example Source Code</li> </ul>","boost":1},{"location":"csc205/module-9/#frequently-asked-questions","title":"Frequently Asked Questions","text":"","boost":1},{"location":"csc205/notes/","title":"Notes - Index","text":"","boost":1},{"location":"csc205/notes/#csc-205-notes","title":"CSC 205 Notes","text":"","boost":1},{"location":"csc205/notes/#java-foundations-textbook-notes","title":"Java Foundations Textbook Notes\u00b6","text":"<ul> <li>Chapter 12</li> <li>Chapter 12 Example Source Code</li> </ul>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/","title":"Chapter 12 - Introduction to Collections - Stacks","text":"<ul> <li>Java Foundations 5<sup>th</sup> Edition</li> </ul>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#121-collections","title":"12.1 Collections","text":"<p>A collection<sup>1</sup> is an object that gathers and organizes other objects. It defines the specific ways in which those objects, which are called elements of hte collections, can be accessed and managed.</p> <p>Key Concept</p> <p>A collection is an object that gathers and organizes other objects.</p> <p>Collections can be seperated into two broad catagories: </p> <ul> <li> <p>linear collection - is one in which the elements of the collection are conceptually organized in a straight line.</p> </li> <li> <p>nonlinear collection - is one in which the elements are conceptually organized in something other than a straight line, such as a hierarchy or network. For that matter, a nonlinear collection may not have any organization at all.</p> </li> </ul> <p>Key Concept</p> <p>Elements in a collection are typically organized in terms of the order of their addition to the collection or in terms of some inherent relationship among the elements.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#figure-121-a-linear-collection-and-a-nonlinear-collection","title":"Figure 12.1 A linear collection and a nonlinear collection","text":"<p>The organization of the elements in a collection, relative to each other, is usually determined by one of two things:</p> <ul> <li> <p>The order in which the elements were added to the collection</p> </li> <li> <p>Some inherent relationship among the elements themselves</p> </li> </ul>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#abstract-data-types","title":"Abstract Data Types","text":"<p>An abstraction<sup>2</sup> hides certain details at certain times. Dealing with an abstraction is easier than dealing with too many details at one time. In fact, we couldn't get through a day without relying on abstractions. For example, we couldn't possibly drive a car if we had to worry about all the details that make the car work: the spark plugs, the pistons, the transmission, and so on. Instead, we can focus on the interface<sup>3</sup> to the car: the steering wheel, the pedals, and a few other controls. These controls are an abstraction, hiding the underlying details and allowing us to control an otherwise very complicated machine.</p> <p>A collection, like any well-designed object, is an abstraction. A collection defines the interface operations through which the user can manage the objects in the collection, such as adding and removing elements. The user interacts with the collection through this interface. However, the details of how a collection is implemented to fulfill that definition are another issue altogether. A class that implements the collection's interface must fulfill the conceptual definition of the collection, but it can do so in many ways.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#figure-122-a-well-defined-interface-masks-the-implementation-of-the-collection","title":"Figure 12.2 A well-defined interface masks the implementation of the collection","text":"<p>Key Concept</p> <p>A collection is an abstraction where the details of the implementation are hidden.</p> <p>Abstraction is another important software engineering<sup>5</sup> concept. In large software systems, it is virtually impossible for any one person to grasp all of the details of the system at once. Instead, the system is divided into abstract subsystems such that the purpose of those subsystems and the interactions among them can be specified. Subsystems may then be assigned to different developers or groups of developers who will develop the subsystem to meet its specification.</p> <p>An object is the perfect mechanism for creating a collection, because if it is designed correctly, the internal workings of an object are encapsulated from the rest of the system. In most cases, the instance variables defined in a class should be declared with private visibility. Therefore, only the methods of that class can access and modify them. The only interaction a user has with an object should be through its public methods, which represent the services that the object provides.</p> <p>As we progress through our exploration of collections, we will always stress the idea of separating the interface from the implementation. Therefore, for every collection that we examine, we should consider the following:</p> <ul> <li> <p>How does the collection operate, conceptually?</p> </li> <li> <p>How do we formally define the interface to the collection?</p> </li> <li> <p>What kinds of problems does the collection help us solve?</p> </li> <li> <p>What support is already available to us for this type of collection?</p> </li> <li> <p>In which various ways might we implement the collection?</p> </li> <li> <p>What are the benefits and costs of each implementation?</p> </li> </ul> <p>Before we continue, let's carefully define some other terms related to the exploration of collections. A data type is a group of values and the operations defined on those values. The primitive data types defined in Java are the primary examples. For example, the integer data type defines a set of numeric values and the operations (addition, subtraction, etc.) that can be used on them.</p> <p>An abstract data type (ADT)<sup>6</sup> is a data type whose values and operations are not inherently defined within a programming language. It is abstract only in that the details of its implementation must be defined and should be hidden from the user. A collection, therefore, is an abstract data type.</p> <p>A data structure<sup>7</sup> is the collection of programming constructs used to implement a collection. For example, a collection might be implemented using a fixed-size structure such as an array. One interesting artifact of these definitions and our design decision to separate the interface from the implementation (i.e., the collection from the data structure that implements it) is that we may, and often do, end up with a linear data structure, such as an array, being used to implement a nonlinear collection, such as a tree.</p> <p>Key Concept</p> <p>A data structure is the underlying programming construct used to implement a collection.</p> <p>Historically, the terms ADT<sup>6</sup> and data structure have been used in various ways. We carefully define them here to avoid any confusion, and we will use them consistently. Throughout this text, we will examine various data structures and how they can be used to implement various collections.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#the-java-collections-api","title":"The Java Collections API","text":"<p>The Java programming language is accompanied by a very large library of classes that can be used to support the development of software. Parts of the library are organized into application programming interfaces (APIs). The Java Collections API<sup>8</sup> is a set of classes that represent a few specific types of collections, implemented in various ways.</p> <p>You might ask why we should learn how to design and implement collections if a set of collections has already been provided for us. There are several reasons. First, the Java Collections API provides only a subset of the collections you may want to use. Second, the classes that are provided may not implement the collections in the ways you desire. Third, and perhaps most important, the study of software development requires a deep understanding of the issues involved in the design of collections and the data structures used to implement them.</p> <p>As we explore various types of collections, we will also examine the appropriate classes of the Java Collections API. In each case, we will analyze the various implementations that we develop and compare them to the approach used by the classes in the standard library.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#122-a-stack-collection","title":"12.2 A Stack Collection","text":"<p>Let's look at an example of a collection. A stack<sup>10</sup> is a linear collection whose elements are added to, and removed from, the same end. We say that a stack is processed in a last in, first out (LIFO)<sup>11</sup> manner. That is, the last element to be put on a stack will be the first one that gets removed. Said another way, the elements of a stack are removed in the reverse order of their placement on it. In fact, one of the principal uses of a stack in computing is to reverse the order of something (such as an undo operation).</p> <p>Key Concept</p> <p>Stack elements are processed in a LIFO manner\u2014the last element in is the first element out.</p> <p>The processing of a stack is shown in Figure 12.3. Usually a stack is depicted vertically, and we refer to the end to which elements are added and from which they are removed as the top of the stack.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#figure-123-a-conceptual-view-of-a-stack","title":"Figure 12.3 A conceptual view of a stack","text":"<p>Recall from our earlier discussions that we define an abstract data type (ADT) by identifying a specific set of operations that establishes the valid ways in which we can manage the elements stored in the data structure. We always want to use this concept to formally define the operations for a collection and work within the functionality it provides. That way, we can cleanly separate the interface to the collection from any particular implementation technique used to create it.</p> <p>The operations for a stack ADT are listed in Figure 12.4. In stack terminology, we push an element onto a stack, and we pop an element off a stack. We can also peek at the top element of a stack, examining it or using it as needed, without actually removing it from the collection. There are also general operations that enable us to determine whether the stack is empty and, if it is not empty, how many elements it contains.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#figure-124-the-operations-on-a-stack","title":"Figure 12.4 The operations on a stack","text":"Operation Description <code>push</code> Adds an element to the top of the stack. <code>pop</code> Removes an element from the top of the stack. <code>peek</code> Examines the element at the top of the stack. <code>isEmpty</code> Determines the numer of elements on the stack. <code>size</code> Determines the number of elements on the stack <p>Sometimes there are variations on the naming conventions for the operations on a collection. For a stack, the use of the terms push and pop is relatively standard. The peek operation is sometimes referred to as top.</p> <p>Key Concept</p> <p>A programmer should choose the structure that is appropriate for the type of data management needed.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#design-focus","title":"Design Focus","text":"<p>In the design of the stack ADT, we see the separation between the role of the stack and the role of the application that is using the stack. Notice that any implementation of this stack ADT is expected to throw an exception if a pop or peek operation is requested on an empty stack. The role of the collection is not to determine how such an exception is handled but merely to report it back to the application using the stack. Similarly, the concept of a full stack does not exist in the stack ADT. Thus, it is the role of the stack collection to manage its own storage to eliminate the possibility of being full.</p> <p>Keep in mind that the definition of a collection is not universal. You will find variations in the operations defined for specific collections from one text to another. We've been very careful in this text to define the operations on each collection so that they are consistent with its purpose.</p> <p>For example, note that none of the stack operations in Figure 12.4 enables us to reach down into the stack to modify, remove, or reorganize the elements in the stack. That is the very nature of a stack\u2014all activity occurs at one end. If we discover that, to solve a particular problem, we need to access the elements in the middle or at the bottom of the collection, then a stack is not the appropriate collection to use.</p> <p>We do provide a toString operation for the collection. This is not a classic operation defined for a stack, and it could be argued that this operation violates the prescribed behavior of a stack. However, it provides a convenient means to traverse and display the stack's contents without allowing modification of the stack and this is quite useful for debugging purposes.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#123-crucial-oo-concepts","title":"12.3 Crucial OO Concepts","text":"<p>Now let's consider what we will store in our stack. One possibility would be to simply recreate our stack data structure each time we need it and create it to store the specific object type for that application. For example, if we needed a stack of strings, we would simply copy and paste our stack code and change the object type to String. Even though copy, paste, and modify is technically a form of reuse, this brute force type of reuse is not our goal. Reuse, in its purest form, should mean that we create a collection that is written once, is compiled into byte code once, and will then handle any objects we choose to store in it safely, efficiently, and effectively. To accomplish these goals, we must take type compatibility and type checking into account. Type compatibility indicates whether a particular assignment of an object to a reference is legal. For example, the following assignment is not legal because you cannot assign a reference declared to be of type String to point to an object of type Integer.</p> <pre><code>String x = new Integer(10);\n</code></pre> <p>Java provides compile-time type checking that will flag this invalid assignment. A second possibility of what to store in our collection is to take advantage of the concepts of inheritance<sup>13</sup> and polymorphism<sup>14</sup> to create a collection that can store objects of any class.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#inheritance-and-polymorphism","title":"Inheritance and Polymorphism","text":"<p>A complete discussion of the concepts of inheritance and polymorphism is provided in Chapter 9. To review, a polymorphic reference is a reference variable that can refer to different types of objects at different points in time. Inheritance can be used to create a class hierarchy<sup>15</sup> where a reference variable can be used to point to any object related to it by inheritance.</p> <p>Carrying this to the extreme, an Object reference can be used to refer to any object, because ultimately all classes are descendants of the Object class. An ArrayList that is instantiated without specifying a type, for example, uses polymorphism in that it is designed to hold Object references. That's why an ArrayList can be used to store any kind of object. A particular ArrayList can hold several different types of objects at one time, because they are all objects compatible with type Object.</p> <p>The result of this discussion would seem to be that we could simply store Object references in our stack and take advantage of polymorphism via inheritance to create a collection that can store any type of objects. However, this possible solution creates some unexpected consequences. Because in this chapter we focus on implementing a stack with an array, let's examine what can happen when dealing with polymorphic references and arrays. Consider our classes represented in Figure 12.5. Since Animal is a superclass of all of the other classes in this diagram, an assignment such as the following is allowable:</p> <pre><code>Animal creature = new Bird();\n</code></pre>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#figure-125-a-uml-class-diagram-showing-a-class-hierarchy","title":"Figure 12.5 A UML class diagram showing a class hierarchy","text":"<p>However, this also means that the following assignments will compile as well:</p> <pre><code>Animal[] creatures = new Mammal[];\ncreatures[1] = new Reptile();\n</code></pre> <p>Note that by definition, <code>creatures[1]</code> should be both a <code>Mammal</code> and an <code>Animal</code>, but not a <code>Reptile</code>. This code will compile but will generate a <code>java.lang.ArrayStoreException</code> at run-time. Thus, because using the <code>Object</code> class will not provide us with compile-time type checking, we should look for a better solution.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#generics","title":"Generics","text":"<p>Java enables us to define a class based on a generic type<sup>18</sup>. That is, we can define a class so that it stores, operates on, and manages objects whose type is not specified until the class is instantiated. Generics are an integral part of our discussions of collections and their underlying implementations throughout the rest of this text.</p> <p>Let's assume we need to define a class called <code>Box</code> that stores and manages other objects. As we discussed, using polymorphism, we could simply define <code>Box</code> so that internally it stores references to the <code>Object</code> class. Then, any type of object could be stored inside a box. In fact, multiple types of unrelated objects could be stored in <code>Box</code>. We lose a lot of control with that level of flexibility in our code.</p> <p>A better approach is to define the <code>Box</code> class to store a generic type <code>T</code>. (We can use any identifier we want for the generic type, but using <code>T</code> has become a convention.) The header of the class contains a reference to the type in angle brackets. For example:</p> <pre><code>class Box&lt;T&gt;\n{\n   // declarations and code that manage objects of type T \n}\n</code></pre> <p>Then, when a <code>Box</code> is needed, it is instantiated with a specific class used in place of <code>T</code>. For example, if we wanted a <code>Box</code> of <code>Widget</code> objects, we could use the following declaration:</p> <pre><code>Box&lt;Widget&gt; box1 = new Box&lt;Widget&gt;();\n</code></pre> <p>The type of the <code>box1</code> variable is <code>Box&lt;Widget&gt;</code>. In essence, for the <code>box1</code> object, the <code>Box</code> class replaces <code>T</code> with <code>Widget</code>. Now suppose we wanted a <code>Box</code> in which to store <code>Gadget</code> objects; we could make the following declaration:</p> <pre><code>Box&lt;Gadget&gt; box2 = new Box&lt;Gadget&gt;();\n</code></pre> <p>For <code>box2</code>, the <code>Box</code> class essentially replaces <code>T</code> with <code>Gadget</code>. So, although the <code>box1</code> and <code>box2</code> objects are both boxes, they have different types because the generic type is taken into account. This is a safer implementation, because at this point we cannot use <code>box1</code> to store gadgets (or anything else for that matter other than widgets), nor could we use <code>box2</code> to store widgets. A generic type such as <code>T</code> cannot be instantiated. It is merely a placeholder to allow us to define the class that will manage a specific type of object that is established when the class is instantiated.</p> <p>Using generic types in this way is only possible because Java allows late or dynamic binding. This means that the type of the object, or in our case the type of the element in the collection, is determined at run-time and not at compile-time. For example, if we want to create an <code>ArrayList</code> bound to a specific type other than <code>Object</code>, we can specify the type at the time we instantiate the <code>ArrayList</code>. For example, the following code would instantiate an <code>ArrayList</code> to hold gadgets:</p> <pre><code>ArrayList&lt;Gadget&gt; = new ArrayList&lt;Gadget&gt;;\n</code></pre> <p>Given that we now have a mechanism using generic types for creating a collection that can be used to store any type of object safely and effectively, let's continue on with our discussion of the stack collection.</p> <p>The following section explores in detail an example of using a stack to solve a problem.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#124-using-stacks-evaluating-postfix-expressions","title":"12.4 Using Stacks: Evaluating Postfix Expressions","text":"<p>Traditionally, arithmetic expressions are written in infix notation, meaning that the operator is placed between its operands in the form</p> <p><code>&lt;operand&gt; &lt;operator&gt; &lt;operand&gt;</code></p> <p>such as in the expression</p> <p><code>4 + 5</code></p> <p>When evaluating an infix expression<sup>19</sup>, we rely on precedence rules to determine the order of operator evaluation. For example, the expression</p> <p><code>4 + 5 * 2</code></p> <p>evaluates to 14 rather than 18 because of the precedence rule that in the absence of parentheses, multiplication evaluates before addition.</p> <p>In a postfix expression, the operator comes after its two operands. Therefore, a postfix expression<sup>20</sup> takes the form</p> <p><code>&lt;operand&gt; &lt;operator&gt; &lt;operand&gt;</code></p> <p>For example, the postfix expression</p> <p><code>6 9 -</code></p> <p>is equivalent to the infix expression</p> <p><code>6 - 9</code></p> <p>A postfix expression is generally easier to evaluate than an infix expression because precedence rules and parentheses are not needed to guarantee evaluation order. The order of the values and operators in the expression is sufficient to determine the result. For this reason, programming language compilers and run-time environments often use postfix expressions in their internal calculations.</p> <p>The process of evaluating a postfix expression can be stated in one simple rule: Scanning from left to right, apply each operation to the two operands immediately preceding it and replace the operator with the result. At the end we are left with the final value of the expression.</p> <p>Consider the infix expression we looked at earlier:</p> <p><code>4 + 5 * 2</code></p> <p>In postfix notation, this expression would be written</p> <p><code>4 5 2 * +</code></p> <p>Let's use our evaluation rule to determine the final value of this expression. We scan from the left until we encounter the multiplication (<code>*</code>) operator. We apply this operator to the two operands immediately preceding it (<code>5</code> and <code>2</code>) and replace it with the result (<code>10</code>), which leaves us with</p> <p><code>4 10 +</code></p> <p>Continuing our scan from left to right, we immediately encounter the plus (<code>+</code>) operator. Applying this operator to the two operands immediately preceding it (<code>4</code> and <code>10</code>) yields <code>14</code>, which is the final value of the expression.</p> <p>Let's look at a slightly more complicated example. Consider the following infix expression:</p> <p><code>(3 * 4 - (2 + 5)) * 4 / 2</code></p> <p>The equivalent postfix expression is</p> <p><code>3 4 * 2 5 + - 4 * 2 /</code></p> <p>Applying our evaluation rule results in</p> <p><pre><code>         12 2 5 + - 4 * 2 /\nthen     12 7 - 4 * 2 /\nthen     5 4 * 2 /\nthen     20 2 /\nthen     10\n</code></pre> Now let's consider the design of a program that will evaluate a postfix expression. The evaluation rule relies on being able to retrieve the previous two operands whenever we encounter an operator. Furthermore, a large postfix expression will have many operators and operands to manage. It turns out that a stack is the perfect collection to use in this case. The operations provided by a stack coincide nicely with the process of evaluating a postfix expression.</p> <p>Key Concept</p> <p>A stack is the ideal data structure to use when evaluating a postfix expression.</p> <p>The algorithm for evaluating a postfix expression using a stack can be expressed as follows: Scan the expression from left to right, identifying each token (operator or operand) in turn. If it is an operand, push it onto the stack. If it is an operator, pop the top two elements off the stack, apply the operation to them, and push the result onto the stack. When we reach the end of the expression, the element remaining on the stack is the result of the expression. If at any point we attempt to pop two elements off the stack but there are not two elements on the stack, then our postfix expression was not properly formed. Similarly, if we reach the end of the expression and more than one element remains on the stack, then our expression was not well formed. Figure 12.6 depicts the use of a stack to evaluate a postfix expression.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#figure-126-using-a-stack-to-evaluate-a-postfix-expression","title":"Figure 12.6 Using a stack to evaluate a postfix expression","text":"<p>Note that when the two operands are popped from the stack, the first element popped is actually the second operand and the second element popped is the first operand. Thus the division operation shown in Figure 12.6 yields <code>-2</code>.</p> <p>The <code>PostfixTester</code> program in Listing 12.1 evaluates multiple postfix expressions entered by the user. It uses the <code>PostfixEvaluator</code> class shown in Listing 12.2.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#listing-121","title":"Listing 12.1","text":"<pre><code>import java.util.Scanner;\n\n/**\n * Demonstrates the use of a stack to evaluate postfix expressions.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class PostfixTester {\n\n    /**\n     * Reads and evaluates multiple postfix expressions.\n     */\n    public static void main(String[] args) {\n        String expression, again;\n        int result;\n\n        Scanner in = new Scanner(System.in);\n        do {\n            PostfixEvaluator evaluator = new PostfixEvaluator();\n            System.out.println(\"Enter a valid post-fix expression one token \"\n                    + \"at a time with a space between each token (e.g. 5 4 + 3 2 1 - + *)\");\n\n            System.out.println(\"Each token must be an integer or an operator (+,-,*,/)\");\n            expression = in.nextLine();\n\n            result = evaluator.evaluate(expression);\n            System.out.println();\n            System.out.println(\"That expression equals \" + result);\n\n            System.out.print(\"Evaluate another expression [Y/N] \");\n            again = in.nextLine();\n            System.out.println();\n        } while (again.equalsIgnoreCase(\"y\"));\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#listing-122","title":"Listing 12.2","text":"<pre><code>import java.util.Stack;\nimport java.util.Scanner;\n\n/**\n * Represents an integer evaluator of postfix expressions. Assumes the operands\n * are constants.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class PostfixEvaluator {\n    private final static char ADD = '+';\n    private final static char SUBTRACT = '-';\n    private final static char MULTIPLY = '*';\n    private final static char DIVIDE = '/';\n\n    private Stack&lt;Integer&gt; stack;\n\n    /**\n     * Sets up this evalutor by creating a new stack.\n     */\n    public PostfixEvaluator() {\n        stack = new Stack&lt;Integer&gt;();\n    }\n\n    /**\n     * Evaluates the specified postfix expression. If an operand is encountered, it\n     * is pushed onto the stack. If an operator is encountered, two operands are\n     * popped, the operation is evaluated, and the result is pushed onto the stack.\n     * \n     * @param expr string representation of a postfix expression\n     * @return value of the given expression\n     */\n    public int evaluate(String expr) {\n        int op1, op2, result = 0;\n        String token;\n        Scanner parser = new Scanner(expr);\n\n        while (parser.hasNext()) {\n            token = parser.next();\n            if (isOperator(token)) {\n                op2 = (stack.pop()).intValue();\n                op1 = (stack.pop()).intValue();\n                result = evaluateSingleOperator(token.charAt(0), op1, op2);\n                stack.push(new Integer(result));\n            } else\n                stack.push(new Integer(Integer.parseInt(token)));\n        }\n        return result;\n    }\n\n    /**\n     * Determines if the specified token is an operator.\n     * \n     * @param token the token to be evaluated\n     * @return true if token is operator\n     */\n    private boolean isOperator(String token) {\n        return (token.equals(\"+\") || token.equals(\"-\") || token.equals(\"*\") || token.equals(\"/\"));\n    }\n\n    /**\n     * Peforms integer evaluation on a single expression consisting of the specified\n     * operator and operands.\n     * \n     * @param operation operation to be performed\n     * @param op1       the first operand\n     * @param op2       the second operand\n     * @return value of the expression\n     */\n    private int evaluateSingleOperator(char operation, int op1, int op2) {\n        int result = 0;\n\n        switch (operation) {\n        case ADD:\n            result = op1 + op2;\n            break;\n        case SUBTRACT:\n            result = op1 - op2;\n            break;\n        case MULTIPLY:\n            result = op1 * op2;\n            break;\n        case DIVIDE:\n            result = op1 / op2;\n        }\n\n        return result;\n    }\n}\n</code></pre> <p>To keep things simple, this program assumes that the operands to the expression are integers and are literal values (not variables). When executed, the program repeatedly accepts and evaluates postfix expressions until the user chooses to stop.</p> <p>The <code>PostfixEvaluator</code> class uses the <code>java.util.Stack</code> class to create the stack attribute. The <code>java.util.Stack</code> class is one of two stack implementations provided by the Java Collections API. We revisit the other implementation, the <code>Deque</code> interface, in Chapter 13.</p> <p>The <code>evaluate</code> method performs the evaluation algorithm described earlier, supported by the <code>isOperator</code> and <code>evalSingleOp</code> methods. Note that in the <code>evaluate</code> method, only operands are pushed onto the stack. Operators are used as they are encountered and are never put on the stack. This is consistent with the evaluation algorithm we discussed. An operand is put on the stack as an <code>Integer</code> object, instead of as an <code>int</code> primitive value, because the stack collection is designed to store objects.</p> <p>When an operator is encountered, the two most recent operands are popped off the stack. As mentioned above, the first operand popped is actually the second operand in the expression and that the second operand popped is the first operand in the expression. This order doesn't matter in the cases of addition and multiplication, but it certainly matters for subtraction and division.</p> <p>Note also that the postfix expression program assumes that the postfix expression entered is valid, meaning that it contains a properly organized set of operators and operands. A postfix expression is invalid if either (1) two operands are not available on the stack when an operator is encountered or (2) there is more than one value on the stack when the tokens in the expression are exhausted. Either situation indicates that there was something wrong with the format of the expression, and both can be caught by examining the state of the stack at the appropriate point in the program. We will discuss how we might deal with these situations and other exceptional cases in the next section.</p> <p>Perhaps the most important aspect of this program is the use of the class that defined the stack collection. At this point, we don't know how the stack was implemented. We simply trusted the class to do its job. In this example, we used the class <code>java.util.Stack</code>, but we could have used any class that implemented a stack as long as it performed the stack operations as expected. From the point of view of evaluating postfix expressions, the manner in which the stack is implemented is largely irrelevant. Figure 12.7 shows a UML class diagram for the postfix expression evaluation program. The diagram illustrates that the <code>PostfixEvaluator</code> class uses an <code>Integer</code> instance of the <code>java.util.Stack</code> class and represents the binding of the <code>Integer</code> to the generic type <code>T</code>. We will not always include this level of detail in our UML diagrams.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#figure-127-uml-class-diagram-for-the-postfix-expression-evaluation-program","title":"Figure 12.7 UML class diagram for the postfix expression evaluation program","text":"","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#javadoc","title":"Javadoc","text":"<p>Before moving on, let's mention the documentation style used for comments in Listing 12.1 and 12.2. These are Javadoc comments, which are written in a format that allows the Javadoc tool to parse the comments and extract information about the classes and methods. Javadoc comments begin with a <code>/**</code> and end with a <code>*/</code>.</p> <p>Javadoc is used to create online documentation in HTML<sup>21</sup> about a set of classes. You've already seen the results; the online Java API documentation is created using this technique. When changes are made to the API classes (and their comments), the Javadoc tool is run again to generate the documentation. It's a clever way to ensure that the documentation does not lag behind the evolution of the code.</p> <p>There's nothing special about the Java API classes in this regard. Documentation for any program or set of classes can be generated using Javadoc. And even if it's not used to generate online documentation, the Javadoc commenting style is the official standard for adding comments to Java code.</p> <p>Javadoc tags are used to identify particular types of information. For example, the<code>@author</code> tag is used to identify the programmer who wrote the code. The <code>@version</code> tag is used to specify the version number of the code. In the header of a method, the <code>@return</code> tag is used to indicate what value is returned by the method and the <code>@param</code> tag is used to identify each parameter that's passed to the method.</p> <p>You can generate Javadoc documentation for your code from the command line. For example, if all of your source code is in your current working directory, then simply type <code>javadoc *.java</code>. This will generate a set of <code>.html</code> files containing your documentation. Javadoc tools are also available in most IDEs.</p> <p>We won't discuss Javadoc further at this point, but we will use the Javadoc commenting style throughout the remainder of this text.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#javadoc-for-a-method","title":"Javadoc for a Method","text":"","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#125-exceptions","title":"12.5 Exceptions","text":"<p>One concept that we will explore with each of the collections we discuss is that of exceptional behavior. What action should the collection take in the exceptional case? There are some such cases that are inherent in the collection itself. For example, in the case of a stack, what should happen if an attempt is made to pop an element from an empty stack? In this case, it does not matter what data structure is being used to implement the collection; the exception will still apply. Some such cases are artifacts of the data structure being used to implement the collection. For example, if we are using an array to implement a stack, what should happen if an attempt is made to push an element onto the stack but the array is full? Let's take a moment to explore this concept further.</p> <p>As discussed in Chapter 10, problems that arise in a Java program may generate exceptions or errors. An exception<sup>24</sup> is an object that defines an unusual or erroneous situation. An exception is thrown by a program or the run-time environment, and it can be caught and handled appropriately if desired. An error is similar to an exception, except that an error generally represents an unrecoverable situation, and it should not be caught. Java has a predefined set of exceptions and errors that may occur during the execution of a program. However, we often find it useful to develop our own specific exceptions.</p> <p>In our postfix evaluation example, there were several potential exceptional situations. For example:</p> <ul> <li> <p>If the stack were full on a push</p> </li> <li> <p>If the stack were empty on a pop</p> </li> <li> <p>If the stack held more than one value at the completion of the evaluation</p> </li> </ul> <p>Let's consider each of these separately. The possibility that the stack might be full on a push is an issue for the underlying data structure, not the collection. Conceptually speaking, there is no such thing as a full stack. Now we know that this is not reality and that all data structures will eventually reach a limit. However, even when this physical limit is reached, the stack is not full; only the data structure that implements the stack is full. We will discuss strategies for handling this situation as we implement our stack in the next section.</p> <p>What if the stack is empty on a pop? This is an exceptional case that has to do with the problem, not the underlying data structure. In our postfix evaluation example, if we attempt to pop two operands and there are not two operands available on the stack, our postfix expression was not properly formed. This is a case where the collection needs to report the exception and the application then must interpret that exception in context.</p> <p>The third case is equally interesting. What if the stack holds more than one value at the completion of the evaluation? From the perspective of the stack collection, this is not an exception. However, from the perspective of the application, this is a problem that means once again that the postfix expression was not well formed. Because it will not generate an exception from the collection, this is a condition for which the application must test.</p> <p>Key Concept</p> <p>Errors and exceptions represent unusual or invalid processing.</p> <p>Chapter 10 includes a complete discussion of exceptions and exception handling, including exception propagation and the try/catch statement. As we explore particular implementation techniques for a collection, we will also discuss the appropriate use of exceptions.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#126-a-stack-adt","title":"12.6 A Stack ADT","text":"<p>To facilitate separation of the interface operations from the methods that implement them, we can define a Java interface structure for a collection. A Java interface provides a formal mechanism for defining the set of operations for any collection.</p> <p>Key Concept</p> <p>A Java interface defines a set of abstract methods and is useful in separating the concept of an abstract data type from its implementation.</p> <p>Recall that a Java interface defines a set of abstract methods, specifying each method\u2019s signature but not its body. A class that implements an interface provides definitions for the methods defined in the interface. The interface name can be used as the type of a reference, which can be assigned any object of any class that implements the interface.</p> <p>Listing 12.3 defines a Java interface for a stack collection. We name a collection interface using the collection name followed by the abbreviation ADT (for abstract data type). Thus, <code>StackADT.java</code> contains the interface for a stack collection. It is defined as part of the <code>jsjf</code> package, which contains all of the collection classes and interfaces presented in this book.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#listing-123","title":"Listing 12.3","text":"<pre><code>package jsjf;\n\n/**\n * Defines the interface to a stack collection.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface StackADT&lt;T&gt; {\n    /**\n     * Adds the specified element to the top of this stack.\n     * \n     * @param element element to be pushed onto the stack\n     */\n    public void push(T element);\n\n    /**\n     * Removes and returns the top element from this stack.\n     * \n     * @return the element removed from the stack\n     */\n    public T pop();\n\n    /**\n     * Returns without removing the top element of this stack.\n     * \n     * @return the element on top of the stack\n     */\n    public T peek();\n\n    /**\n     * Returns true if this stack contains no elements.\n     * \n     * @return true if the stack is empty\n     */\n    public boolean isEmpty();\n\n    /**\n     * Returns the number of elements in this stack.\n     * \n     * @return the number of elements in the stack\n     */\n    public int size();\n\n    /**\n     * Returns a string representation of this stack.\n     * \n     * @return a string representation of the stack\n     */\n    public String toString();\n}\n</code></pre> <p>Note that the stack interface is defined as <code>StackADT&lt;T&gt;</code>, operating on a generic type <code>T</code>. In the methods of the interface, the type of various parameters and return values is often expressed using the generic type <code>T</code>. When this interface is implemented, it will be based on a type that is substituted for <code>T</code>.</p> <p>Key Concept</p> <p>By using the interface name as a return type, we ensure that the interface doesn't commit the method to the use of any particular class that implements a stack.</p> <p>Each time we introduce an interface, a class, or a system in this text, we will accompany that description with the UML description of that interface, class, or system. This should help you become accustomed to reading UML descriptions and to creating them for other classes and systems. Figure 12.8 illustrates the UML description of the <code>StackADT</code> interface.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#figure-128-the-stackadt-interface-in-uml","title":"Figure 12.8 The StackADT interface in UML","text":"<p>Stacks are used quite frequently in the computing world. For example, the undo operation in a word processor is usually implemented using a stack. As we make changes to a document (add data, delete data, make format changes, etc.), the word processor keeps track of each operation by pushing some representation of it onto a stack. If we choose to undo an operation, the word processing software pops the most recently performed operation off the stack and reverses it. If we choose to undo again (undoing the second-to-last operation we performed), another element is popped from the stack. In most word processors, many operations can be reversed in this manner.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#stack-interface","title":"Stack Interface","text":"","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#design-focus_1","title":"Design Focus","text":"<p>Undo operations are often implemented using a special type of stack called a drop-out stack. The basic operations on a drop-out stack are the same as those for a stack (<code>push</code>, <code>pop</code>, and <code>peek</code>). The only difference is that a drop-out stack has a limit to the number of elements it will hold, and once that limit is reached, the element on the bottom of the stack drops off the stack when a new element is pushed on. The development of a drop-out stack is left as an exercise.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#127-implementing-a-stack-with-arrays","title":"12.7 Implementing a Stack: With Arrays","text":"<p>So far in our discussion of a stack collection we have described its basic conceptual nature and the operations that allow the user to interact with it. In software engineering terms, we would say that we have done the analysis for a stack collection. We have also used a stack, without knowing the details of how it was implemented, to solve a particular problem. Now let's turn our attention to the implementation details. There are various ways to implement a class\u00a0that represents a stack. As mentioned earlier, the Java Collections API provides multiple implementations including the Stack class and the Deque interface. In this section, we examine an implementation strategy that uses an array to store the objects contained in the stack. In the next chapter, we examine a second technique for implementing a stack.</p> <p>Key Concep</p> <p>The implementation of the collection operations should not affect the way users interact with the collection.</p> <p>To explore this implementation, we must recall several key characteristics of Java arrays. The elements stored in an array are indexed from 0 to  n - 1, where n is the total number of cells in the array. An array is an object, which is instantiated separately from the objects it holds. And when we talk about an array of objects, we are actually talking about an array of references to objects, as illustrated in Figure 12.9.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#figure-129-an-array-of-object-references","title":"Figure 12.9 An array of object references","text":"<p>Keep in mind the separation between the collection and the underlying data structure used to implement it. Our goal is to design an efficient implementation that provides the functionality of every operation defined in the stack abstract data type. The array is just a convenient data structure in which to store the objects.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#managing-capacity","title":"Managing Capacity","text":"<p>When an array object is created, it is allocated a specific number of cells into which elements can be stored. For example, the following instantiation creates an array that can store 500 <code>Object</code> references, indexed from 0 to 499:</p> <pre><code>Object[] collection = Object[500];\n</code></pre> <p>Note that this instantiation allocates space for the <code>Object</code> references but does not allocate space for the objects themselves. Thus, creating an array of objects requires both instantiating the array and instantiating the objects to be stored in the array.</p> <p>The number of cells in an array is called its <code>capacity</code>. This value is stored in the <code>length</code> constant of the array. The capacity of an array cannot be changed once the array has been created.</p> <p>When using an array to implement a collection, we have to deal with the situation in which all cells of the array are being used to store elements. That is, because we are using a fixed-size data structure, at some point the data structure may become \"full.\" However, just because the data structure is full, should that mean that the collection is full?</p> <p>A crucial question in the design of a collection is what to do in the case in which a new element is added to a full data structure. Three basic options exist:</p> <ul> <li> <p>We could implement operations that add an element to the collection such that they throw an exception if the data structure is full.</p> </li> <li> <p>We could implement the add operations to return a status indicator that can be checked by the user to see whether the add operation was successful.</p> </li> <li> <p>We could automatically expand the capacity of the underlying data structure whenever necessary so that, essentially, it would never become full.</p> </li> </ul> <p>In the first two cases, the user of the collection must be aware that the collection could get full and must take steps to deal with it when needed. For these solutions we would also provide extra operations that allow the user to check to see whether the collection is full and to expand the capacity of the data structure as desired. The advantage of these approaches is that they give the user more control over the capacity.</p> <p>Key Concept</p> <p>How we handle exceptional conditions determines whether the collection or the user of the collection controls the particular behavior.</p> <p>However, given that our goal is to separate the interface from the implementation, the third option is attractive. The capacity of the underlying data structure is an implementation detail that, in general, should be hidden from the user of the collection. Furthermore, the capacity issue is particular to this implementation. Other techniques used to implement the collection, such as the one we explore in the next chapter, are not restricted by a fixed capacity and therefore never have to deal with this issue.</p> <p>In the solutions presented in this text, we opt to implement fixed size data structure solutions by automatically expanding the capacity of the underlying data structure. Occasionally, other options are explored as programming projects.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#128-the-arraystack-class","title":"12.8 The ArrayStack Class","text":"<p>In the Java Collections API framework, class names indicate both the underlying data structure and the collection. We follow that naming convention in this text. Thus, we define a class called <code>ArrayStack</code> to represent a stack with an underlying array-based implementation.</p> <p>To be more precise, we define a class called <code>ArrayStack&lt;T&gt;</code> that represents an array-based implementation of a stack collection that stores objects of generic type <code>T</code>. When we instantiate an <code>ArrayStack</code> object, we specify what the generic type <code>T</code> represents.</p> <p>An array implementation of a stack can be designed by making the following four assumptions: The array is an array of generic object references (type determined when the stack is instantiated), the bottom of the stack is always at index 0 of the array, the elements of the stack are stored in order and contiguously in the array, and there is an integer variable <code>top</code> that stores the index of the array immediately following the top element in the stack.</p> <p>Key Concept</p> <p>For efficiency, an array-based stack implementation keeps the bottom of the stack at index 0.</p> <p>Figure 12.10 illustrates this configuration for a stack that currently contains the elements A, B, C, and D, assuming that they have been pushed on in that order. To simplify the figure, the elements are shown in the array itself rather than as objects referenced from the array. Note that the variable <code>top</code> represents both the next cell into which a pushed element should be stored and the count of the number of elements currently in the stack.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#figure-1210-an-array-implementation-of-a-stack","title":"Figure 12.10 An array implementation of a stack","text":"<p>In this implementation, the bottom of the stack is always held at index 0 of the array, and the stack grows and shrinks at the higher indexes. This is considerably more efficient than if the stack were reversed within the array. Consider the processing that would be necessary if the top of the stack were kept at index 0.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#videonote","title":"VideoNote","text":"<p>An overview of the ArrayStack implementation.</p> <p>From these assumptions, we can determine that our class will need a constant to store the default capacity, a variable to keep track of the top of the stack, and a variable for the array to store the stack. This results in the following class header. Note that our <code>ArrayStack</code> class will be part of the <code>jsjf</code> package and will make use of a package called <code>jsjf.exceptions</code>.</p> <pre><code>package jsjf;\n\nimport jsjf.exceptions.*;\nimport java.util.Arrays;\n\n/**\n * An array implementation of a stack in which the bottom of the stack is fixed\n * at index 0.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class ArrayStack&lt;T&gt; implements StackADT&lt;T&gt; {\n    private final static int DEFAULT_CAPACITY = 100;\n    private int top;\n    private T[] stack;\n</code></pre>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#the-constructors","title":"The Constructors","text":"<p>Our class will have two constructors, one to use the default capacity and the other to use a specified capacity.</p> <pre><code>    /**\n     * Creates an empty stack using the default capacity.\n     */\n    public ArrayStack() {\n        this(DEFAULT_CAPACITY);\n    }\n\n    /**\n     * Creates an empty stack using the specified capacity.\n     * \n     * @param initialCapacity the initial size of the array\n     */\n    @SuppressWarnings(\"unchecked\")\n    public ArrayStack(int initialCapacity) {\n        top = 0;\n        stack = (T[]) (new Object[initialCapacity]);\n    }\n</code></pre> <p>Just to refresh our memory, this is an excellent example of method overloading (that is, two methods with the same name that differ only in the parameter list). It is also interesting to note that the constructor for the default capacity makes use of the other constructor by passing it the <code>DEFAULT_CAPACITY</code> constant.</p> <p>From our previous discussion of generics we recall that you cannot instantiate a generic type. This also means that you cannot instantiate an array of a generic type. This results in an interesting line of code in our constructor:</p> <pre><code>stack = (T[])(new Object[initialCapacity]);\n</code></pre> <p>Note that in this line, we are instantiating an array of <code>Object</code> references and then casting it as an array of our generic type. This will create a compile-time warning for an unchecked type conversion because the Java compiler cannot guarantee the type safety of this cast. As we have seen, it is worth dealing with this warning to gain the flexibility and type safety of generics. This warning can be suppressed using the following Java annotation placed before the offending method:</p> <pre><code>@SuppressWarnings(\"unchecked\")\n</code></pre>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#design-focus_2","title":"Design Focus","text":"<p>Let's consider for a moment another way that we might have implemented our array of generic objects. The Java Collections API implementation of <code>ArrayList</code> now uses the strategy of actually storing elements in the array as <code>Object</code> references instead of casting the array as an array of elements of type <code>T</code>. This approach requires that methods that add elements to the collection guarantee the type of elements being stored and that methods removing elements from the collection cast those elements back into the correct type. This strategy results in these methods being slightly more complicated and in having to use the <code>@SuppressWarnings(\"unchecked\")</code> line before every method that adds to or removes from the collection. Our approach simplifies these methods that add and remove elements from the collection and allows us to use the <code>@SuppressWarnings(\"unchecked\")</code> only once.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#common-error","title":"Common Error","text":"<p>A common error made by programmers new to generics is to attempt to create an array of a generic type:</p> <pre><code>stack = new T[initialCapacity];\n</code></pre> <p>Generic types cannot be instantiated, and that includes arrays of a generic type. That's why we have to create an array that holds <code>Object</code> references, and then cast it into an array of the generic type.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#creating-an-array-of-generic-elements","title":"Creating an Array of Generic Elements","text":"","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#the-push-operation","title":"The push Operation","text":"<p>To push an element onto the stack, we simply insert it in the next available position in the array as specified by the variable <code>top</code>. Before doing so, however, we must determine whether the array has reached its capacity and expand it if necessary. After storing the value, we must update the value of <code>top</code> so that it continues to represent the number of elements in the stack.</p> <p>Implementing these steps results in the following code:</p> <pre><code>    /**\n     * Adds the specified element to the top of this stack, expanding the capacity\n     * of the array if necessary.\n     * \n     * @param element generic element to be pushed onto stack\n     */\n    public void push(T element) {\n        if (size() == stack.length)\n            expandCapacity();\n        stack[top] = element;\n        top++;\n    }\n</code></pre> <p>The <code>expandCapacity</code> method is implemented to double the size of the array as needed. Of course, since an array cannot be resized once it is instantiated, this method simply creates a new, larger array and copies the contents of the old array into the new one. It serves as a support method of the class and can therefore be implemented with private visibility.</p> <pre><code>    /**\n     * Creates a new array to store the contents of this stack with twice the\n     * capacity of the old one.\n     */\n    private void expandCapacity() {\n        stack = Arrays.copyOf(stack, stack.length * 2);\n    }\n</code></pre> <p>Figure 12.11 illustrates the result of pushing an element E onto the stack that was depicted in Figure 12.10.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#figure-1211-the-stack-after-pushing-element-e","title":"Figure 12.11 The stack after pushing element E","text":"<p>The <code>push</code> operation for the array implementation of a stack consists of the following steps:</p> <ul> <li> <p>Make sure that the array is not full.</p> </li> <li> <p>Set the reference in position <code>top</code> of the array to the object being added to the stack.</p> </li> <li> <p>Increment the values of <code>top</code> and <code>count</code>.</p> </li> </ul> <p>Each of these steps is O(1). Thus the operation is O(1). We might wonder about the time complexity of the <code>expandCapacity</code> method and the impact it might have on the analysis of the <code>push</code> method. This method does contain a linear <code>for</code> loop and, intuitively, we would call that O(n). However, given how seldom the <code>expandCapacity</code> method is called relative to the number of times <code>push</code> may be called, we can amortize that complexity across all instances of <code>push</code>.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#the-pop-operation","title":"The pop Operation","text":"<p>The <code>pop</code> operation removes and returns the element at the top of the stack. For an array implementation, that means returning the element at index top-1. Before attempting to return an element, however, we must ensure that there is at least one element in the stack to return.</p> <p>The array-based version of the pop operation can be implemented as follows:</p> <pre><code>    /**\n     * Removes the element at the top of this stack and returns a reference to it.\n     * \n     * @return element removed from top of stack\n     * @throws EmptyCollectionException if stack is empty\n     */\n    public T pop() throws EmptyCollectionException {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"stack\");\n        top--;\n        T result = stack[top];\n        stack[top] = null;\n\n        return result;\n    }\n</code></pre> <p>If the stack is empty when the <code>pop</code> method is called, an <code>EmptyCollectionException</code> is thrown. Otherwise, the value of <code>top</code> is decremented and the element stored at that location is stored into a temporary variable so that it can be returned. That cell in the array is then set to null. Note that the value of <code>top</code> ends up with the appropriate value relative to the now smaller stack. Figure 12.12 illustrates the results of a <code>pop</code> operation on the stack from Figure 12.11, which brings it back to its earlier state (identical to Figure 12.10).</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#figure-1212-the-stack-after-popping-the-top-element","title":"Figure 12.12 The stack after popping the top element","text":"<p>The <code>pop</code> operation for the array implementation consists of the following steps:</p> <ul> <li> <p>Make sure the stack is not empty.</p> </li> <li> <p>Decrement the <code>top</code> counter.</p> </li> <li> <p>Set a temporary reference equal to the element in <code>stack[top]</code>.</p> </li> <li> <p>Set <code>stack[top]</code> equal to null.</p> </li> <li> <p>Return the temporary reference.</p> </li> </ul> <p>All of these steps are also O(1). Thus, the <code>pop</code> operation for the array implementation has time complexity O(1).</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#the-peek-operation","title":"The peek Operation","text":"<p>The <code>peek</code> operation returns a reference to the element at the top of the stack without removing it from the array. For an array implementation, that means returning a reference to the element at position top-1. This one step is O(1) and thus the <code>peek</code> operation is O(1) as well.</p> <pre><code>    /**\n     * Returns a reference to the element at the top of this stack. The element is\n     * not removed from the stack.\n     * \n     * @return element on top of stack\n     * @throws EmptyCollectionException if stack is empty\n     */\n    public T peek() throws EmptyCollectionException {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"stack\");\n\n        return stack[top - 1];\n    }\n</code></pre>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#other-operations","title":"Other Operations","text":"<p>The <code>isEmpty</code>, <code>size</code>, and <code>toString</code> operations and their analysis are left as programming projects and exercises.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#the-emptycollectionexception-class","title":"The EmptyCollectionException Class","text":"<p>Now that we have examined the implementation of our <code>ArrayStack</code> class, let's revisit our choices with respect to exception handling. We chose to have our collection handle the case where the underlying data structure becomes full, because that is an issue that is internal to the collection. On the other hand, we chose to throw an exception if an attempt is made to access an element in the collection through either a pop or peek operation when the collection is empty. This situation reveals a problem with the use of the collection, not with the collection itself.</p> <p>Exceptions are classes in Java, so we have the choice of using existing exceptions provided in the Java API or creating our own. In this case, we could have chosen to create a specific empty stack exception. However, creating a parameterized exception enables us to reuse this exception with any of our collections classes. Listing 12.4 shows the <code>EmptyCollectionException</code> class. Notice that our exception class extends the <code>RuntimeException</code> class and then makes use of the parent's constructor by using a super reference.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#listing-124","title":"Listing 12.4","text":"<pre><code>package jsjf.exceptions;\n\n/**\n * Represents the situation in which a collection is empty.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class EmptyCollectionException extends RuntimeException {\n    /**\n     * Sets up this exception with an appropriate message.\n     * \n     * @param collection the name of the collection\n     */\n    public EmptyCollectionException(String collection) {\n        super(\"The \" + collection + \" is empty.\");\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#other-implementations","title":"Other Implementations","text":"<p>In this chapter we examined the concept of a stack, used the Stack class available in Java API to solve a postfix evaluation problem, and then implemented our own <code>ArrayStack</code> class that used an array to store the underlying elements on a stack.</p> <p>We're not finished with stacks yet, though. In Chapter 13, we'll examine another technique for implementing collections using linked structures instead of arrays, and implement a <code>LinkedStack</code> class.</p> <p>Armed with these two broad implementation techniques\u2014array-based and linked-based\u2014we'll be set to explore many other collections.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#summary-of-key-concepts","title":"Summary of Key Concepts","text":"<ul> <li> <p>A collection is an object that gathers and organizes other objects.</p> </li> <li> <p>Elements in a collection are typically organized in terms of the order of their addition to the collection or in terms of some inherent relationship among the elements.</p> </li> <li> <p>A collection is an abstraction wherein the details of the implementation are hidden.</p> </li> <li> <p>A data structure is the underlying programming construct used to implement a collection.</p> </li> <li> <p>Stack elements are processed in a LIFO manner\u2014the last element in is the first element out.</p> </li> <li> <p>A programmer should choose the structure that is appropriate for the type of data management needed.</p> </li> <li> <p>A stack is the ideal data structure to use when evaluating a postfix expression.</p> </li> <li> <p>Errors and exceptions represent unusual or invalid processing.</p> </li> <li> <p>A Java interface defines a set of abstract methods and is useful in separating the concept of an abstract data type from its implementation.</p> </li> <li> <p>By using the interface name as a return type, we ensure that the interface doesn\u2019t commit the method to the use of any particular class that implements a stack.</p> </li> <li> <p>A programmer must carefully consider how exceptions should be handled, if at all, and at what level.</p> </li> <li> <p>The implementation of the collection operations should not affect the way users interact with the collection.</p> </li> <li> <p>How we handle exceptional conditions determines whether the collection or the user of the collection controls the particular behavior.</p> </li> <li> <p>For efficiency, an array-based stack implementation keeps the bottom of the stack at index 0.</p> </li> </ul>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#summary-of-terms","title":"Summary of Terms","text":"<p>abstraction - A point of view that hides or ignores certain details, usually to make concepts easier to manage.</p> <p>abstract data type - A data type whose values and operations are not inherently defined within a programming language.</p> <p>class hierarchy - The relationship among classes created by inheritance in which the child of one parent can itself be the parent of other classes.</p> <p>collection - An object that gathers and organizes other objects.</p> <p>data structure - (1) An organization of objects that allows certain operations to be performed efficiently; (2) The programming constructs used to implement a collection.</p> <p>exception - An object that defines an unusual or erroneous situation.</p> <p>generic type - A placeholder for an object type that is not made concrete until the class that refers to it is instantiated.</p> <p>inheritance - The object-oriented principle of deriving one class from an existing class.</p> <p>interface - (1) The manner in which one thing interacts with another; (2) A set of public methods that enables one object to interact with another.</p> <p>Java Collections API - The subset of the Java application programming interfaces API that represent or deal with collections.</p> <p>LIFO - (1) Last-in, first-out; (2) A description of a collection in which the last element added will be the first element removed.</p> <p>polymorphism - The object-oriented principle that enables a reference variable to point to related but distinct types of objects over time, and in which method invocations are bound to code at run-time.</p> <p>pop - A stack operation in which an element is removed from the top of a stack.</p> <p>push - A stack operation in which an element is added to the top of a stack.</p> <p>stack - A linear collection whose elements are added and removed from the same end in a LIFO manner.</p>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#self-review-questions","title":"Self-Review Questions","text":"<ul> <li> <p>SR 12.1 What is a collection?</p> </li> <li> <p>SR 12.2 What is a data type?</p> </li> <li> <p>SR 12.3 What is an abstract data type?</p> </li> <li> <p>SR 12.4 What is a data structure?</p> </li> <li> <p>SR 12.5 What is abstraction and what advantage does it provide?</p> </li> <li> <p>SR 12.6 Why is a class an excellent representation of an abstract data type?</p> </li> <li> <p>SR 12.7 What is the characteristic behavior of a stack?</p> </li> <li> <p>SR 12.8 What are the five basic operations on a stack?</p> </li> <li> <p>SR 12.9 What are some of the other operations that might be implemented for a stack?</p> </li> <li> <p>SR 12.10 Define the term inheritance.</p> </li> <li> <p>SR 12.11 Define the term polymorphism.</p> </li> <li> <p>SR 12.12 Given the example in Figure 12.5, list the subclasses of Mammal.</p> </li> <li> <p>SR 12.13 Given the example in Figure 12.5, will the following code compile?</p> </li> </ul> <pre><code>Animal creature = new Parrot();\n</code></pre> <ul> <li>SR 12.14 Given the example in Figure 12.5, will the following code compile?</li> </ul> <pre><code>Horse creature = new Mammal();\n</code></pre> <ul> <li> <p>SR 12.15 What is the purpose of generics in the Java language?</p> </li> <li> <p>SR 12.16 What is the advantage of postfix notation?</p> </li> </ul>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#exercises","title":"Exercises","text":"<ul> <li> <p>EX 12.1 Compare and contrast data types, abstract data types, and data structures.</p> </li> <li> <p>EX 12.2 List the collections in the Java Collections API and mark the ones that are covered in this text.</p> </li> <li> <p>EX 12.3 Define the concept of abstraction and explain why it is important in software development.</p> </li> <li> <p>EX 12.4 Hand trace an initially empty stack X through the following operations:</p> </li> </ul> <pre><code>X.push(new Integer(4));\nX.push(new Integer(3));\nInteger Y = X.pop();\nX.push(new Integer(7));\nX.push(new Integer(2));\nX.push(new Integer(5));\nX.push(new Integer(9));\nInteger Y = X.pop();\nX.push(new Integer(3));\nX.push(new Integer(9));\n</code></pre> <ul> <li>EX 12.5 Given the resulting stack X from the previous exercise, what would be the result of each of the following?</li> </ul> <pre><code>    a.  Y = X.peek();\n    b.  Y = X.pop();\n        Z = X.peek();\n    c.  Y = X.pop();\n        Z = X.peek();\n</code></pre> <ul> <li> <p>EX 12.6 What should be the time complexity of the <code>isEmpty()</code>, <code>size()</code>, and <code>toString()</code> methods?</p> </li> <li> <p>EX 12.7 Show how the undo operation in a word processor can be supported by the use of a stack. Give specific examples and draw the contents of the stack after various actions are taken.</p> </li> <li> <p>EX 12.8 In the postfix expression evaluation example, the two most recent operands are popped when an operator is encountered so that the subexpression can be evaluated. The first operand popped is treated as the second operand in the subexpression, and the second operand popped is the first. Give and explain an example that demonstrates the importance of this aspect of the solution.</p> </li> <li> <p>EX 12.9 Draw an example using the five integers (12, 23, 1, 45, 9) of how a stack could be used to reverse the order (9, 45, 1, 23, 12) of these elements.</p> </li> <li> <p>EX 12.10 Explain what would happen to the algorithms and the time complexity of an array implementation of the stack if the top of the stack were at position 0.</p> </li> </ul>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#programming-projects","title":"Programming Projects","text":"<ul> <li> <p>PP 12.1 Complete the implementation of the ArrayStack class presented in this chapter. Specifically, complete the implementations of the isEmpty, size, and toString methods.</p> </li> <li> <p>PP 12.2 Design and implement an application that reads a sentence from the user and prints the sentence with the characters of each word backwards. Use a stack to reverse the characters of each word.</p> </li> <li> <p>PP 12.3 Modify the solution to the postfix expression evaluation problem so that it checks for the validity of the expression that is entered by the user. Issue an appropriate error message when an erroneous situation is encountered.</p> </li> <li> <p>PP 12.4 The array implementation in this chapter keeps the top variable pointing to the next array position above the actual top of the stack. Rewrite the array implementation such that stack[top] is the actual top of the stack.</p> </li> <li> <p>PP 12.5 There is a data structure called a drop-out stack that behaves like a stack in every respect except that if the stack size is n, when the n + 1 element is pushed, the first element is lost. Implement a drop-out stack using an array. (HINT: A circular array implementation would make sense.)</p> </li> <li> <p>PP 12.6 Implement an integer adder using three stacks.</p> </li> <li> <p>PP 12.7 Implement an postfix-to-infix translator using stacks. The application should repeatedly read a postfix expression and print the equivalent infix expression until the user quits. Throw an exception if the postfix expression entered is invalid.</p> </li> <li> <p>PP 12.8 Implement a class called ReverseWords that uses a stack to output a set of elements input by the user in reverse order.</p> </li> <li> <p>PP 12.9 Create a graphical application that provides a button for push and pop from a stack, a text field to accept a string as input for push, and a text area to display the contents of the stack after each operation.</p> </li> </ul>","boost":1},{"location":"csc205/notes/javafoundations/chapter12/#answers-to-self-review-questions","title":"Answers to Self-Review Questions","text":"<ul> <li> <p>SRA 12.1 A collection is an object that gathers and organizes other objects.</p> </li> <li> <p>SRA 12.2 A data type is a set of values and operations on those values defined within a programming language.</p> </li> <li> <p>SRA 12.3 An abstract data type is a data type that is not defined within the programming language and must be defined by the programmer.</p> </li> <li> <p>SRA 12.4 A data structure is the set of objects necessary to implement an abstract data type.</p> </li> <li> <p>SRA 12.5 Abstraction is the concept of hiding the underlying implementation of operations and data storage in order to simplify the use of a collection.</p> </li> <li> <p>SRA 12.6 Classes naturally provide abstraction since only those methods that provide services to other classes have public visibility.</p> </li> <li> <p>SRA 12.7 A stack is a last in, first out (LIFO) structure.</p> <ul> <li> <p>push \u2014 adds an element to the end of the stack</p> </li> <li> <p>pop \u2014 removes an element from the front of the stack</p> </li> <li> <p>peek \u2014 returns a reference to the element at the front of the stack</p> </li> <li> <p>isEmpty \u2014 returns true if the stack is empty, returns false otherwise</p> </li> <li> <p>size \u2014 returns the number of elements in the stack</p> </li> </ul> </li> <li> <p>SRA 12.9 makeEmpty(), destroy(), full()</p> </li> <li> <p>SRA 12.10 Inheritance is the process in which a new class is derived from an existing one. The new class automatically contains some or all of the variables and methods in the original class. Then, to tailor the class as needed, the programmer can add new variables and methods to the derived class, or modify the inherited ones.</p> </li> <li> <p>SRA 12.11 The term polymorphism can be defined as \u201chaving many forms.\u201d A polymorphic reference is a reference variable that can refer to different types of objects at different points in time. The specific method invoked through a polymorphic reference can change from one invocation to the next.</p> </li> <li> <p>SRA 12.12 The subclasses of Mammal are Horse and Bat.</p> </li> <li> <p>SRA 12.13 Yes, a reference variable of a parent class or any superclass may hold a reference to one of its descendants.</p> </li> <li> <p>SRA 12.14 No, a reference variable for a child or subclass may not hold a reference to a parent or superclass. To make this assignment, you would have to explicitly cast the parent class into the child class (Horse creature = (Horse)(new Mammal());</p> </li> <li> <p>SRA 12.15 Beginning with Java 5.0, Java enables us to define a class based on a generic type. That is, we can define a class so that it stores, operates on, and manages objects whose type is not specified until the class is instantiated. This allows for the creation of structures that can manipulate \u201cgeneric\u201d elements and still provide type checking.</p> </li> <li> <p>SRA 12.16 Postfix notation avoids the need for precedence rules that are required to evaluate infix expressions.</p> </li> </ul> <ol> <li> <p>collection - An object that serves as a repository for other objects.\u00a0\u21a9</p> </li> <li> <p>abstraction - The concept of hiding details. If the right details are hidden at the right times, abstraction can significantly help control complexity and focus attention on appropriate issues.\u00a0\u21a9</p> </li> <li> <p>interface - (1) A Java reserved word that is used to define a set of abstract methods that will be implemented by particular classes. (2) The set of messages to which an object responds, defined by the methods that can be invoked from outside of the object. (3) The techniques through which a human user interacts with a program, often graphically. See also graphical user interface<sup>4</sup>.\u00a0\u21a9</p> </li> <li> <p>graphical user interface (GUI) - Software that provides the means to interact with a program or operating system by making use of graphical images and point-and-click mechanisms such as buttons and text fields\u00a0\u21a9</p> </li> <li> <p>software engineering - The discipline within computer science that addresses the process of developing high-quality software within practical constraints.\u00a0\u21a9</p> </li> <li> <p>abstract data type (ADT) - A collection of data and the operations that are defined on those data. An abstract data type might be implemented in a variety of ways, but the interface operations are consistent.\u00a0\u21a9\u21a9</p> </li> <li> <p>data structure - Any programming construct, defined either in the language or by a programmer, used to organize data into a format to facilitate access and processing. Arrays, linked lists, and stacks can all be considered data structures.\u00a0\u21a9</p> </li> <li> <p>Java API - See application programming interface (API)<sup>9</sup>.\u00a0\u21a9</p> </li> <li> <p>application programming interface (API) - A set of classes that defines services for a programmer. Not part of the language itself, but often relied on to perform even basic tasks. See also class library.\u00a0\u21a9</p> </li> <li> <p>stack - An abstract data type that manages data in a last-in, first-out manner.\u00a0\u21a9</p> </li> <li> <p>last-in, first-out (LIFO) - A data management technique in which the last value that is stored in a data structure is the first value that comes out. See also first-in, first-out (FIFO)<sup>12</sup>; stack<sup>11</sup>.\u00a0\u21a9\u21a9</p> </li> <li> <p>first-in, first-out (FIFO) - A data management technique in which the first value that is stored in a data structure is the first value that comes out. See also last-in, first-out (LIFO); queue.\u00a0\u21a9</p> </li> <li> <p>inheritance - The ability to derive a new class from an existing one. Inherited variables and methods of the original (parent) class are available in the new (child) class just as if they were declared locally.\u00a0\u21a9</p> </li> <li> <p>polymorphism - An object-oriented technique by which a reference that is used to invoke a method can result in different methods being invoked at different times. All Java method invocations are potentially polymorphic in that they invoke the method of the object type, not that of the reference type.\u00a0\u21a9</p> </li> <li> <p>class hierarchy - A tree-like structure created when classes are derived from other classes through inheritance. See also interface hierarchy<sup>16</sup>.\u00a0\u21a9</p> </li> <li> <p>interface hierarchy - A tree-like structure created when interfaces are derived from other interfaces through inheritance. See also class hierarchy<sup>17</sup>.\u00a0\u21a9\u21a9</p> </li> <li> <p>class hierarchy - A tree-like structure created when classes are derived from other classes through inheritance. See also interface hierarchy<sup>16</sup>.\u00a0\u21a9</p> </li> <li> <p>generic type - A class designed so that it stores, operates on, and manages objects whose type is not specified until the class is instantiated.\u00a0\u21a9</p> </li> <li> <p>infix expression - An expression in which the operators are positioned between the operands on which they work. See also postfix expression<sup>20</sup>.\u00a0\u21a9\u21a9</p> </li> <li> <p>postfix expression - An expression in which an operator is positioned after the operands on which it works. See also infix expression<sup>19</sup>.\u00a0\u21a9\u21a9</p> </li> <li> <p>HyperText Markup Language (HTML) - The notation used to define Web pages. See also browser<sup>22</sup>, World Wide Web<sup>23</sup>.\u00a0\u21a9</p> </li> <li> <p>browser - Software that retrieves HTML documents across network connections and formats them for viewing. A browser is the primary vehicle for accessing the World Wide Web.\u00a0\u21a9</p> </li> <li> <p>World Wide Web (WWW or Web) - Software that makes the exchange of information across a network easier by providing a common GUI for multiple types of information. Web browsers are used to retrieve and format HTML documents.\u00a0\u21a9</p> </li> <li> <p>exception - (1) A situation that arises during program execution that is erroneous or out of the ordinary. (2) An object that can be thrown and processed by special catch blocks. See also error<sup>25</sup>.\u00a0\u21a9\u21a9</p> </li> <li> <p>error - (1) Any defect in a design or program. (2) An object that can be thrown and processed by special catch blocks, although errors should not usually be caught. See also compile-time error[^26], exception<sup>24</sup>, logical error, run-time error, syntax error.\u00a0\u21a9</p> </li> <li> <p>compile-time error - Any error that occurs during the compilation process, often indicating that a program does not conform to the language syntax or that an operation was attempted on an inappropriate data type. See also logical error, run-time error, syntax error.\u00a0\u21a9</p> </li> <li> <p>logical error - A problem stemming from inappropriate processing in the code. It does not cause an abnormal termination of the program, but it produces incorrect results. See also compile-time error, run-time error, syntax error.\u00a0\u21a9</p> </li> <li> <p>run-time error - A problem that occurs during program execution and causes the program to terminate abnormally. See also compile-time error, logical error, syntax error.\u00a0\u21a9</p> </li> <li> <p>syntax error - An error produced by the compiler because a program did not conform to the syntax of the programming language. Syntax errors are a subset of compile-time errors. See also compile-time error, logical error, run-time error, syntax rules.\u00a0\u21a9</p> </li> </ol>","boost":1},{"location":"csc205/notes/javafoundations/sourcecode/","title":"Example Source Code - Index","text":"<ul> <li>Java Foundations 5<sup>th</sup> Edition</li> </ul>","boost":1},{"location":"csc205/notes/javafoundations/sourcecode/#directory-tree","title":"Directory Tree","text":"<p>SourceCode/ \u251c\u2500 Chap 12 examples/    \u251c\u2500 ArrayStack/    \u2502  \u251c\u2500 src/    |     \u251c\u2500 jsjf/    |        \u251c\u2500 ArrayStack.java    |        \u251c\u2500 StackADT.java    |        \u251c\u2500 exceptions/    |           \u251c\u2500 EmptyCollectionException.java    |    \u251c\u2500 PostfixTester/        \u251c\u2500 src/           \u251c\u2500 PostfixEvaluator.java           \u251c\u2500 PostfixTester.java</p>","boost":1},{"location":"csc205/notes/javafoundations/sourcecode/chap12examples/","title":"Chapter 12 Example Source Code - Index","text":"<ul> <li>Java Foundations 5<sup>th</sup> Edition</li> </ul>","boost":1},{"location":"csc205/notes/javafoundations/sourcecode/chap12examples/#directory-tree","title":"Directory Tree","text":"<p>SourceCode/ \u251c\u2500 Chap 12 examples/    \u251c\u2500 ArrayStack/    \u2502  \u251c\u2500 src/    |     \u251c\u2500 jsjf/    |        \u251c\u2500 ArrayStack.java    |        \u251c\u2500 StackADT.java    |        \u251c\u2500 exceptions/    |           \u251c\u2500 EmptyCollectionException.java    |    \u251c\u2500 PostfixTester/        \u251c\u2500 src/           \u251c\u2500 PostfixEvaluator.java           \u251c\u2500 PostfixTester.java</p>","boost":1},{"location":"csc205/notes/javafoundations/sourcecode/chap12examples/arraystack/","title":"Chapter 12 Example Code - ArrayStack","text":"<ul> <li>Java Foundations 5<sup>th</sup> Edition</li> </ul>","boost":1},{"location":"csc205/notes/javafoundations/sourcecode/chap12examples/arraystack/#directory-tree","title":"Directory Tree","text":"<p>/SourceCode/ Chap 12 examples/ \u251c\u2500 ArrayStack/ \u2502  \u251c\u2500 src/ |     \u251c\u2500 jsjf/ |        \u251c\u2500 ArrayStack.java |        \u251c\u2500 StackADT.java |        \u251c\u2500 exceptions/ |           \u251c\u2500 EmptyCollectionException.java</p>","boost":1},{"location":"csc205/notes/javafoundations/sourcecode/chap12examples/arraystack/#arraystackjava","title":"ArrayStack.java","text":"<p>/SourceCode/Chap 12 examples/ArrayStack/src/jsjf/ArrayStack.java</p> ArrayStack.java<pre><code>package jsjf;\n\nimport jsjf.exceptions.*;\nimport java.util.Arrays;\n\n/**\n * An array implementation of a stack in which the bottom of the\n * stack is fixed at index 0.\n * \n * @author Java Foundations\n * @version 4.0\n */\npublic class ArrayStack&lt;T&gt; implements StackADT&lt;T&gt;\n{\n    private final static int DEFAULT_CAPACITY = 100;\n\n    private int top;  \n    private T[] stack;\n\n    /**\n     * Creates an empty stack using the default capacity.\n     */\n    public ArrayStack()\n    {\n        this(DEFAULT_CAPACITY);\n    }\n\n    /**\n     * Creates an empty stack using the specified capacity.\n     * @param initialCapacity the initial size of the array \n     */\n    public ArrayStack(int initialCapacity)\n    {\n        top = 0;\n        stack = (T[])(new Object[initialCapacity]);\n    }\n\n    /**\n     * Adds the specified element to the top of this stack, expanding\n     * the capacity of the array if necessary.\n     * @param element generic element to be pushed onto stack\n     */\n    public void push(T element)\n    {\n        if (size() == stack.length) \n            expandCapacity();\n\n        stack[top] = element;\n        top++;\n    }\n\n    /**\n     * Creates a new array to store the contents of this stack with\n     * twice the capacity of the old one.\n     */\n    private void expandCapacity()\n    {\n        stack = Arrays.copyOf(stack, stack.length * 2);   \n    }\n\n    /**\n     * Removes the element at the top of this stack and returns a\n     * reference to it. \n     * @return element removed from top of stack\n     * @throws EmptyCollectionException if stack is empty \n     */\n    public T pop() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"stack\");\n\n        top--;\n        T result = stack[top];\n        stack[top] = null; \n\n        return result;\n    }\n\n    /**\n     * Returns a reference to the element at the top of this stack.\n     * The element is not removed from the stack.  \n     * @return element on top of stack\n     * @throws EmptyCollectionException if stack is empty\n     */\n    public T peek() throws EmptyCollectionException\n    {\n        if (isEmpty())\n            throw new EmptyCollectionException(\"stack\");\n\n        return stack[top-1];\n    }\n\n    /**\n     * Returns true if this stack is empty and false otherwise. \n     * @return true if this stack is empty\n     */\n    public boolean isEmpty()\n    {\n        // To be completed as a Programming Project\n\n        return true;  // temp\n    }\n\n    /**\n     * Returns the number of elements in this stack.\n     * @return the number of elements in the stack\n     */\n    public int size()\n    {\n        // To be completed as a Programming Project\n\n        return 0;  // temp\n    }\n\n    /**\n     * Returns a string representation of this stack. \n     * @return a string representation of the stack\n     */\n    public String toString()\n    {\n        // To be completed as a Programming Project\n\n        return \"\";  // temp\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/notes/javafoundations/sourcecode/chap12examples/arraystack/#stackadtjava","title":"StackADT.java","text":"<p>/SourceCode/Chap 12 examples/ArrayStack/src/jsjf/StackADT.java</p> StackADT.java<pre><code>package jsjf;\n\n/**\n * Defines the interface to a stack collection.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic interface StackADT&lt;T&gt;\n{\n    /**  \n     * Adds the specified element to the top of this stack. \n     * @param element element to be pushed onto the stack\n     */\n    public void push(T element);\n\n    /**  \n     * Removes and returns the top element from this stack. \n     * @return the element removed from the stack\n     */\n    public T pop();\n\n    /**  \n     * Returns without removing the top element of this stack. \n     * @return the element on top of the stack\n     */\n    public T peek();\n\n    /**  \n     * Returns true if this stack contains no elements. \n     * @return true if the stack is empty\n     */\n    public boolean isEmpty();\n\n    /** \n     * Returns the number of elements in this stack. \n     * @return the number of elements in the stack\n     */\n    public int size();\n\n    /**  \n     * Returns a string representation of this stack. \n     * @return a string representation of the stack\n     */\n    public String toString();\n}\n</code></pre>","boost":1},{"location":"csc205/notes/javafoundations/sourcecode/chap12examples/arraystack/#emptycollectionexceptionjava","title":"EmptyCollectionException.java","text":"<p>/SourceCode/Chap 12 examples/ArrayStack/src/jsjf/exceptions/EmptyCollectionException.java</p> EmptyCollectionException.java<pre><code>package jsjf.exceptions;\n\n/**\n * Represents the situation in which a collection is empty.\n *\n * @author Java Foundations\n * @version 4.0\n */\npublic class EmptyCollectionException extends RuntimeException\n{\n    /**\n     * Sets up this exception with an appropriate message.\n     * @param collection the name of the collection\n     */\n    public EmptyCollectionException(String collection)\n    {\n        super(\"The \" + collection + \" is empty.\");\n    }\n}\n</code></pre>","boost":1},{"location":"csc205/notes/javafoundations/sourcecode/chap12examples/postfixtester/","title":"Chapter 12 Example Code - ArrayStack","text":"<ul> <li>Java Foundations 5<sup>th</sup> Edition</li> </ul>","boost":1},{"location":"csc205/notes/javafoundations/sourcecode/chap12examples/postfixtester/#directory-tree","title":"Directory Tree","text":"<p>/SourceCode/ Chap 12 examples/ \u251c\u2500 ArrayStack/ \u2502  \u251c\u2500 src/ |     \u251c\u2500 jsjf/ |        \u251c\u2500 ArrayStack.java |        \u251c\u2500 StackADT.java |        \u251c\u2500 exceptions/ |           \u251c\u2500 EmptyCollectionException.java</p>","boost":1},{"location":"csc205/notes/javafoundations/sourcecode/chap12examples/postfixtester/#arraystackjava","title":"ArrayStack.java","text":"<p>/SourceCode/Chap 12 examples/ArrayStack/src/jsjf/ArrayStack.java</p> <p>``` java title=\"ArrayStack.java\"</p>","boost":1},{"location":"csc240/c/c1-notes/","title":"C Module 1 - Notes","text":"","boost":1},{"location":"csc240/c/c1-notes/#imperative-programming-in-c","title":"Imperative Programming in C","text":"<p>These notes are primarily adapted from Programming in C by Stephen G. Kochan (referenced by chapter) and Introduction to Programming Languages: Programming in C, C++, Scheme, Prolog, C#, and SOA by Yinong Chen. Chapter numbers refer to Programming in C. </p> <p>We will be using gcc to compile our C programs. See the notes at the end of this document under Compiling with gcc (Appendix C) for more information.</p>","boost":1},{"location":"csc240/c/c1-notes/#introduction-to-c-and-the-imperative-paradigm","title":"Introduction to C and the Imperative Paradigm","text":"","boost":1},{"location":"csc240/c/c1-notes/#the-imperative-paradigm","title":"The Imperative Paradigm","text":"<p>An imperative program is made up of statements that manipulate data. Imperative programs are algorithmic in nature - do this, then that, then repeat. The imperative paradigm focuses on how to solve the problem rather than what the problem is. We will be using C as our example imperative paradigm. C is a much lower level language than Java, so while some of the syntax will be familiar, it will take practice to understand how to write and debug C programs. </p> <p>Related to imperative programming are structured programming (structuring the code with flow control, blocks, and functions) and modular programming (where the code is divided into modules that perform a group of related tasks). Structured &amp; modular programming allow the programmer to focus on smaller subproblems and make debugging and maintenance much easier. The programs are also more extensible. </p>","boost":1},{"location":"csc240/c/c1-notes/#history-of-c","title":"History of C","text":"<p>C was developed by Dennis Ritchie at Bell Labs in the early 1970\u2019s. It was based on the Language B developed by Ken Thompson which was influenced by Algol. It was closely tied to the development of UNIX (though it is available on nearly every operating system). The original standard was the first edition of the K&amp;R book. The ANSI standard was issued in 1988. </p> <p>Updated standards were developed in 1999 &amp; 2011, though the ANSI standard is still the most commonly used. During the late 1980\u2019s through the mid 1990\u2019s, C was one of the most popular languages for end-user applications, though languages such as C++, Java, and C# are more widely used for end-user applications today. However, C is still widely used, especially in embedded systems and other places where efficiency (both speed and memory) is the primary consideration. If efficiency is not a necessary goal of your application then another, safer, language such as Java, C#, etc. may be better suited. C++, especially modern standards, provides a nice balance between the efficiency of C and the safety of other languages. </p> <p>C was designed to be a language for solving specific problems. As a result, C programs tend to directly solve problems instead of working with abstractions. </p>","boost":1},{"location":"csc240/c/c1-notes/#undefined-behavior","title":"Undefined Behavior","text":"<p>Language designers need to decide what to do when an error occurs. In safe languages errors are trapped as they happen, for example Java exceptions. In unsafe languages like C, errors are not trapped. Instead, the compiler designer is given freedom to decide what happens. Execution may continue but in a (possibly) incorrect way. Such an operation is called undefined behavior. While code that invokes undefined behavior may do what you expect, your program would still not be correct because another compiler may choose to do something else. When you are writing important applications it is important to understand what syntax can invoke undefined behavior and how your specific compiler handles it.</p>","boost":1},{"location":"csc240/c/c1-notes/#c-basics-chapters-1-5","title":"C Basics (Chapters 1-5)","text":"<p>If you are coming from a background in Java, some of the C syntax may look familiar to you. Many more recent languages based their syntax on C, though the underlying semantics are usually very different.</p> <p>The following code is a simple example of a C program.</p> <pre><code>/* C Hello World example */\n#include&lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello, world!\\n\");\n  return 0;\n}\n</code></pre> <p>The first line is a comment, which must start with <code>/*</code> and end with <code>*/</code>. Comments can span multiple lines. The \"<code>#include</code>\" statement tells the compiler you are using functions defined in <code>stdio.h</code> (we will talk more about that later - for now you should know that these \".h\" files are called header files and you include .h files in your .c files. You do not include .c files). Then the main function is the entry point for our program - it is what will be called when the program is executed. Output to the console is generated by the printf statement. The '<code>\\n</code>' is a newline character. The return statement indicates to the operating system that the program terminated successfully (<code>0</code> is the convention for a successful exit).</p> <p>To compile a C program, use the following command:</p> <pre><code>gcc --std=c11 -pedantic -Wall filename.c\n</code></pre> <p>The name of the compiler we will be using is gcc. The <code>-pedantic</code> flag tells gcc that you want it to be strict about standard C code and warn you when you do something that is not strictly standard C. The <code>-Wall</code> flag tells gcc that you want it to warn you about everything it finds that could be problematic. You should always strive to write code that produces no warnings. Warnings almost always indicate a subtle bug. </p> <p>In C, variables (and functions) must be declared before you use them. C also allows global variables to be declared that are not part of any function. Global variables are available throughout the execution of the program. As such, they cause difficult bugs and should be avoided in most cases. </p> <p>The following program declares two variables, one of type int and one of type double.</p> <pre><code>#include&lt;stdio.h&gt;\n\nint main(void) {\n  int num1 = 10;\n  double num2 = 3.14;\n  printf(\"num1=%d, num2=%.1f\\n\", num1, num2);\n  return 0;\n}\n</code></pre> <p>Note that the <code>printf</code> statement is different from the first one we saw. The <code>printf</code> function lets you specify control sequences that will be replaced by the expressions that follow. In the above example, the <code>%d</code> is replaced by the value of <code>num1</code> and the<code>%.1f</code> is replaced by the value of <code>num2</code>. The '<code>.1</code>' indicates that you want to display one decimal place. The expressions that follow the string do not have to be variables - they can be any valid expression, including a function call - though the types need to match. </p> <p>Data is represented by states: collections of variables and their values. Variables have several different attributes:</p> <ul> <li>Name: A name associated with a memory location </li> <li>Value: What is stored in memory </li> <li>Type: Permitted values and operations </li> <li>Location: Where the data is stored in memory </li> <li>Address: Permanent label for the location of stored data </li> <li>Reference/pointer: A variable that holds an address </li> <li>Scope (visibility): the part of the code in which we can use the variable\u2019s name</li> </ul> <p>At the machine level, the value stored in any memory location is just a sequence of bits. A variable declaration binds a name to a location in memory and describes the attributes of the value in the location. The scope of a declaration starts from the declaration and extends to the end of the current block. Variables and functions must be declared before they are used. </p> <p>C provides the following data types (along with their control sequences):</p> <ul> <li>Integer (<code>int</code>)</li> <li><code>123</code> - integer constant - <code>%d</code> or <code>%i</code></li> <li><code>0123</code> - octal constant - <code>%o</code></li> <li><code>0x123ABC</code> - hexadecimal constant - <code>%x</code></li> <li>Floating-point (<code>float</code>)</li> <li><code>3.14f</code> - <code>%f</code> (or <code>%e</code> for scientific notation, <code>%g</code> to let C decide)</li> <li>Double-precision floating-point (<code>double</code>)</li> <li><code>3.14</code> - <code>%f</code> (or <code>%e</code> for scientific notation, <code>%g</code> to let C decide)</li> <li>Character (<code>char</code>)</li> <li>'<code>a</code>' - <code>%c</code></li> <li>'<code>\\n</code>'</li> <li>Boolean (<code>_Bool</code>)</li> <li><code>0</code> - false </li> <li><code>1</code> - true</li> <li><code>stdbool.h</code> defines the type \"<code>bool</code>\" and constants false and true.</li> </ul> <p>The C standard specifies minimum sizes for each data type, but not maximums. </p> <p>Note that when using control sequences that C will treat the expression as the type specified by the control sequence. </p> <p>C has both signed &amp; unsigned types. Signed types allow negative values, whereas unsigned types are always positive. For an unsigned int, all the bits are used to represent the number, but for an int the \ufb01rst bit is often used to store the sign. You should be careful when using signed &amp; unsigned types in the same expression. For example, given the de\ufb01nitions below</p> <pre><code>int a = -1;\nunsigned int b = 1;\n</code></pre> <p>Is <code>a &lt; b</code> or <code>a &gt; b</code>?  All values are stored in memory as a sequence of bits. When you treat a negative signed value as an unsigned value, the sign bit represents the largest value instead of the sign so your number will be very large. So, <code>a &lt; b</code> will evaluate to false if the comparison uses unsigned values since the sign bit of variable a will be <code>1</code> (it is negative) which makes it a very large unsigned value. Here is a program you can run to test this yourself:</p> <p>``` c</p>","boost":1},{"location":"csc240/c/c1-notes/#include","title":"include <p>int main(void) {   int a = -1;   unsigned int b = 1;</p> <p>printf(\"int a = %d, unsigned int b = %u\\n\", a, b);   if (a &lt;b)     printf(\"a is less than b\\n\");   else     printf(\"b is less than a\\n\");   return 0; } ```</p> <p>Some of the types above can be modified with one of the following specifiers: * long - 1234L (%li, %ld, %lo, %lx) for integers or for 1.23L( %Lf, %Le, %Lg) for floating-point * long long - 1234LL (%lli) * short - (%hd) * unsigned - 0xffffU (%u) - the U/%u can be combined with the length descriptors above * signed  There are several qualifiers that can be used in variable declarations in addition to the type modifiers above: * const - indicates that the value of the variable should not be changed. Keep in mind that while the value cannot be changed using the variable name, with some effort, the value could be changed through a pointer. * static - indicates that the value of the variable should be maintained. When used in a function the value is \u201cremembered\u201d from the previous call to the function. They are initialized only the first time the function is called. In subsequent calls to the function they keep their last value.</p> <p>Column width can be specified in a control sequence by inserting a column width. Decimal precision can be specified using X in the control sequence. printf(\u201c%3d %10d %10.2f\\n\u201d, x, y, z);</p> <p>The scanf function will read a value from the user into a variable. For example, the statement scanf (\"%d\", &amp;b); will read an integer into the variable b from user input. Note the &amp; character - that is required. Leaving it out can cause your program to crash. We will discuss the meaning of the &amp; later.</p> <p>Constants in C C has three ways to define constant values: * Constant variables declared with const * Macros (#define) where the value is substituted by the compiler * Enumerated types (enum) which are user-defined types with explicitly named integer values You cannot change the value of macro or enumerated type constants and neither one has memory allocated to it. Constant variables have memory allocated to them, so while you cannot modify them directly it is possible for their value to be changed through indirection (pointers).  We will discuss macros and enumerated types in more detail later in the notes.</p> <p>Associativity &amp; Precedence Precedence and associativity affect the grouping and evaluation of operands in expressions. Precedence determines which operators are evaluated \ufb01rst. Associativity determines the direction in which operators with the same precedence are evaluated (left-to-right or right-to-left). Most C references have precedence &amp; associativity charts listed in them. It is best practice to use parentheses to remove any confusion that might arise due to associativity &amp; precedence.  Associativity Examples:  The left-associative operators + and - have the same precedence, so the following expressions are all equivalent:  x + 3 - y + 5  (x + 3) - y + 5  ((x + 3) - y) + 5  ((x + 3) - y + 5)  The right-associative operators =, += and -= have the same precedence, so the following expressions are all equivalent: x = y += z -= 4  x = y += (z -= 4)  x = (y += (z -= 4))  (x = y += (z -= 4))</p> <p>C &amp; C++ use lazy evaluation \u2013 expressions are only evaluated when (and if) their value is needed. So, suppose you have an if statement with a compound boolean expression as follows: if (expression1 &amp;&amp; expression2)  Then if expression1 evaluates to false then expression2 will not be evaluated because its value does not affect the result of the entire compound boolean expression. C only evaluates an expression if it has to - once it evaluates enough to know what the result is it stops.</p> <p>For example, suppose you have an if statement with two function calls like the following (keep in mind that we evaluate an expression with a function call by calling the function and examining its return value): if (willing() &amp;&amp; able()) Here, the function has to be called in order to know if it evaluates to true or false. However, if willing() returns false, then the if statement cannot evaluate to true, regardless of the result of able(). We only need to call able() if calling willing() returns true.  Or, suppose we have an or condition instead of an and - then if willing() returns true, then the if statement cannot evaluate to false, regardless of the result of able(). We only need to call able() if calling willing() returns false.  if (willing() &amp;&amp; able())</p> <p>You need to be careful not to assume that every expression in a boolean expression will be evaluated. For example, in the code below y will not be incremented if x &lt; y. if ((x &lt; y) || (++y &gt; 10))  This code is not particularly well written - the following (equivalent code) is much more clear in its intent: if (x &lt; y) {     ++y;     if (y &gt; 10) {         /* do some stuff     } } Yes, this is more code, but what is actually happening is more clear - and clarity is always better.        </p> <p>Control structures C provides several different control structures for controlling program flow. These include the following: * for loop * while loop * do .. while loop * if .. else  * switch statements * The conditional statement (? .. : ..) Any of the above structures can be nested inside each other. The C statements \u201cbreak\u201d and \u201ccontinue\u201c allow the program flow to be interrupted. The file control.c in the example code has examples of each of the above. While C allows the programmer to write very complex expressions inside of these control structures, simple and clear code is always easier to debug and maintain.</p> <p>L-values &amp; r-values An object in C that has a memory location associated with it is called an l-value. This would include objects such as variables and arrays. (Note that we are using the term \u201cobject\u201d here in the general sense, not in the object-oriented sense). Objects that do not have memory locations associated with them are called r-values. R-values do not have any memory associated with them. </p> <p>You will sometimes see l-value &amp; r-value defined in terms of where they can appear in an assignment - an l-value can usually appear on the left-hand side of an assignment (meaning that you can assign a value to it) and an r-value can only appear on the right hand side. For example: lvalue = rvalue;    /* OK / rvalue = lvalue;    / Not OK / But keep in mind that since an l-value has memory associated with it, it can be evaluated to a value so it can appear on either side of the assignment operator (the left side or the right side): lvalue = another_lvalue;    / Also OK */ Also, some types of l-values cannot appear on the left hand side of an assignment, such as constant variables and arrays. Most literals (int literals such as 123 or char literals such as \u2018A\u2019) are r-values, but string literals are actually l-values since they are stored in memory.  Arrays (Chapter 6) Arrays C arrays are homogeneous collections of data elements of the same type. Individual elements in an array are accessed by their index. So an array declared as int[4] has 4 elements: int[0], int[1], int[2], and int[3]. C does not do bounds checking, so you can access, for example, int[8]. In that case, the program will compile and will likely run, but the results will be unpredictable. Modern C allows the size of the array to be a variable.</p> <p>Arrays can be initialized when they are declared, but that is not required.  int a1[4]; int a2[4] = {1,2,3,4}; int a3[] = {1,2,3,4,5}; int a4[2][3] = {{1,2,3},{4,5,6}}; In the examples above, a1 is an array of 4 integers that is not initialized. The next array, a2, is an array of 4 integers that is initialized. If the initializer has more elements than the array the extra elements will be ignored. The third array, a3, is an array of 5 integers initialized with a list of 5 integers. Note that the size of a3 is implicitly defined based on the length of the initializer list. The final array, a4, is a 2-dimensional array. Note that it is initialized with an array of arrays. 2-dimensional arrays are references with 2 indices, as in a4[0][2]. Arrays can only be initialized in the above manner when they are declared. Functions (Chapter 7) C programs are made up of functions (also called procedures or subroutines) - named blocks of code that are explicitly called by the program. The purpose of functions are * Abstraction - statements form a conceptual unit * Reuse - statements are executed in multiple locations In addition to the built-in functions, the programmer can define their own functions. Just like with variables, functions must be declared before they are used.  Functions communicate with the rest of the program through global variables, parameters, or return values.  A C function is declared with:         return_type function_name(parameters) If the function is not being defined when it is declared, the declaration should end with a semicolon (called a forward declaration). The forward declaration ensures that the function is in scope even though it hasn\u2019t been defined yet so we can use it before it is defined. The argument names are optional in a forward declaration, but the types are required. If we use a function before it is declared, C assumes the function returns an int.  void bar(int);         /* forward declaration /  int foo(int, float);   / forward declaration /  . . .  int foo(int x, float f) {   ...   bar(x);  / call function bar() / } void bar(int y) {  / declaration of function bar() */  . . .  }  It is good practice to break up your program into multiple, well-named functions. Well-chosen function names make code much more readable. Functions with a return type of void do not need a return statement - control will return to the caller at the end of the function. </p> <p>The parameters in the declaration are called formal parameters and are local variables of the function. When the function is called, actual parameters are used. Suppose I have the code below int do_something(int a, int b) {   /* do some stuff */   return 0; } Then we call the function as below: int x=42; Int y=19; do_something(x,y); In this case, a &amp; b in the function declaration/definition are the formal parameters, and the values of x &amp; y (42, &amp; 19, respectively) in the function call are the actual parameters.</p> <p>Example function definitions: void say_hello() {   printf(\"Hello!\\n\"); } The function above simply prints \u201cHello\u201d and returns. </p> <p>int add_ten(int x) {   return x + 10; } This function takes a parameter, adds 10 to it, then returns that value. Note that x is not modified. Function arguments are local variables in the function and can be modified, but the value of the actual argument passed to the function does not change. We can also declare local variables inside our function (called automatic variables). These variables are created when the function is called and destroyed when the function returns.</p> <p>The length of an array is not passed to a function by default, so functions that work with arrays should include an argument for the length of the array. Also, any changes made to an array passed in as an argument are made to the original array as well. We will discuss why this is later.</p> <p>Parameter Passing * Call-by-value: a formal parameter is a local variable in the function. It is a copy of the actual parameter that is initialized to the value of the actual parameter. The advantage of call-by-value is that there are no side effects, but it is less \ufb02exible &amp; powerful. * Call-by-reference:  the formal parameter is an alias to the actual parameter, so there is only one variable with two names. Changing the formal parameter immediately changes the actual parameter. The actual parameter must be a variable; it cannot be a value because a value cannot have an alias.  * Call-by-address (pointer):  The formal parameter is the address to the actual parameter. For the address itself, it is like call-by-value (the value of the pointer passed as a parameter doesn\u2019t change). For the variable pointed to by the address, it is like call-by-reference (that value can be changed through the pointer inside the function).  Recursion A recursive definition is one in which the concept being defined is used in the definition. Consider a list of numbers, eg. 24, 88, 40, 37. We can define a list as follows:  A list is:  * A number  * A number followed by a comma followed by a list  </p> <p>The factorial operation can also be defined recursively as follows:</p> <pre><code>    n!=n \u00d7(n-1)!\n</code></pre> <p>A recursive function is a method that calls itself in order to perform a computation. The recursive function must have two parts: 1. A base case that stops the recursion 2. A recursive call (to itself) with a different parameter If there is no base case then the recursion will continue indefinitely. </p> <p>Keep in mind that recursion is a tool, not a goal. It is important to understand when to use recursion and when to avoid it. Iteration can often be more efficient (in computational terms). Every recursive solution has a corresponding iterative solution, though the iterative solution can be significantly more complicated. But even when recursion is not as efficient, it is often clearer and more elegant than an iterative solution. Plus, many modern compilers can efficiently handle tail recursion.</p> <p>It can be difficult to think of how to write recursive functions because it can be hard to trust that the recursion will work. The key is to trust that it will. Usually recursive solutions are much simpler &amp; shorter than you expect. It takes experience, so practice!</p> <p>The diagrams below show how a recursive factorial function uses stack memory as it completes the computation:</p> <p>The recursive call can happen anywhere in the method, but if no additional computation is performed after the recursive call we call that tail-recursion. The structure of a tail-recursive function is similar to a while loop. </p> <p>Tail-recursion can be handled efficiently by modern compilers - since the current call stack does not need to be kept, the compiler can optimize it to a while loop. For factorial, notice how in the example above we have to multiply the result of the recursive call by n each time. In contrast, notice how the tail-recursive factorial function below computes the result after it makes the final recursive call - no additional computation is needed. A tail-recursive solution is similar in structure to an iterative solution such as a while loop since once the base case is reached no further computation is performed.</p> <p>Implementing Recursion The following steps for writing recursive functions were mentioned in a comment by DonaldPShimoda on HackerNews. It is probably the best summary of writing recursive methods. 1. Write down what your function does in a comment. (e.g., \"sum all the elements of a binary tree\").  2. Write the function signature.  3. Write the base case. (This is usually straightforward.)  4. Stop thinking.  5. Assume your function already works and write the recursive case.  6. Profit! Fibonacci numbers The Fibonacci numbers are a series of numbers where each number in the sequence is the sum of the previous two numbers. Here are 3 implementations of a function that will return the nth Fibonacci number:</p> <p>Iterative - using a while loop: int fibwhile(int n) {   int f=1, f1 = 1, f2 = 1;   int ii=n;   while (ii &gt; 2) {     f = f1 + f2;     f2 = f1;     f1 = f;     ii--;   }   return f; }</p> <p>Recursive: int fib(int n) {    counter[n]++;    if (n &lt;=0) {       return 0;    }    else if (n == 1) {       return 1;    }    else {       return (fib(n-1) + (fib(n-2)));    } }</p> <p>Tail-Recursive: int fibtail(int n) {   return fibtail_helper(n, 0, 1); } int fibtail_helper(int n, int f2, int f1)   {   counter[n]++;   if (n &lt;= 1) {     return f1;   }   else {     return(fibtail_helper(n-1, f1, f1+f2));   } }</p> <p>Towers of Hanoi In the Towers of Hanoi game, the goal is to move all disks from one peg to another with the following constraints: 1. You can only move one peg at a time 2. A larger disk cannot be placed on a smaller disk 3. All disks must be on some peg (except when being moved)</p> <p>It turns out that there is a very straightforward recursive solution to the Towers of Hanoi game. Suppose we want to move all the disks from a source peg to a destination peg. Then the recursive algorithm is as follows: * Base Case:  Only one disk    * Move from source to destination * Recursive Case:    * Move n-1 disks from source to intermediate    * Move one disk from source to destination    * Move n-1 disks from intermediate to destination</p> <p>Unfortunately, the number of moves grows exponentially as the number of disks increases. Our recursive solution is simple &amp; elegant, but is not optimally efficient. Of course, while the iterative solution is more efficient, it is also much more complex to implement. See - trade-offs.</p> <p>Merge Sort Another recursive algorithm is merge sort. Merge sort sorts an array by splitting it into two halves, recursively sorting the two halves, then combining the two sorted halves. The base case is an array of length one which is trivially sorted.  The following is an example of merge sort. We start by breaking the array up into individual elements, then we recursively combine the parts, sorting as we go.</p> <p>Now we merge the arrays back, ensuring that each combined array is sorted.</p> <p>Structures (Chapter 8) A C struct allows you to combine multiple fields of data in a single type. struct date {   int month;   int day;   int year; }; Defining a struct does not allocate any memory. In order to do that, we need to declare a variable of type date as follows: struct date birthday; struct date first_day= {5, 29, 2019}; struct date new_years_day= {.month=1, .day=1}; To access the individual structure members, use . birthday.month = 6; birthday.day = 9; birthday.year = 1998;       You can set an existing structure variable using a compound literal: final_exam = (struct date) { .month=7, .day=17, .year=2019;        </p> <p>You can create an array of structures. Structures can contain array members and struct members.</p> <p>Structure Alignment  One thing you should keep in mind when creating structs is how your compiler allocates memory. It is common for the members of a struct to be allocated in order in memory. Since most architectures do not allow variables to cross word boundaries, a lot of memory  can be wasted. Here is an example of the memory allocation of two different declarations of a struct - both with 3 integers and 4 characters. </p> <p>The size of tightstruct will be 16 bytes (assuming 32-bit words).</p> <p>The size of loosestruct will be 28 bytes (assuming 32-bit words).</p> <p>Linked Lists The diagram below demonstrates how the basiclist example works.</p> <p>Characters &amp; Strings (Chapter 9) Character literals are single-quoted: 'a', '\\n', '\\t'. The last two are also single characters referred to as escape sequences. Using the backslash character allows us to represent characters like newline and tab. Keep in mind that the char data type is an integer - the variable holds the ASCII value of the character. So we can do things like: char a = 'a'; char d = c + 3; int order = d - 'a'; We can use ((c &gt;= 'A')  &amp;&amp; (c &lt;= 'Z')) to check that a character is an uppercase letter.</p> <p>String literals are double quoted: \u201cThis is a string\u201d.  Note that most word processors automatically convert both single and double quotes to smart quotes. Copy-and-pasting code from a word processor may generate syntax errors due to the different quote characters used. C stores strings in char arrays with a null character at the end. There is an implicit null character (\u2018\\0\u2019) at the end of each string literal. </p> <p>We can initialize a string array with an array initializer or a string literal: char carr1[] = {'H','e','l','l','o'}; char carr2[] = \"world\"; Following the declarations above, carr1 is a character array of length 5. But carr2 is a character string of length 6 because the string literal adds a null character at the end. We can treat carr2 as a string, but not carr1. To use carr1 as a string we would need to add the null as follows: char carr1[] = {'H','e','l','l','o','\\0'}; This is a critical distinction in C. Without the null character there is no way to determine where the string ends. If we print the string using printf\u2019s %s control sequence or use the string with any of C\u2019s string functions we will likely get unexpected results. </p> <p>The  character can be used to extend a string literal over multiple lines of code without adding a newline inside the string. Consecutive string literals in the source code are automatically concatenated.  Pointers (Chapter 10) One of the most powerful features of C is the pointer data type. Put simply, a pointer is a data type that has memory addresses as its values. Pointers allow the programmer to reference values through indirect addressing. Pointers have many uses in C, including * Dynamically allocating memory * Efficiently working with large, complex data structures * Changing the value of data passed to a function Keep in mind that pointers are variables. So they use memory just like any other variable. The difference is that they store a memory location (of another variable) as their data.</p> <p>The following code defines a pointer and uses it to change a variable\u2019s value. int num = 6;  /* integer / int * ptr;    / pointer to an integer (or integer pointer) / ptr = #   / assign the value of the address of num to ptr.                   Now ptr is a pointer to num / *ptr = 20;    / Assign the value 20 to the variable pointed to                   by ptr */ The &amp; is the C reference operator. It returns the address of a variable. It is an r-value (it can appear only on the right side of an assignment operator - you cannot assign a value to it and the address of a variable cannot be changed).  The * is the C indirection (dereference) operator. It returns an alias of the variable pointed to by a pointer. It is an l-value (it can appear on either side of the assignment operator - you can assign a value to it). No additional memory overhead is incurred when using a pointer as an alias. One advantage of using an alias is you can write code that can work on different variables at different times depending on what the alias is referring to.</p> <p>Note that while this example shows x and ptr being stored together in memory, the order and spacing between variables is compiler &amp; operating system dependent. The only memory guaranteed to be contiguous by the C standard is the individual members of an array.</p> <p>The reference operator and the dereference operator are complementary: * converts an address to a variable name  &amp; converts a variable name to an address</p> <p>Note that pointers have a type. A char pointer and an integer pointer pointing to the same location will yield different results. We will use integer pointers to illustrate how pointers work, but they are more often used with structs and arrays. When accessing the members of a struct through a pointer we need to use the -&gt; operator in place of the . operator. </p> <p>When used with a pointer, the const modifier can be used to indicate to the compiler that the data being the pointer refers to will not be changed through the const pointer. We can also use the const modifier to indicate that the pointer itself will not change, preventing us from changing what it is pointing to.</p> <p>We can use pointer types as function parameters. This allows us to modify the actual parameter inside the function. The address of the actual parameter should be passed to the function in this case. We can also return a pointer from a function, but be careful not to return a pointer to a local variable!</p> <p>We can perform some arithmetic with pointers (addition and subtraction). However, when we add 1 to a pointer we do not add one to the address it holds. Instead, we add the size of the type the pointer points to. So typically adding 1 to a char pointer will add one to its address, but adding 1 to an int pointer will add 4, 8 or even more to the address the pointer holds, depending on the size of the int type.</p> <p>We can also use pointers to access arrays. We can either set the value of the pointer to the array name or the address of the first element of the array: int arr[] = {1, 2, 3, 4, 5}; int * ptr; ptr = arr;   /* equivalent to: ptr = &amp;arr[0] */ We can then use pointer arithmetic to access the elements of array arr through ptr. The increment and decrement operators (++ and --) can be used to move back and forth through an array using a pointer. </p> <p>Finally, it is also possible to have a pointer to a function. This is helpful in cases where you want to pass a function as a parameter to another function. This is used extensively in implementing object-oriented languages in C, or even for writing object-oriented programs using C.</p> <p>Dynamic Memory Allocation (from Chapter 16) Many times the programmer does not know how much memory will be required. In this case, C lets the programmer allocate memory using one of the two functions below: * calloc(number_ofunits, unit_size) returns a void pointer to a region of memory large enough to hold number_of_units elements of size unit_size. The entire region is filled with 0s. * malloc(number_of_bytes) returns a void pointer to a region of memory of size number_of_bytes. It does not initialize the memory.  The sizeof operator returns the number of bytes allocated to an item. Since the size of different types varies on different machines, the sizeof operator can be used to ensure enough memory is allocated. ptr1 = calloc(20, sizeof(char));        /* Allocate 20 integers and                                        initialize to 0 / ptr2 = malloc(10);                    / Allocate 10 bytes / nums = malloc(10 * sizeof(int));        / Allocate 10 integers */</p> <p>When using sizeof to determine the size of an array, you need to divide the size of the array by the type the array holds. item_count = sizeof(item_list) / sizeof(int);</p> <p>When you are finished working with dynamically allocated memory you should always free them memory using the free function. free(ptr1);</p> <p>When working with pointers it is imperative that you ensure that any pointer you try to dereference is pointing to allocated memory. Look at the following program: </p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#include_1","title":"include","text":"","boost":1},{"location":"csc240/c/c1-notes/#include_2","title":"include <p>int main(void) {    int x = 10;    int ptr1 = &amp;x;    int *ptr2 = malloc(sizeof(int));    int *ptr3;     printf(\"x=%d &amp;x=%p  ptr1=%p  &amp;ptr1=%p *ptr1=%d\\n\",            x, &amp;x, ptr1, &amp;ptr1, *ptr1);    printf(\"x=%d &amp;x=%p  ptr2=%p  &amp;ptr2=%p *ptr2=%d\\n\",            x, &amp;x, ptr2, &amp;ptr2, *ptr2);    /printf(\"x=%d &amp;x=%p  ptr3=%p  &amp;ptr3=%p *ptr3=%d\\n\",              x, &amp;x, ptr3, &amp;ptr3, *ptr3); */    free(ptr2);    return 0;  }  With ptr1 we set it to the address of variable x, so it points to x. We allocate new memory for ptr2 using the malloc function (which allocates the given number of bytes, in this case the number of bytes the int type uses). We don\u2019t initialize ptr3. We don\u2019t have any problem using ptr1 or ptr2 since they both point to allocated memory - ptr1 memory that was allocated for variable x, ptr2 for memory allocated just for that variable which is why we must free it when we are done. We had to comment out the output line for ptr3 since we did not initialize it. Therefore, we can\u2019t know what it is pointing to. Usually it is not going to point to anything valid, so when we try to dereference it we will get unexpected behavior. In most cases the program will crash as your operating system does not like to give your programs access to random locations in memory! </p> <p>Pointer Example 1:</p> <p>In this example, when we reach the code the value stored in x is 500 and the value stored in y is 8000. We aren't concerned with where those values came from, just that the variables have that value now.</p> <p>y = &amp;x; In this line, &amp;x returns the address where x is stored (which we are told is 2000 in the example). So y will now hold the value 2000. The value held in x does not change. </p> <p>*y = 100; Here we dereference y, which means *y is an alias of the variable y is pointing to. The value held in y is 2000 which is the address of x. Therefore, *y is an alias of x so the statement assigned the value 100 to x. Now x holds the value 100. </p> <p>y = y + 10; This line is an example of pointer arithmetic. When we add or subtract a value from a pointer, we change the value stored by the pointer. However, we don\u2019t just add or subtract the value. The actual value we add or subtract is based on the size of the type of the pointer. Here y is an int pointer and ints are 4 bytes. So when we have y + 10 we are adding 10 * 4 = 40 to y since each byte is 4. This is convenient because it allows us to cycle through an array quickly using a pointer.</p> <p>Pointer Example 2:</p> <p>Pointer Example 3:</p> <p>In this example, we see a pointer to a pointer (double pointer) - *k. A double pointer holds the address of a pointer as its value, so *k is an alias for j. *k is an alias for i. You can have multiple levels of indirection, but in practice anything more than a double pointer is rare.</p> <p>Why pointers?  In a typical program you should not use pointers unless you have a good reason. Some of the reasons to use pointers are:  * Pointers allow you to manipulate memory much more quickly than any other language construct  * If your program needs to dynamically allocate array you need to use pointers  * Passing a pointer allows a large data structure to be used in a function without having to be copied - you can just reference it using the pointer But to reiterate, you should not use pointers unless you have a good reason. </p> <p>Pointers vs Arrays It may seem like pointers and arrays are the same thing. After all, pointer names can be used with array indexing, so p is equivalent to &amp;p[0] *p is equivalent to p[0] *(p+3) is equivalent to p[3] Conversely, array names can be used syntactically as pointer names. So arr is equivalent to &amp;arr[0] *(arr+3) is equivalent to arr[3] However, while we can use the name of a pointer and an array interchangeably, at least syntactically, pointers and arrays are not equivalent. A pointer is a variable that holds an address - only enough memory to hold an address is allocated. An array variable allocates all the memory necessary to hold the array. In addition, a pointer is an rvalue (you can assign a new value to it), while an array is an lvalue (you cannot assign a new value to it).</p> <p>Pointer Type vs Unsigned Int  * Both typically have the same data range (32 or 64 bits)  * Both support + and - operators  * But the operations have different meanings!  * Pointer type does not support * (multiply) and /  * Unsigned int does not support * (dereference)  </p> <p>Bit Operations (Chapter 11) Systems programmers often need to work with memory at the individual bit level. A byte consists of 8 bits. Each bit can have the value 1 or 0. We call the rightmost bit of a byte the least significant or low-order bit, and the leftmost bit is called the most significant or high-order bit. </p> <p>Representation of numbers in binary Positive integers are typically represented by converting them to binary. With negative numbers, most computers use two's complement notation where the leftmost bit is the sign bit.  To convert a negative number from decimal to binary we add 1 to the value, convert to binary,  then change all the 1\u2019s to 0\u2019s and the 0's to 1\u2019s.  To convert a negative binary number to decimal, we complement the bits, convert to decimal, then subtract 1. Integers are typically represented by four or eight contiguous bytes (32 bits). </p> <p>Bit operators:         &amp; - bitwise AND         | - bitwise OR         ^ - bitwise exclusive OR         &lt;&lt; - left shift         &gt;&gt; - right shift There is also a unary ones complement operator ~. These operators are valid on any integer type.  The C Preprocessor (Chapter 12) Before a C program is compiled, it is first analyzed by the preprocessor. Preprocessor statements are prefixed by the pound sign - #. The preprocessor, when used properly, allows you to write programs that are easier to develop, modify, and port to different systems. Preprocessor statements have a slightly different syntax than regular C statements.</p> <p>The -E gcc flag will generate the C file after the preprocessor runs. This is useful for seeing how preprocessor statements work and for debugging them.</p> <p>The #define statement assigns a symbolic name to a constant (a symbolic constant). They are sometimes called macros. While they can appear anywhere in the code, by convention they appear near the top of the source file. The convention is to use all caps for preprocessor constants. Note that, unlike a const variable, no memory is allocated by a #define. You cannot assign a value to a preprocessor constant. So the following statements</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#define-num-10","title":"define NUM 10","text":"","boost":1},{"location":"csc240/c/c1-notes/#define-name-clint-barton","title":"define NAME \"Clint Barton\" <p>define two symbolic constants. Note that the statements are not terminated by a semicolon. In code, the statement printf(\"Name=%s, Num=%d\\n\", NAME, NUM); would be converted by the preprocessor to the statement printf(\"Name=%s, Num=%d\\n\", \"Clint Barton\", 10); before the compilation begins. Many compilers define NULL and pi (M_PI in math.h). One common use of preprocessor constants is to define array sizes. This allows the size to be changed with only a single line of code. </p> <p>The preprocessor performs a literal replacement of the name with the value in the source. So you can define constants to represent operations, though if you choose to do so you should make sure the name makes the operation clear. </p> <p>You can also define macros that take arguments, creating inline functions. The advantage of inline functions is that there is no function-call overhead since the inline function is converted to code before compilation. In this case, the arguments will be replaced in the macro when the code is replaced by the preprocessor.  So code like below: </p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#define-maxval-100","title":"define MAXVAL 100","text":"","boost":1},{"location":"csc240/c/c1-notes/#define-quadfnab-asqrtb-bb-2aa","title":"define QUADFN(a,b) asqrt(b) + bb - 2aa <p>x = MAXVAL + QUADFN(5,16);  becomes  x = 100 + 5sqrt(16) + 1616 - 255; </p> <p>Again, great care should be taken not to write macros that introduce subtle bugs. Suppose you have the following inline function:</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#define-absa-a0-a-a","title":"define abs(a)  ((a&lt;0) ? -(a) : (a)) <p>Then k=abs(3); is equivalent to: k=(3 &lt; 0) ? \u2013(3) : (3); But k=abs(++j); is equivalent to: k=((++j &lt; 0) ? \u2013(++j) : (++j); You will note that since ++j performs an assignment, the variable j is modified twice in this case. </p> <p>The number of arguments to a macro can be variable. The arguments can be accessed using the VA_ARGS identifier. </p> <p>The #include statement allows us to include statements from another file into our C program. C include files are also called header files and typically end with the .h extension. Header files should be included before any code that uses statements defined in them. The #include statement is replaced by the contents of the header file in the source code. You have seen the following statement </p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#include_3","title":"include <p>which includes I/O routines. Other helpful include files provided by C are  stddef.h limits.h float.h string.h You can also write your own header file. The &lt;&gt; characters tell the preprocessor to look for the file in the system include file directory. Using \u201c\u201d tells the preprocessor to look in the current directory. Note that you should never include .c files!</p> <p>Conditional compilation allows code to be compiled only when certain criteria has been met. For example, </p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#ifdef-debug","title":"ifdef DEBUG <p>printf(\u201cDEBUG: something happened\\n\u201d);</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#endif","title":"endif <p>The #endif is important - always make sure you end an #ifndef statement with #endif. In this code, the printf will only be compiled if the DEBUG constant has been defined. We can define preprocessor constants at compile time, so the same source file can generate different executables depending on those constants.</p> <p>You can also #undef a constant if necessary.</p> <p>There is also an if \u2026 else preprocessor construct:</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#if-os-1-mac-os","title":"if    OS == 1  /* Mac OS */ <p>...</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#elif-os-2-windows","title":"elif  OS == 2  /* Windows */ <p>...</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#elif-os-3-linux","title":"elif  OS == 3  /* Linux  */ <p>...</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#else","title":"else <p>...</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#endif_1","title":"endif <p>Include files can be nested. While this can simplify your code, it can lead to problems if a file is included multiple times in the same file. To prevent this, we can use conditional compilation to create a guard to prevent multiple inclusion  In the example below, code is included only if it has not been previously included:</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#ifndef-_myheader_h","title":"ifndef _MYHEADER_H","text":"","boost":1},{"location":"csc240/c/c1-notes/#define-_myheader_h","title":"define _MYHEADER_H <p>/* code */</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#endif_2","title":"endif <p>Working with Types (Chapter 13) Enumerated Data Types There are times where we want to create a new data type that has as its values names that represent some concept. Enumerated data types allow us to specify the valid values for a type. For example, we can define a \u201cdays of the week\u201d type as follows: enum week_day { sunday, monday, tuesday, wednesday,                    thursday, friday, saturday}; This creates a new enumerated data type called enum week_day. We can then define and use a variable of this type as follows: enum week_day workday = monday; /* ... */ if ( workday == friday ) {   workday = monday; } Enumerated data types are integer types. The specified names are assigned integer values starting with 0. So in our week_day_t enum sunday=0, thursday=4 and saturday=6. We can assign our own values when we create the enum. enum direction { south = 180, north = 0, east = 90, west = 270 };</p> <p>The scope rules for enumerated data types are the same as with structs or variable declarations. Keep in mind that if you print an enumerated data type the result will be an integer, not the name. If you want to use the name as input or output you will need to write your own functions to handle that conversion. In general, enumerated data types should not be treated as integers and their underlying values should not be assumed. For example, in our direction type above, if we want to change the direction a variable holds we should use the names, not the values. Finally, the names in the enumerated data type are treated as constants in the program, so those names should not be reused anywhere the eum is in scope. Defining Types When we defined structs and enums above we needed to specify in the variable declaration that we were using a struct or enum. For example, in the previous section we declared a direction variable as enum direction current_direction = north; not direction current_direction = north; C lets us define a new type name using the typedef statement. The format is typedef double real; The typedef statement adds readability to the code. The compiler will treat the variable \u201creal\u201d as a double. We can use typedef to simplify how we use our direction enumeration above: typedef enum { south = 180, north = 0,                 east = 90, west = 270 } direction_t; Then we can define a direction variable as follows: direction_t current_direction = north;</p> <p>We can define array and struct types as follows: typedef int grades_t[10]; typedef struct { float x; float y; } point_t;</p> <p>grades_t cs_grades;  /* Array of 10 ints / point_t current_loc; / Point */</p> <p>Clear naming of user-defined types is critical, as the typedef hides the details of the type. The name should indicate what the underlying type is For example typedef char *string_pointer_t; typedef struct {int id, char * name} student_record_t; are a good names, but typedef int my_type_t[23]; typedef struct {int id, char * name} thing_t; are not. Type Conversion The C compiler has a series of steps it takes when determining how to convert types from one to the other. It is best to write code that avoids implicit type conversion as much as possible, but you should familiarize yourself with the rules just in case. Working with Large Programs (Chapter 14) Most C programs are too large to be manageable in a single file. In industry, programs are usually developed by more than one programmer. C provides a mechanism to facilitate breaking code across multiple files.  C supports modular programming where programs can be combined into modules - functions or related functions logically grouped together in individual files. The benefits of modules are data abstraction, code sharing (libraries) and separate compilation. C is flexible about how you create modules.  Best practice is to create a specification in a header (.h) file with any forward declarations and symbolic constants provided by the module (similar to the public members of a Java object) . The implementation is provided in a C source file with the definitions. The C file can also contain functions that are \u201cprivate\u201d, that is they are not intended to be used outside the module. </p> <p>When using a module, the module code must be linked with the source code. To create an executable called \u201cmyprogram\u201d based on myprogram.c which uses the modules mymath and mystuff you would compile with the following gcc command (carefully note the extensions used!): gcc myprogram.c mymath.c mystuff.c -o myprogram myprogram.c should contain</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#include_4","title":"include <p>An alternate way to compile your program would be to first generate object files of each module as follows: gcc -c mymath.c gcc -c mystuff.c Then you can build your code by linking the object files: gcc myprogram.c mymath.o mystuff.o Communication Between Modules We have already discussed how you can provide functions from a module by including their forward declarations in a header file. Functions in separate files can also access (and change) the same variable by using external variables. To access an external variable, use the extern keyword in the variable declaration: extern int counter; Keep in mind the declaration above is not a definition. The variable must be defined somewhere either by omitting the extern keyword in the declaration or by initializing the variable as follows: extern int counter = 0; To prevent a global variable from being declared as external implicitly (which is the default) you can declare it as static: static int local_counter = 0; Functions can also be defined as static to prevent them from being called outside the module. It is a good idea to always use static to declare global variables that should not be available outside the module where they are defined.  Utilities for working with large programs There are several utilities that allow you to simplify the process of building multi-file programs. The make utility allows you to specify how to build a particular program and what other files (dependencies) need to be included (discussed below). It is also a good idea to use some sort of source code management to manage your source code such as cvs, svn, or git. Finally, Unix provides multiple utilities such as grep and sed which allow you to work with source code (as well as any text file).  Makefiles The make utility is designed to automatically determine how a program should be compiled then to execute the correct commands to perform that compilation. It also intelligently determines what parts of the program need to be compiled in cases where there are multiple files. The input to make is a makefile which contains the directions for building the program. </p> <p>The make utility is executed by typing make in the directory that contains the makefile. The makefile contains a list of rules that tell the make utility what to do. There are two parts to each rule: 1. The dependency line (which must start in column 1) 2. A list of actions (which must be indented with a tab) The sample makefile below has 2 rules - one to build a program called \u201cmyprogram\u201d and another to build an object file called goodstuff.o. Note that goodstuff.o is a dependency of myprogram, so it will be automatically built by make if necessary when you build myprogram. myprogram: myprogram.c .o goodstuff.o     gcc --std=c11 -Wall -pedantic myprogram.c .o goodstuff.o goodstuff.o:      gcc --std=c11 -Wall -pedantic -c goodstuff.c In order to build myprogram, you would execute the following command: make myprogram You could also generated the goodstuff.o object file by entering the command make goodstuff.o</p> <p>If you add a rule for \u201call\u201d to your make file, then simply typing make at the command line will build everything needed to generate the program executable.</p> <p>You can also use variables to avoid having to retype the same things over and over. That is often used for the compiler command and compiler flags. You can also have a rule that executes shell commands, useful to create a rule to clean up after the compiler or to force everything to rebuild. </p> <p>Below is a sample makefile for a project that includes 4 C files - poly.c, term.c, polynomial.c, and basiclist.c. The \u201call\u201d rule builds the whole project, then there is a separate rule for each of the modules term.c, polynomial.c, and basiclist.c. The rule \u201cclean\u201d deletes all object files, backup files, and .exe files (in cases where this is compiled on Windows). Note that there are two variables defined at the top - one for the name of the compile command and another for the flags for the compiler.  CC=gcc CFLAGS=-Wall -pedantic --std=c11 all: poly.c term.o polynomial.o basiclist.o         $(CC) $(CFLAGS) poly.c term.o polynomial.o basiclist.o -o poly term.o: term.c         $(CC) $(CFLAGS) -c term.c polynomial.o: polynomial.c         $(CC) $(CFLAGS) -c polynomial.c basiclist.o: basiclist.c         $(CC) $(CFLAGS) -c basiclist.c clean:         rm -f *.o *~ poly.exe To build the whole project make To build just one module (in this case term.o) make term.o To clean the directory make clean C I/O (Chapter 15) The C language itself does not provide input / output (I/O) operations, but the C library contains several I/O functions. The stdio.h header file includes function declarations and macro definitions for the standard library I/O routines.</p> <p>Character I/O is performed using the getchar() and putchar() functions. These functions work one character at a time. The  putchar takes a single character as an argument and displays that character. </p> <p>Formatted I/O is performed using the printf() and scanf() functions. Both of these functions take a string pointer to a format string as their first argument. The format string specifies how the remaining arguments to the function are to be interpreted. Scanf ignores any leading whitespace if a non-character type is read. Scanf returns the number of variables it read &amp; assigned. We have already covered many of the control sequences printf &amp; scanf use. There are several other flags and modifiers available such as justification, field size, and additional types. Any good C reference will provide a listing of these. The code examples from class will cover all the ones you will be expected to use in your code for this class. </p> <p>Note that scanf will read a string (%s), but only up to the first whitespace. To read an entire string to the end of the line (necessary for getting input) use fgets. fgets(movie-&gt;title, TITLE_LEN, stdin); The first parameter is a pointer to your string (in this case I have a pointer to a structure of type movie_t and I'm passing a character array member of movie_t called \"title\"), the # of characters to read, and the filename. stdin is a special file that represents user input.</p> <p>Input &amp; Output Operations with Files One way to write output to a file is to use your operating system\u2019s redirect operator. For example, the line below writes the output of myprogram.exe to a file called \u201coutput.txt\u201d:         ./myprogram.exe &gt; output.txt Note that this redirects all output to the file, so if you have any prompts for input those will not be displayed to the screen. There is a similar technique that we can use to provide input to our program:         ./myprogram.exe &lt; input.txt Note that the direction of the operator is reversed. In this case, the file will be treated as the input of our program. </p> <p>The above operations were done using the operating system, not the C language. C provides functions to write directly to and read from a file from inside our program. Note that when dealing with files we need to be concerned about the end of the file. If we read from a file past the end of the file we will get an error. Most C library file functions use a special flag (EOF) to indicate when the end of the file is reached. You should always check that flag in your programs when you use file I/O.</p> <p>Before you can perform I/O on a file the file must be opened. The fopen function opens a file and returns a FILE pointer to the file. You must specify the mode you want to use the file for - read (\u201cr\u201d), write(\u201cw\u201d), or append (\u201ca\u201d). Append and write mode will create the file if it does not already exist. You can read from anywhere in a file, but you can only write to the end. Adding a + character to the mode will allow both reading &amp; writing. Adding a b to the mode will open the file in binary mode. If the file cannot be opened the function returns NULL. You should always check that the file was opened successfully before proceeding. FILE infile, *outfile, *binaryfile; if ( (infile = fopen(\u201cinput.txt\u201d, \u201cr\u201d)) ==  NULL ) {     / Input file was not opened /      exit(EXIT_FAILURE); } if ( (outfile = fopen(\u201coutput.txt\u201d, \u201cw+\u201d)) ==  NULL ) {     / Output file was not opened /     exit(EXIT_FAILURE); } if ( (binaryfile = fopen(\u201cmyfile\u201d, \u201cwb+\u201d)) ==  NULL ) {     / My file was not opened */     exit(EXIT_FAILURE); } The code above opens input.txt for reading and myfile for both reading &amp; writing in binary mode. The exit function is used to force the program to terminate. The EXIT_FAILURE value is defined in stdlib.h and indicates to the OS that the program failed. EXIT_SUCCESS is used to indicate a successful termination. You can also specify your own integer value. Using the exit() function in main() is the same as return(); When you are done with a file you should always close it.  fclose(infile); fclose(outfile); fclose(binaryfile);</p> <p>Once we have opened a file, C provides several methods for writing to the file. Also, the standard streams (stdin, stdout, stderr) can also be used in place of a file. </p> <p>You can use getc &amp; putc to write a single character to a file: c = getc(infile); putc('\\n', outfile); The return type of getc is an int and returns EOF when you reach the end of the file. There are also file versions of the I/O functions you have already seen. The functions fprintf, sprintf, fgets, and fputs work just like you would expect except that they take an additional parameter for a file pointer. .</p> <p>The function rename(filename, newname) renames a file and remove(filename) deletes a file. A nonzero value is returned when these functions fail. Advanced C Features (Chapter 16) C provides a goto statement. In general, you should not use goto for flow control. However, there are places where goto statements can make the code more readable or more efficient.  if (myptr == NULL) {   goto handle_error; } /* \u2026 */ handle_error : printf(\"There was a problem!\");</p> <p>Using Semicolons &amp; Commas A semicolon can be placed anywhere a legal statement can appear. This causes nothing to be done and is called a null statement. This is most often seen in a loop. For example, the following code counts  the number of characters that appear in the file: fileptr = fopen(\"input.txt\", \"r\"); int count = 0; for ( ; getc(fileptr) != EOF; count++)     ; printf(\"The number of characters in the file is %d\\n\", count); fclose(fileptr); All the work is done in the for statement - we get a file and increment the count. Since there is nothing to do in the loop, we use a null-statement. The reason we declare count outside the for statement is so that it is in scope when we get to the printf.</p> <p>Commas are also operators in C. They have the lowest precedence of any operator. We could write a while loop to add up an array using the comma operator: int jj = 0, sum = 0; while ( jj &lt; 10 ) {     sum += arr[jj], ++jj; }</p> <p>Unions A C union is used when it is necessary to store different data types in the same memory location.  union my_union {   int x;   char s[20]; }; Unions are similar to structs, but, unlike a struct, only enough memory is allocated for a union variable to hold the largest member. So in the example above, a union my_union variable would allocate enough memory for 20 characters. Then the variable could be used to hold either an int or a char array, but not both at the same time. </p> <p>Type Qualifiers C provides several type qualifiers to give the compiler more information about the way you intend to use the variable. What actually happens with these type qualifiers is compiler &amp; machine dependent.  * register requests the compiler to be stored in one of the one of the machines registers to speed up execution.  * volatile tells the compiler that the variable will change its value to prevent optimizations that remove assignments that the compiler views as redundant.  * restrict is used in pointer declarations to indicate that it is the only pointer to the memory it is pointing to. </p> <p>Command-line Arguments We have seen how to get information into your program from user input and from files. Another way is via command-line arguments. When you execute your program, the operating system passes two parameters to main. The first, argc, is an integer that specifies the number of command-line arguments (including the executable name). The second, argv, is an array of character pointers to the command line parameters, where argv[0] is the name of the command and argv[1] through argv[n] are the parameters. Keep in mind that the arguments are stored as strings, so if you expect numeric input they will need to be converted to the correct type. The program below prints each of the command line arguments:</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#include_5","title":"include <p>int main(int argc, char * argv[]) {</p> <p>int ii;   /* Print the number of arguments passed /   printf(\"argc = %d\\n\", argc);   / Print each individual argument. arg[0] is the name of the command */   for(ii=0;ii&lt;argc;ii++) {     printf(\"argv[%d] = %s\\n\", ii, argv[ii]);   }    return 0; } Debugging (Chapter 17) Debugging with the preprocessor One way to get debugging output from a C program is to use preprocessor directives to enable debugging code to be enabled or disabled as desired. In the example below, we use the symbol DEBUG to determine whether to compile the debug statements. </p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#ifdef-debug_1","title":"ifdef DEBUG <p>fprintf(stderr, \"Debug: y=%d\\n\", y);</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#endif_3","title":"endif <p>If the DEBUG symbol is defined, either with a #define or by using the -D flag to gcc, then the debug statement will be printed. Otherwise, nothing will print. This allows the programmer to decide at compile time whether or not to print the debug statements.  You could also write an inline function that will only display debug statements if the DEBUG symbol is defined as follows:</p>","text":"","boost":1},{"location":"csc240/c/c1-notes/#ifdef-debug_2","title":"ifdef DEBUG","text":"","boost":1},{"location":"csc240/c/c1-notes/#define-printdebugfmt-fprintfstderr-fmt-va_args","title":"define PRINTDEBUG(fmt, ...)  fprintf(stderr, fmt, VA_ARGS)","text":"","boost":1},{"location":"csc240/c/c1-notes/#else_1","title":"else","text":"","boost":1},{"location":"csc240/c/c1-notes/#define-printdebugfmt","title":"define PRINTDEBUG(fmt, ...)","text":"","boost":1},{"location":"csc240/c/c1-notes/#endif_4","title":"endif <p>PRINTDEBUG(\"  DEBUG %d\", x); In the code above we need the else case so that any call to PRINTDEBUG in the code will evaluate to a null statement during the preprocessor step.</p> <p>Debugging using the GNU debugger You can always track down bugs using print statements (printf or cout). Also writing to a log file can be helpful, especially once a program is in production. For more subtle bugs you will want to use a debugger. </p> <p>In order to use gdb to debug, you will need to compile with the -g option gcc -pedantic -Wall gdbtest.c -g</p> <p>The \u201cgdb\u201d command is used to start gdb. gdb runs in interactive mode. You issue commands similar to a shell prompt. The gdb prompt has command-line recall and tab-completion. whuber@localhost 220]$ gdb a.out  GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-94.el7 Copyright (C) 2013 Free Software Foundation, Inc. This GDB was configured as \"x86_64-redhat-linux-gnu\". Reading symbols from /home/whuber/220/a.out...done. (gdb) </p> <p>To run your program: (gdb) run Starting program: /home/whuber/220/a.out  10 + 0 = 10 15 + 5 = 10 [Inferior 1 (process 3623) exited normally]</p> <p>If your program takes command-line parameters you can enter them after \u201crun\u201d. </p> <p>To set a breakpoint:  (gdb) break gdbtest.c:11</p> <p>We can also put a condition on our breakpoint: (gdb) break gdbtest.c:30 if a &gt;= 12</p> <p>\u201cclear\u201d removes all breakpoints, or you can specify a breakpoint to remove using delete. To see all breakpoints currently set, use \u201cinfo breakpoints\u201d</p> <p>At a breakpoint:    * step moves forward one instruction    * next moves forward one line of code (treating function calls as a single instruction)    * until finishes the loop    * continue begins regular processing until the next breakpoint or end of program    * finish continues until the end of the current function</p> <p>To display a variable\u2019s value, use the print command (or print/x to see the hex value). You can also use print with pointers.(gdb) print a (gdb) print a $3 = 15 (gdb) print/x a $4 = 0xf (gdb) print ptr-&gt;num $1 = 40  (gdb) print ptr-&gt;str $2 = \"Hello!\\000\\000\\000\" (gdb) print *ptr $5 = {num = 40, str = \u201cHello!\\000\\000\\000\u201d}</p> <p>Watchpoints stop execution when a variable is modified. Note that if your program has multiple variables with the same name then the one currently in scope gets watched.</p> <p>Other commands;    * The where command displays a trace of where you are in the program.    * The backtrace command gives you a call stack trace.    * finish continues until the end of the current function.    * delete deletes a specified breakpoint.    * info breakpoints displays information about all breakpoints currently set    * You can recall history using the arrow keys and use the  key for autocomplete.     * Enter the command quit to exit. <p>The Standard C Library (Appendix B) The C standard library provides several functions, macros, and type definitions which perform common tasks. We will not cover all the functions in the C standard library, but you should be able to look at a reference and use them in your code where necessary.  * stddef.h contains standard definitions for things like NULL &amp;size_t * limits.h contains implementation-defined minimum and maximum values for different integral types. For example, the valid values of the int type range from INT_MIN through INT_MAX. * stdbool.h contains definitions for Boolean variables.  * float.h contains implementation-defined minimum and maximum values for different floating point data types. * stdint.h contains definitions and constants to allow you to work with integers in a more portable fashion. For example, the type int32_t is defined to be exactly 32 bits no matter what platform the code runs on.  * string.h contains functions to perform character array operations.  * stdbool.h contains definitions for Boolean variables.  * ctype.h contains functions dealing with single characters such as checking the type (numeric, space, etc) and its case..  * stdio.h contains functions and defines for working with I/O.  * stdlib.h contains a wide variety of miscellaneous functions, including memory management and functions to convert between types.  * math.h contains math functions and constants  * complex.h contains functions and constants for working with complex numbers</p> <p>string.h The functions on string.h work on character arrays &amp; memory. They take character pointers as parameters. Most of the functions that start with strn also work with non-terminated character arrays since they include a length parameter. In general, strn- functions are preferred when they exist. Some commonly used functions include: * strcmp(str1, str2) compares str1 &amp; str2. It returns a value less than zero if s1 is less than s2, 0 if they are equal, and greater than zero if s1 is greater than s2. * strcmp(str1, str2, n) compares at most n characters of str1 &amp; str2.  * strcpy(str1, str2) copies the string at str2 to str1 and returns a pointer to str1. Note that if str2 is bigger than str1 a buffer overflow will occur. You should never use strcpy()! * strncpy(str1, str2, n) copies at most n characters from str2 to str1 and returns a pointer to str1. * strlen(str1) returns the number of characters in str1, excluding the null character. * strtok(str1, str2) breaks str1 into tokens based on the delimiters in str2. It returns the first token of str1. Delimiters are replaced with NULL as they are encountered. Each subsequent call should pass a null pointer in place of str1 and will return the next token.  * memcmp(ptr1, ptr2, n) compares the n first characters, returning a value less than 0 if ptr1 is less than ptr2, 0 if they are equal, and a value greater than 0 if ptr1 is greater than ptr2. * memcpy(ptr1, ptr2, n) copies n characters from the memory location pointed to by ptr2 to ptr1.  * memmove(ptr1, ptr2, n) copies n characters from the memory location pointed to by ptr2 to ptr1 even if they overlap * memset(ptr1, c, n) sets the first n characters of ptr1 to the character c. Note that the mem- functions treat null characters the same as any regular characters.</p> <p>Compiling with gcc (Appendix C) The C compiler we will use is gcc (which originally stood for GNU C Compiler but now stands for GNU Compiler Collection). An Integrated Development Environment (IDE) such as Eclipse or Visual Studio will let you edit, compile, debug, and run your program all in one application. However, gcc only compiles your code. You will have to edit your code in the editor of your choice, as long as it will save your code in raw text format. Visual Studio Code is an excellent choice, as is Notepad++. </p> <p>The general format of the gcc command is: gcc [ options ] file1 [ file2 \u2026.] Gcc will compile and link all files listed on the command line. Keep in mind that you do not have to compile header files as they are included in the source code that uses them. </p> <p>The primary options we will use are the following: -std=c11                 Specifies the standard to use (in this case c11) -Wall                 Display all warnings -pedantic                 Checks that the code does include any allowable language  extensions that are not required by the language standard The options above ensure that our code is compliant with the 2011 C standard. A list of other helpful options is included later in this section. You should get in the habit of always fixing warnings unless you are sure they will not cause any problems. And even if you are sure, you should try to fix them as warnings nearly always indicate a bug.</p> <p>To compile and run your code, first edit it (in your favorite text editor) and save it to the file system. Then using a terminal, navigate to the directory where your code is stored. On Windows, the easiest way is to first change to the root of the disk you saved your file on using one of the commands below: * cd c: (Cygwin) * cd /mnt/c (Ubuntu for Windows) * On MacOS or Linux you can change directly do the directory with the cd command</p> <p>The book has a list of gcc options (also called switches). You can also use the command man gcc to display the valid options. The most common ones we will use in class are -c                         Do not link the files, instead save the object files (.o). -g                         Include debugging information (used with gdb) -D id                        Defines id with a value of 1 -D id=value         Defines id with a value of value -E                         Run the preprocessor -o filename                Generate an executable named filename instead of a.out or a.exe -std=c99                 Specifies the standard to use (in this case c99) -Wall                 Display all warnings -Wextra                 Display extra warnings not included in Wall -Wconversion        Display warnings related to implicit conversion -llib                        Link in library lib -S                         Generate assembly code -ON                         Optimization level N -v                         Show verbose output --version                Display the version and copyright notice</p> <p>Examples: You can compile project.c &amp; basiclist.c into an executable called proj2 like this: gcc -std=c11 -pedantic -Wall project.c basiclist.c -o proj2 You can generate an object file (basiclist.o) from basiclist.c with the command gcc -std=c11 -pedantic -Wall basiclist.c -c Once you\u2019ve done that, if you change project.c you can recompile your project with the command gcc -std=c11 -pedantic -Wall project.c basiclist.o -o proj2 This will use basiclist.o to build proj2 without recompiling basiclist.c.</p> <p>Common Programming Mistakes (Appendix D) Common Programming Pitfalls As you write your code, try to avoid the following types of (very common) errors that programmers make: * Random Walk Programming is making small, random changes until your code compiles. This is a bad habit!  When you find an error you should always try to figure out why the error occurred and then fix it in a way that ensures it is really fixed. Keep in mind that just because your code compiles that doesn\u2019t mean it will work. * Cargo Cult Programming / Magical Incantations is copying and pasting code you don\u2019t understand. If you don\u2019t understand code you should never include it - it could be dangerous. * Big Ball of Mud is \u201cA haphazardly structured, sprawling, sloppy, duct-tape-and-baling-wire, spaghetti-code jungle.\u201d  Big balls of mud usually result when you start programming before fully understanding the requirements without a good design and frequently incorporate the 2 problems above.</p>","text":"","boost":1},{"location":"howtos/","title":"How-Tos - Index","text":"<ul> <li>How-Tos - CSC110</li> <li>How-Tos - CSC205</li> <li>How-Tos - CSC240</li> </ul>","boost":1},{"location":"howtos/howtos-csc110/","title":"How-Tos - CSC110","text":"","boost":1},{"location":"howtos/howtos-csc110/#wade-hubers-github-codeexamples","title":"Wade Huber's GitHub CodeExamples","text":"<p>https://github.com/wadehuber/codeexamples</p>","boost":1},{"location":"howtos/howtos-csc110/#wade-hubers-github-csc110-code-examples","title":"Wade Huber's GitHub CSC110 Code Examples","text":"<p>https://github.com/wadehuber/csc110examples</p>","boost":1},{"location":"howtos/howtos-csc110/#wade-hubers-youtube-channel","title":"Wade Huber's Youtube Channel","text":"<p>https://www.youtube.com/@logiclambda</p>","boost":1},{"location":"howtos/howtos-csc205/","title":"How-Tos - CSC205","text":"","boost":1},{"location":"howtos/howtos-csc205/#wade-hubers-github-codeexamples","title":"Wade Huber's GitHub CodeExamples","text":"<p>https://github.com/wadehuber/codeexamples</p>","boost":1},{"location":"howtos/howtos-csc205/#wade-hubers-github-csc205-code-examples","title":"Wade Huber's GitHub CSC205 Code Examples","text":"<p>https://github.com/wadehuber/csc205codeexamples</p> <p>Note</p> <p>The csc205codeexamples is a private GitHub repository. You will need to contact Wade Huber to be added to the repository for access.</p>","boost":1},{"location":"howtos/howtos-csc205/#wade-hubers-youtube-channel","title":"Wade Huber's Youtube Channel","text":"<p>https://www.youtube.com/@logiclambda</p>","boost":1},{"location":"howtos/howtos-csc240/","title":"How-Tos - CSC240","text":"","boost":1},{"location":"howtos/howtos-csc240/#wade-hubers-github-codeexamples","title":"Wade Huber's GitHub CodeExamples","text":"<p>https://github.com/wadehuber/codeexamples</p>","boost":1},{"location":"howtos/howtos-csc240/#wade-hubers-github-csc240-code-examples","title":"Wade Huber's GitHub CSC240 Code Examples","text":"<p>https://github.com/CGCC-CS/csc240classexamples</p>","boost":1},{"location":"howtos/howtos-csc240/#wade-hubers-youtube-channel","title":"Wade Huber's Youtube Channel","text":"<p>https://www.youtube.com/@logiclambda</p>","boost":1},{"location":"howtos/howtos-csc240/#install-gcc-g-and-make-on-ubuntu-wsl","title":"Install GCC, G++ and Make on Ubuntu (WSL)","text":"<pre><code>$ sudo apt update\n$ sudo apt upgrade -y\n$ sudo apt install build-essential\n</code></pre> <p>Note</p> <p>build-essential installs gcc, g++, and make.</p> <p>Source of info:</p> <p>https://help.ubuntu.com/community/InstallingCompilers</p>","boost":1},{"location":"howtos/howtos-csc240/#to-verfiy-the-versions-of-gcc-g-and-make-that-was-installed-on-ubuntu-wsl","title":"To verfiy the versions of gcc, g++ and make that was installed on Ubuntu (WSL)","text":"<pre><code>$ gcc -v\n$ g++ -v\n$ make -v\n</code></pre> <p><code>build-essential</code> installs <code>gcc</code>, <code>g++</code>, and <code>make</code>.</p> <p>Source of info:</p> <p>https://help.ubuntu.com/community/InstallingCompilers</p>","boost":1},{"location":"howtos/howtos-csc240/#change-directory-into-a-windows-directory-from-linux-command-line","title":"Change directory into a windows directory from linux command line:","text":"<pre><code>$ cd /mnt/drive_letter/directory/directory/\n</code></pre>","boost":1},{"location":"howtos/howtos-csc240/#list-directory-contents","title":"List directory contents:","text":"<pre><code>$ ls -al\n</code></pre>","boost":1},{"location":"howtos/howtos-csc240/#compiling-c-with-gcc","title":"Compiling C with gcc","text":"<p>Always compile your code using the following command line options to ensure you are writing standard C code:</p> <pre><code>$ gcc --std=c11 -pedantic -Wall filename.c\n</code></pre> <p>then to run the code in Ubuntu, other Linux distros, WSL, or MacOS</p> <pre><code>$ ./a.out\n</code></pre> <p>Source of info:</p> <p>https://github.com/wadehuber/codeexamples/blob/master/programming/c_information.md</p>","boost":1},{"location":"howtos/howtos-csc240/#compiling-c-with-g","title":"Compiling C++ with g++","text":"<p>You should compile your programs with the following command to ensure you are using the correct C++ standard.</p> <pre><code>$ g++ --std=c++17 -pedantic -Wall filename.cpp\n</code></pre> <p>then to run the code in Ubuntu, other Linux distros, WSL, or MacOS</p> <pre><code>$ ./a.out\n</code></pre> <p>Source of info:</p> <p>https://github.com/wadehuber/codeexamples/blob/master/programming/cpp_information.md</p>","boost":1},{"location":"howtos/howtos-csc240/#while-in-wsl-ubuntu-launch-visual-studio-code-from-the-command-line-in-your-current-directory","title":"While in WSL Ubuntu, launch Visual Studio Code from the command line in your current directory","text":"<p>Type <code>code .</code> from the WSL Ubuntu terminal command prompt </p> <pre><code>$ code .\n</code></pre>","boost":1},{"location":"howtos/howtos-csc240/#visual-studio-code-keyboard-shortcuts-reference-sheet","title":"Visual Studio Code Keyboard Shortcuts Reference Sheet","text":"<p>Windows Visual Studio Code Keyboard reference sheet</p> <p>Linux Visual Studio Code Keyboard reference sheet</p> <p>MacOS Visual Studio Code Keyboard reference sheet</p>","boost":1},{"location":"linux/","title":"Linux - Index","text":"<ul> <li>Ubuntu CLI Cheatsheet</li> </ul>","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/","title":"Ubuntu CLI Cheatsheet 2024","text":"","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#system","title":"System","text":"","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#system-information","title":"System information","text":"<p>uname -a : Displays all system information. hostnamectl : Shows current hostname and related details. lscpu : Lists CPU architecture information. timedatectl status : Shows system time.</p>","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#system-monitoring-and-management","title":"System monitoring and management","text":"<p>top : Displays real-time system processes. htop : An interactive process viewer (needs installation). df -h : Shows disk usage in a human-readable format. free -m : Displays free and used memory in MB. kill  : Terminates a process.","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#running-commands","title":"Running commands","text":"<p>[command] &amp; : Runs command in the background. jobs : Displays background commands. fg  : Brings command to the foreground.","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#service-management","title":"Service management","text":"<p>sudo systemctl start  : Starts a service. sudo systemctl stop  : Stops a service sudo systemctl status  : Checks the status of a service. sudo systemctl reload  : Reloads a service\u2019s configuration without interrupting its operation. journalctl -f : Follows the journal, showing new log messages in real time. journalctl -u  : Displays logs for a specific systemd unit.","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#cron-jobs-and-scheduling","title":"Cron jobs and scheduling","text":"<p>crontab -e : Edits cron jobs for the current user. crontab -l : Lists cron jobs for the current user.</p>","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#files","title":"Files","text":"","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#file-management","title":"File management","text":"<p>ls : Lists files and directories. touch  : Creates an empty file or updates the last accessed date. cp   : Copies files from source to destination. mv   : Moves files or renames them. rm  : Deletes a file.","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#directory-navigation","title":"Directory navigation","text":"<p>pwd : Displays the current directory path. cd  : Changes the current directory. mkdir  : Creates a new directory.","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#file-permissions-and-ownership","title":"File permissions and ownership","text":"<p>chmod [who][\u00b1][permissions]  : Changes file permissions. chmod u+x  : Makes a file executable by its owner. chown [user]:[group]  : Changes file owner and group.","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#searching-and-finding","title":"Searching and finding","text":"<p>find [directory] -name  : Finds files and directories. grep   : Searches for a pattern in files.","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#archiving-and-compression","title":"Archiving and compression","text":"<p>tar -czvf  [files] : Compresses files into a tar.gz archive. tar -xvf  [destination] : Extracts a compressed tar archive.","boost":1},{"location":"linux/ubuntu-cli-cheatsheet/#text-editing-and-processing","title":"Text editing and processing","text":"<p>nano [file] : Opens a file in the Nano text editor. cat  : Displays the contents of a file. less  : Displays the paginated content of a file. head  : Shows the first few lines of a file. tail  : Shows the last few lines of a file. awk '{print}' [file] : Prints every line in a file. <p>Packages Package management (APT) sudo apt install  : Installs a package. sudo apt install -f \u2013reinstall  : Reinstalls a broken package. apt search  : Searches for APT packages. apt-cache policy  : Lists available package versions. sudo apt update : Updates package lists. sudo apt upgrade : Upgrades all upgradable packages. sudo apt remove  : Removes a package. sudo apt purge  : Removes a package and all its configuration files. Package management (Snap) snap find  : Search for Snap packages. sudo snap install  : Installs a Snap package. sudo snap remove  : Removes a Snap package. sudo snap refresh : Updates all installed Snap packages. snap list : Lists all installed Snap packages. snap info  : Displays information about a Snap package. Users &amp; groups User management w : Shows which users are logged in. sudo adduser  : Creates a new user. sudo deluser  : Deletes a user. sudo passwd  : Sets or changes the password for a user. su  : Switches user. sudo passwd -l  : Locks a user account. sudo passwd -u  : Unlocks a user password. Sudo change  : Sets user password expiration date. Group management id [username] : Displays user and group IDs. groups [username] : Shows the groups a user belongs to. sudo addgroup  : Creates a new group. sudo delgroup  : Deletes a group. <p>Networking Networking ip addr show : Displays network interfaces and IP addresses. ip -s link : Shows network statistics. ss -l : Shows listening sockets. ping  : Pings a host and outputs results. Netplan configuration (read more at netplan.io) cat /etc/netplan/*.yaml : Displays the current Netplan configuration. sudo netplan try : Tests a new configuration for a set period of time. sudo netplan apply : Applies the current Netplan configuration. Firewall management sudo ufw status : Displays the status of the firewall. sudo ufw enable : Enables the firewall. sudo ufw disable : Disables the firewall. sudo ufw allow  : Allows traffic on a specific port or service. sudo ufw deny  : Denies traffic on a specific port or service. sudo ufw delete allow/deny  : Deletes an existing rule. SSH and remote access ssh user@host : Connects to a remote host via SSH. scp  user@host: : Securely copies files between hosts. Firewall management sudo ufw status : Displays the status of the firewall. sudo ufw enable : Enables the firewall. sudo ufw disable : Disables the firewall. sudo ufw allow  : Allows traffic on a specific port or service. sudo ufw deny  : Denies traffic on a specific port or service. sudo ufw delete allow/deny  : Deletes an existing rule. SSH and remote access ssh user@host : Connects to a remote host via SSH. scp  user@host: : Securely copies files between hosts. <p>LXD LXD is a modern, secure and powerful tool that provides a unified experience for running and managing containers or virtual machines. Visit https ://canonical.com/lxd for more information. lxd init : initializes LXD before first use Creating instances lxc init ubuntu:22.04  : Creates a lxc system container (without starting it). lxc launch ubuntu:24.04  : Creates and starts a lxc system container. lxc launch ubuntu:22.04  --vm : Creates and starts a virtual machine. Managing instances lxc list : Lists instances. lxc info  : Shows status information about an instance. lxc start  : Starts an instance. lxc stop  [--force] : Stops an instance. lxc delete  [--force|--interactive] : Deletes an instance. Accessing instances lxc exec  --  : Runs a command inside an instance. lxc exec  -- bash : Gets shell access to an instance (if bash is installed). lxc console  [flags] : Gets console access to an instance. lxc file pull /  : Pulls a file from an instance. lxc file pull  / : Pushes a file to an instance. Using projects lxc project create  [--config ] : Creates a project. lxc project set   : Configures a project. lxc project switch  : Switches to a project. <p>Ubuntu Pro Ubuntu Pro delivers 10 years of expanded security coverage on top of Ubuntu\u2019s Long Term Support (LTS) commitment in addition to management and compliance tooling. Visit https://ubuntu.com/pro to register for free on up to five machines. Activating Ubuntu Pro sudo pro attach  : Attaches your machine to Ubuntu Pro using a specific token. This token is provided when you subscribe to Ubuntu Pro. Managing services sudo pro status : Displays the status of all Ubuntu Pro services. sudo pro enable  : Enables a specific Ubuntu Pro service, like ESM, FIPS, or Livepatch. sudo pro disable  : Disables a specific Ubuntu Pro service. Extended Security Maintenance (ESM) sudo pro enable esm-infra : Activates Extended Security Maintenance for infrastructure packages, providing security updates beyond the standard release cycle. sudo pro enable esm-apps : Activates ESM for applications, extending security coverage for specific applications. Livepatch service sudo pro enable livepatch : Enables the Livepatch service, which applies critical kernel patches without rebooting. FIPS mode sudo pro enable fips : Enables FIPS (Federal Information Processing Standards) mode, enforcing strict cryptographic standards and practices. Updating configuration sudo pro refresh : Refreshes the Ubuntu Pro state to ensure the latest configuration and services are in place. Detaching Ubuntu Pro sudo pro detach : Detaches the machine from Ubuntu Pro, disabling all services. <p>Source</p>","boost":1},{"location":"math/","title":"Math - Index","text":"<ul> <li> <p>Number Systems</p> <ul> <li>Binary Numbers</li> </ul> </li> </ul>","boost":1},{"location":"math/numbersystems/","title":"Number Systems","text":"<ul> <li>Binary Numbers</li> </ul>","boost":1},{"location":"math/numbersystems/binarynumbers/","title":"Binary Numbers","text":"<p>TOC Decimal vs Binary Binary counting Zero padding Why &amp; where Discussion Provided by: Edvancium</p> <p>The binary numeral system or base-2 numeral system is a way of writing numbers using only two digits, 0 and 1. Each digit is referred to as a bit (binary digit). These two digits are enough to represent any number. How is it possible? Let's find out.</p>","boost":1},{"location":"math/numbersystems/binarynumbers/#decimal-vs-binary","title":"Decimal vs Binary","text":"<p>In everyday life we use the decimal number system, or, simply put, we have 10 digits (0, 1, 2, 3, 4, 5, 6, 7, 8, 9). We don't think about it, but every number is represented as 1 \\(\\cdot\\) one of the digits + 10 \\(\\cdot\\) one of the digits + 100 \\(\\cdot\\) one of the digits etc. (that is, every power of 10 multiplied by some digit).</p> <p>Let's look at a number in the decimal system, for example, 4251. It is:</p> <p>\\(4 \\cdot 10^3 + 2 \\cdot 10^2 + 5 \\cdot 10^1 + 1 \\cdot 10^0\\)</p> <p>So when we read this number, we just look at each digit starting from the last and multiply each digit by its corresponding power of 10: the rightmost is always 1, then goes 10, 100, 1000, and so on.</p> <p>In the binary number system, we do exactly the same, except the base is 2, not 10. Let's look at a number in the binary system, for example, 1011.</p> <p>\\(1 \\cdot 2^3 + 0 \\cdot 2^2 + 1 \\cdot 2^1 + 1 \\cdot 2^0\\)</p>","boost":1},{"location":"math/numbersystems/binarynumbers/#binary-counting","title":"Binary counting","text":"<p>In the decimal numerical system, we have exactly 10 digits (from 0 to 9) to represent any number. And you know how to count in decimal: 0, 1, 2, ..., 9, 10, 11, ..., 19, 20, and so on.</p> <p>But how to count in the binary system? The table below shows it.</p> <p>Decimal</p> <p>Binary</p> <p>Powers of two</p> <p>0 0</p> <p>0 0</p> <p>0 \u22c5 2 0 0\u22c52  0</p> <p>1 1</p> <p>1 1</p> <p>1 \u22c5 2 0 1\u22c52  0</p> <p>2 2</p> <p>10 10</p> <p>1 \u22c5 2 1 + 0 \u22c5 2 0 1\u22c52  1  +0\u22c52  0</p> <p>3 3</p> <p>11 11</p> <p>1 \u22c5 2 1 + 1 \u22c5 2 0 1\u22c52  1  +1\u22c52  0</p> <p>4 4</p> <p>100 100</p> <p>1 \u22c5 2 2 + 0 \u22c5 2 1 + 0 \u22c5 2 0 1\u22c52  2  +0\u22c52  1  +0\u22c52  0</p> <p>5 5</p> <p>101 101</p> <p>1 \u22c5 2 2 + 0 \u22c5 2 1 + 1 \u22c5 2 0 1\u22c52  2  +0\u22c52  1  +1\u22c52  0</p> <p>6 6</p> <p>110 110</p> <p>1 \u22c5 2 2 + 1 \u22c5 2 1 + 0 \u22c5 2 0 1\u22c52  2  +1\u22c52  1  +0\u22c52  0</p> <p>7 7</p> <p>111 111</p> <p>1 \u22c5 2 2 + 1 \u22c5 2 1 + 1 \u22c5 2 0 1\u22c52  2  +1\u22c52  1  +1\u22c52  0</p> <p>8 8</p> <p>1000 1000</p> <p>1 \u22c5 2 3 + 0 \u22c5 2 2 + 0 \u22c5 2 1 + 0 \u22c5 2 0 1\u22c52  3  +0\u22c52  2  +0\u22c52  1  +0\u22c52  0</p> <p>To understand why 5 equals to 101 in binary format, let's write the number in powers of two:  1 \u22c5 2 2 + 0 \u22c5 2 1 + 1 \u22c5 2 0 1\u22c52  2  +0\u22c52  1  +1\u22c52  0</p> <p>. Look at the coefficients closely, they exactly match the binary representation: 101.</p> <p>As you can see, we start from 0 as before, then comes 1, and then 10. So, binary counting goes like this: when a digit reaches 1, the next number resets this digit to 0 and causes the digit to the left to raise. After some practice, it should become more clear.</p> <p>Zero padding</p> <p>Occasionally you will need to work with binary numbers of a fixed length. To achieve this, you can add insignificant zeros to any binary number on the left side, for example, 11 \u2192 0011, 101 \u2192 0101. This operation does not change the number but allows you to format them.</p> <p>You might come across the following formats:</p> <p>triads: 000, 001, 010, and so on;</p> <p>tetrads: 0110, 0111, and so on;</p> <p>8-digit numbers: 00000000, 01010101, and so on.</p> <p>Why &amp; where</p> <p>Almost all modern digital devices use the binary number system. The reason for this lies in the hardware. Computers started using the electronic tubes or relays and then transistors, all of which could be used to represent two states and quickly change from one to the other.</p> <p>Even the computer memory is binary: we either have something in the memory cell or not. It is conventional to group information in 8-digit binary numbers, where each 8-digit number is referred to as a byte. An 8-digit binary number may represent each of 256 possible values from 0 to 255, and can therefore be used for storing a wide variety of data. Such a way of storing information is called the binary code and is used almost everywhere.</p> <p>A good example of a binary code, an English text is usually encoded with ASCII (American Standard Code for Information Interchange) code, where each character in the text string was originally represented by a 7-digit binary number (lowercase a is 1100001, and so on\u2026). Later, ASCII was modified and now it uses 8 bits.</p> <p>Colors can also be encoded that way. The RGB (stands for Red, Green, Blue) color encoding system stores 3 binary values, 1 binary number for each color, representing the saturation of red, green, and blue color components respectively. The (11111111, 00000000, 00000000) color, for example, is pure red, with no shade of green or blue.</p> <p>In fact, everything can be (and is) encoded using the binary code.</p>","boost":1},{"location":"programming/","title":"Programming - Index","text":"<ul> <li> <p>Arrays</p> <ul> <li>One-Dimensional Arrays</li> <li>Two-Dimensional Arrays</li> <li>Initializing an Array with Random Unique Values</li> <li>Key Array Skills</li> </ul> </li> <li> <p>Conditionals and Loops</p> <ul> <li>Conditionals</li> <li>Boolean</li> <li>Logical Operators</li> <li>Relational Operators</li> <li>Basic Truth Tables Using Boolean Values Of True and False</li> <li>The getYorN() Method</li> <li>Loops - Three Types of Loops - The Do-While Loop, The While Loop, And The For Loop</li> <li>Counting Pre-Test Loop (While Loop) And Counting Post-Test Loop (Do-While Loop)</li> <li>For-Loop (Pre-Test Loop)</li> <li>While-Loop (Pre-Test Loop)</li> <li>Do-While Loop (Post-Test Loop)</li> <li>Game Loop</li> <li>Input While-Loop (Pre-Test Loop) With A Sentinel Value And A Priming Read</li> <li>Standard Input-Sentinel Loop</li> <li>wantsToContinue Loop</li> <li>Nested Loops</li> <li>While Loop General Format In Pseudocode</li> <li>While-Loop Example</li> <li>Which Loop To Use</li> <li>Loops Terminology</li> </ul> </li> <li> <p>Input Validation</p> <ul> <li>getValidNumber() Template Input Validation</li> <li>isInvalid() Template Input Validation</li> <li>One-Function Input Validation Model</li> <li>Two-function Input Validation Model</li> <li>Validating String Data</li> <li>Examples of Common String Library Functions</li> <li>Common Input Values To Test For</li> </ul> </li> <li> <p>Menus</p> <ul> <li>Practice Menu</li> </ul> </li> <li> <p>Methods</p> <ul> <li>The getString() Method</li> <li>The getInteger() Method</li> <li>The getDouble() Method</li> <li>The getYorN() Method</li> <li>The closeScanner() Method</li> <li>The getRandomNumber() Method</li> <li>Generalized Input Functions</li> <li>Methods Terminology</li> </ul> </li> <li> <p>Obejct Oriented Programming</p> <ul> <li>Object-Oriented Programming</li> <li>Object-Oriented Programming Terminology</li> <li>Object-Oriented Programming Review Questions</li> </ul> </li> <li> <p>Resources</p> <ul> <li>Java<ul> <li>Java Programming Resources</li> <li>Installing The Java Development Kit JDK</li> <li>Glossary</li> </ul> </li> <li>Eclipse IDE<ul> <li>Eclipse IDE: How To Find Matching Brackets and Missing Brackets</li> </ul> </li> <li>Writing<ul> <li>Di\u00e1taxis: A systematic approach to technical documentation authoring</li> </ul> </li> </ul> </li> <li> <p>Ternary</p> <ul> <li>Enhanced For Loops</li> <li>Enhanced If Statements</li> </ul> </li> </ul>","boost":1},{"location":"programming/csc205-activity08-module09-searching/","title":"CSC205 Interpolation Search","text":"","boost":1},{"location":"programming/csc205-activity08-module09-searching/#module-9-activity-8-searching","title":"Module 9 - Activity 8 - Searching","text":"","boost":1},{"location":"programming/csc205-activity08-module09-searching/#given-assignment","title":"Given Assignment","text":"<ol> <li> <p>Add an interpolation search method based on the binary search method to our Searching class.</p> <ul> <li>The Searching class can be found in the example code for this module on GitHub at: https://github.com/wadehuber/csc205codeexamples/tree/master/csc205videoexamples/src/activities/activity8searching</li> </ul> <p>Note</p> <p>The csc205codeexamples is a private GitHub repository. You will need to contact Wade Huber to be added to the GitHub csc205codeexamples repository for access. The starter code from the GitHub csc205codeexamples repository has been included in this document. See the table of contents for the location of the starter code in this document.</p> <ul> <li>Interpolation search is similar to binary search, except it tries to begin the search nearer to the location of the target element. Instead of using the middle value of the sorted array, interpolation search estimates the target's location relative to the first &amp; last values in the array. The implementation is the same as binary search except that you should calculate the mid value as:</li> </ul> <pre><code>mid = min + ((max - min) * (target - arr[min])) / (arr[max] - arr[min])\n</code></pre> <ul> <li> <p>Note that Interpolation Search will only work with numeric types!</p> </li> <li> <p>Your interpolation search method should work on an array of integers.</p> </li> <li> <p>It is also possible that the calculation above will return results outside the bounds of the array, so after you calculate it you will need to ensure that it is a valid array index.</p> </li> </ul> </li> <li> <p>Write a driver to test your code or use the provided driver at the link above.</p> </li> </ol>","boost":1},{"location":"programming/csc205-activity08-module09-searching/#starter-code-from-github","title":"Starter Code From GitHub","text":"<p>https://github.com/wadehuber/csc205codeexamples/tree/master/csc205videoexamples/src/activities/activity8searching</p> <p>Note</p> <p>The csc205codeexamples is a private GitHub repository. You will need to contact Wade Huber to be added to the GitHub csc205codeexamples repository for access. The starter code from the GitHub csc205codeexamples repository has been included in this document. See the table of contents for the location of the starter code in this document.</p>","boost":1},{"location":"programming/csc205-activity08-module09-searching/#activity8java-starter-code","title":"Activity8.java - Starter Code","text":"Activity8.java Starter Code<pre><code>package activities.activity8searching;\n\nimport java.util.Random;\n\npublic class Activity8 {\n    public static void main(String[] args) {\n        Integer result;\n        Random rand = new Random();\n\n        Integer a[] = new Integer[5000];\n        Integer b[] = new Integer[5000];\n\n        // Uniform distribution\n        for (int ii=0; ii&lt; a.length; ii++) {\n            a[ii] = ii * 2;\n        }   \n\n        // Non-uniform distribution\n        b[0] = 1;\n        for (int ii=1; ii&lt; b.length; ii++) {\n            b[ii] = (b[ii-1] + rand.nextInt(20)) + ii * ii * 2;\n        }   \n\n\n        int[] testValues = {-1, 1, 4, 41, 440, 8800, 9990, 1000000};\n\n        System.out.println(\"UNIFORM DISTRIBUTION\");\n        System.out.println(\"Binary Search:\");   \n        for (int x : testValues) {\n            System.out.print(\"  Searching for (\" + x + \"): \");\n            result = Searching.binarySearch(a, x);\n            System.out.print(\" binary: \" + result + \" in \" + Searching.getCounter());\n            result = Searching.interpolationSearch(a, x);\n            System.out.println(\"\\t\\t interpolation: \" + result + \" in \" + Searching.getCounter());\n        }\n\n        System.out.println();\n        System.out.println(\"NON-UNIFORM DISTRIBUTION\");\n        for (int x : testValues) {\n            System.out.print(\"  Searching for (\" + x + \"): \");\n            result = Searching.binarySearch(b, x);\n            System.out.print(\"\\tbinary: \" + result + \" in \" + Searching.getCounter());\n            result = Searching.interpolationSearch(b, x);\n            System.out.println(\"\\t\\t interpolation: \" + result + \" in \" + Searching.getCounter());\n        }\n\n    }\n}\n</code></pre>","boost":1},{"location":"programming/csc205-activity08-module09-searching/#searchingjava-starter-code","title":"Searching.java - Starter Code","text":"Searching.java Starter Code<pre><code>package activities.activity8searching;\n\npublic class Searching {\n\n    private static int counter = 0;\n\n    public static int getCounter() {\n        return counter;\n    }\n\n    public static void setCounter(int counter) {\n        Searching.counter = counter;\n    }\n\n    private static void resetCounter() {\n        setCounter(0);\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; T linearSearch(T[] data, T target) {\n        return (linearSearch(data, 0, data.length - 1, target));\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; T linearSearch(T[] data, int min, int max, T target) {\n        T ret = null;\n        int current = min;\n\n        resetCounter();\n\n        while (current &lt;= max) {\n            counter++;\n            if (data[current].compareTo(target) == 0) {\n                ret = data[current];\n                break;\n            }\n            current++;\n        }\n        return ret;\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; T binarySearch(T[] data, T target) {\n        resetCounter();\n        return (binarySearch(data, 0, data.length - 1, target));\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; T binarySearch(T[] data, int min, int max, T target) {\n        T ret = null;\n\n        if (min &gt; max) {\n            return null;\n        }\n\n        int mid = min + ((max - min) / 2);\n        counter++;\n        int comparisonResult = data[mid].compareTo(target);\n        if (comparisonResult == 0) {\n            ret = data[mid];\n        } else if (comparisonResult &gt; 0) {\n            ret = binarySearch(data, min, mid - 1, target);\n        } else {\n            ret = binarySearch(data, mid + 1, max, target);\n        }\n        return ret;\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; T interpolationSearch(T[] data, T target) {\n        counter = 0;\n        return null;\n    }\n}\n</code></pre>","boost":1},{"location":"programming/csc205-activity08-module09-searching/#solution","title":"Solution","text":"<p>Run the soultion in the online playground at OnlineGDB: https://onlinegdb.com/TnQxvysMfj</p>","boost":1},{"location":"programming/csc205-activity08-module09-searching/#activity8java-solution","title":"Activity8.java - Solution","text":"Activity8.java - Solution<pre><code>// Program: Activity 8 - Module 9 - Searching\n// Author: Steve Ellermann\n// Class: CSC205\n// Description: Driver for binary and interpolation search methods.\npackage activities.activity8;\n\nimport java.util.Random;\n\npublic class Activity8 {\n    public static void main(String[] args) {\n        Integer result;\n        Random rand = new Random();\n\n        Integer a[] = new Integer[5000];\n        Integer b[] = new Integer[5000];\n\n        // Uniform distribution\n        for (int ii = 0; ii &lt; a.length; ii++) {\n            a[ii] = ii * 2;\n        }\n\n        // Non-uniform distribution\n        b[0] = 1;\n        for (int ii = 1; ii &lt; b.length; ii++) {\n            b[ii] = (b[ii - 1] + rand.nextInt(20)) + ii * ii * 2;\n        }\n\n        int[] testValues = { -1, 1, 4, 41, 440, 8800, 9990, 1000000 };\n\n        System.out.println(\"UNIFORM DISTRIBUTION\");\n        System.out.println(\"Binary Search:\");\n        for (int x : testValues) {\n            System.out.print(\"  Searching for (\" + x + \"): \");\n            result = Searching.binarySearch(a, x);\n            System.out.print(\"\\tbinary: \" + result + \" in \" + Searching.getCounter() + \" \");\n            result = Searching.interpolationSearch(a, x);\n            System.out.println(\"\\t\\t interpolation: \" + result + \" in \" + Searching.getCounter());\n        }\n\n        System.out.println();\n        System.out.println(\"NON-UNIFORM DISTRIBUTION\");\n        for (int x : testValues) {\n            System.out.print(\"  Searching for (\" + x + \"): \");\n            result = Searching.binarySearch(b, x);\n            System.out.print(\"\\tbinary: \" + result + \" in \" + Searching.getCounter() + \" \");\n            result = Searching.interpolationSearch(b, x);\n            System.out.println(\"\\t\\t interpolation: \" + result + \" in \" + Searching.getCounter());\n        }\n    }\n}\n</code></pre>","boost":1},{"location":"programming/csc205-activity08-module09-searching/#searchingjava-solution","title":"Searching.java - Solution","text":"Searching.java - Solution<pre><code>// Program: Activity 8 - Module 9 - Searching\n// Author: Steve Ellermann\n// Class: CSC205\n// Description: Linear (recursive), Binary (recursive), and \n// Interpolation (recursive) search methods.\npackage activities.activity8;\n\npublic class Searching {\n\n    private static int counter = 0;\n\n    // getCounter\n    public static int getCounter() {\n        return counter;\n    }\n\n    // setCounter\n    public static void setCounter(int counter) {\n        Searching.counter = counter;\n    }\n\n    // resetCounter\n    private static void resetCounter() {\n        setCounter(0);\n    }\n\n    // linearSearch\n    public static &lt;T extends Comparable&lt;T&gt;&gt; T linearSearch(T[] data, T target) {\n        return (linearSearch(data, 0, data.length - 1, target));\n    }\n\n    // linearSearch helper method\n    public static &lt;T extends Comparable&lt;T&gt;&gt; T linearSearch(T[] data, int min, int max, T target) {\n        T ret = null;\n        int current = min;\n\n        resetCounter();\n\n        while (current &lt;= max) {\n            counter++;\n            if (data[current].compareTo(target) == 0) {\n                ret = data[current];\n                break;\n            }\n            current++;\n        }\n        return ret;\n    }\n\n    // binarySearch\n    public static &lt;T extends Comparable&lt;T&gt;&gt; T binarySearch(T[] data, T target) {\n        resetCounter();\n        return (binarySearch(data, 0, data.length - 1, target));\n    }\n\n    // binarySearch helper method\n    public static &lt;T extends Comparable&lt;T&gt;&gt; T binarySearch(T[] data, int min, int max, T target) {\n        T ret = null;\n\n        if (min &gt; max) {\n            return null;\n        }\n\n        int mid = min + ((max - min) / 2);\n        counter++;\n        int comparisonResult = data[mid].compareTo(target);\n        if (comparisonResult == 0) {\n            ret = data[mid];\n        } else if (comparisonResult &gt; 0) {\n            ret = binarySearch(data, min, mid - 1, target);\n        } else {\n            ret = binarySearch(data, mid + 1, max, target);\n        }\n        return ret;\n    }\n\n    // interpolationSearch - Works with integers. Works when the array is sorted.\n    public static &lt;T extends Comparable&lt;T&gt;&gt; Integer interpolationSearch(Integer[] data, int target) {\n        resetCounter();\n        return (interpolationSearch(data, 0, data.length - 1, target));\n    }\n\n    // interpolationSearch helper method - Works with integers. Works when the array is sorted.\n    public static &lt;T extends Comparable&lt;T&gt;&gt; Integer interpolationSearch(Integer[] data, int min,\n        int max, int target) {\n\n        int ret = -1;\n\n        if (min &gt; max || (data[min] &gt; target) || (target &gt; data[max])) {\n            return -1;\n        }\n\n        int mid = (min + ((max - min) * (target - data[min])) / (data[max] - data[min]));\n\n        counter++;\n\n        int comparisonResult = data[mid].compareTo(target);\n\n        if (comparisonResult == 0) {\n            ret = data[mid];\n        } else if (comparisonResult &gt; 0) {\n            ret = interpolationSearch(data, min, (mid - 1), target);\n        } else {\n            if (data.length &gt; counter) { // prevents stack overflow\n                ret = interpolationSearch(data, (mid + 1), max, target);\n            }\n        }\n\n        return ret;\n    }\n}\n</code></pre>","boost":1},{"location":"programming/csc205-activity08-module09-searching/#output-solution","title":"Output - Solution","text":"Output - Solution<pre><code>UNIFORM DISTRIBUTION\nBinary Search:\n  Searching for (-1):   binary: null in 12       interpolation: -1 in 0\n  Searching for (1):    binary: null in 12       interpolation: -1 in 1\n  Searching for (4):    binary: 4 in 12          interpolation: 4 in 1\n  Searching for (41):   binary: null in 12       interpolation: -1 in 1\n  Searching for (440):  binary: 440 in 11        interpolation: 440 in 1\n  Searching for (8800):     binary: 8800 in 11       interpolation: 8800 in 1\n  Searching for (9990):     binary: 9990 in 10       interpolation: 9990 in 1\n  Searching for (1000000):  binary: null in 13       interpolation: -1 in 0\n\nNON-UNIFORM DISTRIBUTION\n  Searching for (-1):   binary: null in 12       interpolation: -1 in 0\n  Searching for (1):    binary: 1 in 12          interpolation: 1 in 1\n  Searching for (4):    binary: null in 12       interpolation: -1 in 1\n  Searching for (41):   binary: null in 12       interpolation: -1 in 3\n  Searching for (440):  binary: null in 13       interpolation: -1 in 8\n  Searching for (8800):     binary: null in 13       interpolation: -1 in 23\n  Searching for (9990):     binary: null in 12       interpolation: -1 in 24\n  Searching for (1000000):  binary: null in 12       interpolation: -1 in 5000 \n</code></pre>","boost":1},{"location":"programming/factorial/","title":"Factorial Interview Question","text":"","boost":1},{"location":"programming/factorial/#problem-statement","title":"Problem Statement","text":"CSC110AB Factorial (Loops) - Interview Question - CGCC<pre><code>Write a program in pseudocode that prompts the user to enter a number. \nCalculate factorial for the given number and display the result to the user. \nKeep prompting the user for a number until the user enters a `0`.\n</code></pre> Example Output Provided<pre><code>Enter a number between 1 and 10 (Enter 0 to exit): 4\n24\n\nEnter a number between 1 and 10  (Enter 0 to exit): 7 \n5040\n\nEnter a number between 1 and 10  (Enter 0 to exit): 23\n\nThe number you entered was not between 1 and 10. \nRe-enter a number between 1 and 10 (Enter 0 to exit): 0\nGoodbye!\n</code></pre>","boost":1},{"location":"programming/factorial/#some-background-information","title":"Some Background Information","text":"<p>This question is for a CSC110<sup>1</sup> level class. CSC110<sup>1</sup>  is the first required computer programming class for students majoring computer science in the Maricopa County Community College District System. The programming language used in this class is Java.</p> <p>The student would be into Chapter 4 (Conditionals and Loops) of the textbook Java Foundations, Fifth Edition based on the current syllabus. This chapter is taught over two weeks, as opposed to one week, as the concepts are one of the first topics in the course that many students whom are new to programming struggle with. This corresponds to Week 4 and Week 5 of a sixteen week course.</p> <p>The minimum mathematics requirements for this course is MAT095<sup>2</sup>: Introductory Algebra/College Algebra Prep.</p> <p>More information about CSC110<sup>1</sup> and MAT095<sup>2</sup> are towards the end of this document.</p>","boost":1},{"location":"programming/factorial/#what-is-factorial","title":"What is Factorial","text":"","boost":1},{"location":"programming/factorial/#factorial-briefly-explained","title":"Factorial Briefly Explained","text":"<p>Since the topic of factorial is not usually covered in an IMAT095<sup>2</sup>: Introductory Algebra/College Algebra Prep. class, lets review it briefly.</p> <p>In mathematics, the factorial of a non-negative integer <code>n</code>, denoted by <code>n!</code>,  is the product of all positive integers less than or equal to <code>n</code>. </p> <p>For example: <code>4! = 4 * 3 * 2 * 1 = 24</code>.</p> <p>By convention the value of <code>0!</code> is <code>1</code>.</p> <p>We can find more basic information at:</p> <ul> <li>Math Is Fun</li> <li>Wikipedia</li> </ul>","boost":1},{"location":"programming/factorial/#breaking-the-problem-down","title":"Breaking The Problem Down","text":"<p>Let break this problem down into smaller pieces.</p> CSC110AB Factorial (Loops) - Interview Question - CGCC<pre><code>Write a program in pseudocode that prompts the user to enter a number. \nCalculate factorial for the given number and display the result to the user. \nKeep prompting the user for a number until the user enters a `0`.\n</code></pre>","boost":1},{"location":"programming/factorial/#based-on-the-problem-statement-we-know-that-we-need-to-do-the-following","title":"Based on the problem statement, we know that we need to do the following","text":"<ul> <li>We need to display a message to the user and have the user enter a number.</li> <li>Calculate the factorial of the valid number the user entered, or exit the program if the user entered a <code>0</code>.</li> <li>Display the result of the factorial calculation to the user.<ul> <li>The displayed result will just be the calculation.</li> </ul> </li> <li>Prompt the user for another number until the user enters <code>0</code></li> <li>Quit the program if the user enters a <code>0</code></li> </ul> <p>There is more...</p> <p>Some example output from the program was given to us...</p> Example Output<pre><code>Enter a number between 1 and 10 (Enter 0 to exit): 4\n24\n\nEnter a number between 1 and 10  (Enter 0 to exit): 7 \n5040\n\nEnter a number between 1 and 10  (Enter 0 to exit): 23\n\nThe number you entered was not between 1 and 10. \nRe-enter a number between 1 and 10 (Enter 0 to exit): 0\nGoodbye!\n</code></pre>","boost":1},{"location":"programming/factorial/#based-on-the-example-output-given-to-us","title":"Based on the example output given to us","text":"<ul> <li>We need to verify the user's number to be in a range.</li> <li>The range is between <code>1</code> and <code>10</code>.</li> <li>We need to verify the user's number is or is not <code>0</code>.</li> <li>We are going to infer that the range is inclusive of <code>1</code> and <code>10</code>.</li> <li>We are going to infer we are using integers.<ul> <li>The largest factorial will be <code>10!</code> and the result of <code>10!</code> is <code>362880</code>.</li> <li>The largest positive integer of type <code>int</code> in java is <code>2147483647</code>.</li> <li>If we increase the range greater than <code>16</code>, then we will need to change the data type to something that will hold a larger number.<ul> <li>In that case we can use the data type in java such as <code>double</code> up to a range maximum of <code>20</code></li> <li>The <code>BigInteger</code> class in Java is another option as it is designed to deal with really large numbers.</li> </ul> </li> </ul> </li> <li>We need to display an error message to the user if the user enters a number outside of the range of 1 and 10 inclusive of 1 and 10.<ul> <li>The wording of the error message is <code>The number you entered was not between 1 and 10.</code></li> </ul> </li> <li>We need to prompt the user with a message, after an error message, to enter a number or enter 0 to quit.</li> <li>The wording of this user prompt after the error message is different than the original starting prompt.<ul> <li>The wording is: <code>Re-enter a number between 1 and 10 (Enter 0 to exit):</code></li> </ul> </li> <li>The program must exit if the user enters <code>0</code> </li> <li>We need to display an exit message when the user quits the game.<ul> <li>The wording is: <code>Goodbye!</code></li> </ul> </li> </ul>","boost":1},{"location":"programming/factorial/#factorial-using-loops","title":"Factorial Using Loops","text":"<p>Below (in the tabs) is both the java code from the in person mini tutoring session as well as pseudocode written afterwards based on that in person mini tutoring session.</p> <p>This was a whiteboard session and code was not able to be compiled and tested. All verbal discussion during the mini session has been omited. Let's see what happens when we run the code. Try the in person mini tutoring session FactorialUsingLoops.java Java program in the Online Playground IDE</p> PseudocodeJava Factorial (Loops) - Pesudeocode<pre><code>// Factorial (Loops) - Pesudeocode - In Person Session\n// Date: 2024-06-06\n// Author: Steve Ellermann\n// Note: This would result in incorrect output, however the student would figure out \n// after testing it and come back with more questions or hopefully learned enough to \n// move forward on their own\nMain\n\n    Declare Integer factorial = 1\n    Declare Integer input = 0\n\n    Scanner scan = new Scanner\n\n    Display \"Enter a number between 1 and 10 (Enter 0 to exit): \"\n    input = scan\n\n    While (input != 0)  \n\n        If input &gt;= 1 AND input &lt;= 10\n\n                For Integer ii = factorial to input Step -1\n\n                    factorial = factorial * ii\n\n                End For\n\n            Display factorial\n\n            Display \"Enter a number between 1 and 10 (Enter 0 to exit): \"\n            input = scan  \n\n        Else\n\n            Display \"The number you entered was not between 1 and 10.\"\n            Display \"Re-enter a number between 1 and 10(Enter 0 to exit): \"\n            input = scan\n\n        End If\n\n    End While\n\n    Display \"Goodbye!\"\n\nEnd Main\n</code></pre> Factorial (Loops) - Java<pre><code>// Factorial (Loops) - Java- In Person Session\n// Date: 2024-06-06\n// Author: Steve Ellermann\n// Note: This would result in incorrect output, however the student would figure out \n// after testing it and come back with more questions or hopefully learned enough to \n// move forward on their own\n\nimport java.util.Scanner;\n\npublic class FactorialUsingLoops {\n\n    public static void main(String[] args) {\n\n        Scanner scan = new Scanner(System.in);\n\n        final int MIN = 1;\n        final int MAX = 10;\n        final int SENTINEL = 0;\n        int factorial = 1;\n        int input = 0;\n\n        System.out.print(\"Enter an integer between \" + MIN + \" and \" + MAX + \" inclusive \" + \"(Enter \" + SENTINEL + \" to exit): \");\n        input = scan.nextInt();\n\n        while (input != 0) {\n\n            if (input &gt;= MIN &amp;&amp; input &lt;= MAX) {\n\n                for (int ii = factorial; ii &lt;= input; ii--) {\n                    factorial *= ii;\n                }\n\n                System.out.println(\"\\n\" + input + \"! = \" + factorial);\n\n                System.out.print(\"\\nEnter an integer between \" + MIN + \" and \" + MAX + \" inclusive \" + \"(Enter \" + SENTINEL + \" to exit): \");\n                input = scan.nextInt();\n\n            } else {\n                System.out.println(\"\\nThe integer you entered was not between \" + MIN + \" and \" + MAX + \" inclusive.\");\n                System.out.print(\"Re-enter an integer between \" + MIN + \" and \" + MAX + \" inclusive \" + \"(Enter \" + SENTINEL + \" to exit): \");\n                input = scan.nextInt();\n            }\n\n        }\n\n        System.out.println(\"\\nGoodbye!\");\n\n    }\n\n}\n\n// Program Output\n// \n// Enter an integer between 1 and 10 inclusive (Enter 0 to exit): 4\n//\n// 4! = 0\n//\n// Enter an integer between 1 and 10 inclusive (Enter 0 to exit): 7\n//\n// 7! = 0\n// \n// Enter an integer between 1 and 10 inclusive (Enter 0 to exit): 23\n// \n// The integer you entered was not between 1 and 10 inclusive.\n// Re-enter an integer between 1 and 10 inclusive (Enter 0 to exit): 0\n// \n// Goodbye!\n// \n</code></pre> <p>Note</p> <ul> <li>Try the in person mini tutoring session FactorialUsingLoops.java Java program in the Online Playground IDE</li> </ul>","boost":1},{"location":"programming/factorial/#the-results-of-running-the-program-created-during-the-in-person-session","title":"The results of running the program created during the in person session","text":"Program Output<pre><code>Enter an integer between 1 and 10 inclusive (Enter 0 to exit): 4\n\n4! = 0\n\nEnter an integer between 1 and 10 inclusive (Enter 0 to exit): 7\n\n7! = 0\n\nEnter an integer between 1 and 10 inclusive (Enter 0 to exit): 23\n\nThe integer you entered was not between 1 and 10 inclusive.\nRe-enter an integer between 1 and 10 inclusive (Enter 0 to exit): 0\n\nGoodbye!\n</code></pre> <p>Not the results we were looking for</p> <ul> <li><code>4!</code> should be <code>24</code> not <code>0</code></li> <li><code>7!</code> should be  <code>5040</code> not <code>0</code></li> </ul> <p>What is working in our code</p> <ul> <li>The <code>while</code> loop with priming read seems to work.</li> <li>The <code>if</code> statement testing for the range 1 inclusive to 10 inclusive seems to work.</li> <li>The <code>if</code> statement displaying the correct error message upon an error seems to work.</li> <li>The <code>if</code> statement displaying the correct user prompt message upon an error seems to work.</li> <li>The <code>while</code> loop quits when the user enters a <code>0</code> seem to work.</li> <li>The exit message <code>Goodbye!</code> seems to work when the program exits.</li> <li>The formatting of the output of messages to the user appears correct.</li> </ul> <p>The Issues</p> <ul> <li>The for loop calculating the factorial has some errors.<ul> <li>We need to reset <code>factorial</code> to <code>1</code> after each calculation.</li> </ul> </li> <li>We need to close the <code>Scanner</code> object before we exit the program.</li> </ul>","boost":1},{"location":"programming/factorial/#lets-correct-the-issues","title":"Let's Correct The Issues","text":"Pseudocode - Factorial (Loops)Java - Factorial (Loops) Pseudocode - Factorial (Loops)<pre><code>// Factorial (Loops) - Pesudeocode\n// Date: 2024-06-06\n// Author: Steve Ellermann\n// Note: Corrected version\n\nImport Scanner\n\nMain\n\n    Declare Integer factorial = 1\n    Declare Integer input = 0\n\n    Scanner scan = new Scanner\n\n    Display \"Enter a number between 1 and 10 (Enter 0 to exit): \"\n    input = scan\n\n    While (input != 0)  \n\n        If input &gt;= 1 AND input &lt;= 10\n\n                For Integer ii = factorial to input Step -1\n\n                    factorial = factorial * ii\n\n                End For\n\n            Display factorial\n\n            factorial = 1\n\n            Display \"Enter a number between 1 and 10 (Enter 0 to exit): \"   \n            input = scan  \n\n        Else\n\n            Display \"The number you entered was not between 1 and 10.\"\n            Display \"Re-enter a number between 1 and 10(Enter 0 to exit): \"\n            input = scan\n\n        End If\n\n    End While\n\n    Close Scanner\n\n    Display \"Goodbye!\"\n\nEnd Main\n</code></pre> Java - Factorial (Loops)<pre><code>// Factorial (Loops) - Java- In Person Session\n// Date: 2024-06-06\n// Author: Steve Ellermann\n// Note: Corrected version\n\nimport java.util.Scanner;\n\npublic class FactorialUsingLoops {\n\n    public static void main(String[] args) {\n\n        Scanner scan = new Scanner(System.in);\n\n        int factorial = 1;\n        int input = 0;\n\n        System.out.print(\"Enter a number between 1 and 10 (Enter 0 to exit): \");\n        input = scan.nextInt();\n\n        while (input != 0) {\n\n            if (input &gt;= 1 &amp;&amp; input &lt;= 10) {\n\n                for (int ii = factorial; ii &lt;= input; ii++) { // for loop - fixed - changed code\n                    factorial *= ii;\n                }\n\n                System.out.println(\"\\n\" + input + \"! = \" + factorial);\n\n                factorial = 1; // reset factorial to 1 - fixed - added code\n\n                System.out.print(\"\\nEnter a number between 1 and 10 (Enter 0 to exit): \");\n                input = scan.nextInt();\n            } else {\n                System.out.print(\"\\nThe number you entered was not between 1 and 10.\");\n                System.out.print(\"\\nRe-enter a number between 1 and 10 (Enter 0 to exit): \");\n                input = scan.nextInt();\n            }\n        }\n        scan.close(); // close the scanner object - fixed - added code\n        System.out.println(\"\\nGoodbye!\");\n    }\n\n}\n</code></pre> <p>Let's see what happens when we run corrected the code. Try the corrected FactorialUsingLoops.java Java program in the Online Playground IDE</p> <p>Note</p> <ul> <li>Try the corrected FactorialUsingLoops.java Java program in the Online Playground IDE</li> </ul>","boost":1},{"location":"programming/factorial/#the-results-of-running-the-corrected-program","title":"The results of running the corrected program","text":"Program Output<pre><code>Enter a number between 1 and 10 (Enter 0 to exit): 1\n\n1! = 1\n\nEnter a number between 1 and 10 (Enter 0 to exit): 2\n\n2! = 2\n\nEnter a number between 1 and 10 (Enter 0 to exit): 3\n\n3! = 6\n\nEnter a number between 1 and 10 (Enter 0 to exit): 4\n\n4! = 24\n\nEnter a number between 1 and 10 (Enter 0 to exit): 5\n\n5! = 120\n\nEnter a number between 1 and 10 (Enter 0 to exit): 6\n\n6! = 720\n\nEnter a number between 1 and 10 (Enter 0 to exit): 7\n\n7! = 5040\n\nEnter a number between 1 and 10 (Enter 0 to exit): 8\n\n8! = 40320\n\nEnter a number between 1 and 10 (Enter 0 to exit): 9\n\n9! = 362880\n\nEnter a number between 1 and 10 (Enter 0 to exit): 10\n\n10! = 3628800\n\nEnter a number between 1 and 10 (Enter 0 to exit): 11\n\nThe number you entered was not between 1 and 10.\nRe-enter a number between 1 and 10 (Enter 0 to exit): 0\n\nGoodbye!\n</code></pre> <p>Verify your output with a calculator<sup>3</sup>. After verifying it with a TI-84 CE Calculator, it looks like we have corrected the issues.</p> <ol> <li> <p>CSC110</p> <p>CSC110 is the first required computer programming class for students majoring computer science at CGCC. The programming language used in this class is Java.</p> <p>The CSC110 college catalogue course description reads:</p> CSC110: Introduction to Computer Science (Java) \u2013 3 credits<pre><code>Concepts of problem-solving, structured and object-oriented programming in Java, fundamental \nalgorithms and techniques and computer system concepts. Social and ethical responsibilities. \nIntended for Computer Science and Computer Systems Engineering majors. Prerequisites: A grade \nof C or better in MAT095, or MAT096, or MAT114, or MAT115, or MAT12+, or an appropriate District \nplacement for MAT15+ or higher, or permission of Instructor or Department/Division Chair.\n</code></pre> <p>CSC110: Introduction to Computer Science (Java) \u2013 3 credits</p> <p>Concepts of problem-solving, structured and object-oriented programming in Java, fundamental  algorithms and techniques and computer system concepts. Social and ethical responsibilities.  Intended for Computer Science and Computer Systems Engineering majors. Prerequisites: A grade  of C or better in MAT095, or MAT096, or MAT114, or MAT115, or MAT12+, or an appropriate District  placement for MAT15+ or higher, or permission of Instructor or Department/Division Chair.</p> <ul> <li>Source*</li> </ul> <p>Based on this description, no prior programming experience is expected and you are expected to have a working knowledge of Introductory Algebra/College Algebra Prep (MAT095). \u21a9\u21a9\u21a9</p> </li> <li> <p>MAT095</p> <p>The MAT095 college catalogue course description reads:</p> <p>MAT095: Introductory Algebra/College Algebra Prep - 5 credits</p> <p>Emphasis on meanings related to variable, equality, inequality, equivalence. The use of additive and multiplicative reasoning in solving linear equations and inequalities in one variable. Validation of solution(s) through a reasonable mathematical defense. Transfer and apply knowledge through a process of sense making and reasonableness in mathematical problems and practical application situations. Recognize patterns and organize data to represent situations where output is related to input. Understand the concept of function and be able to represent functions in multiple ways, including tables, algebraic rules, graphs and contextual situations, and make connections among these representations. Read, represent, and interpret linear function relationships numerically, analytically, graphically and verbally and connect the different representations. Model and solve real world problems involving constant rate of change.</p> <ul> <li>Source</li> </ul> <p>\u21a9\u21a9\u21a9</p> </li> <li> <p>Verify your output using a TI-84 Plus CE Calculator</p> <p>To perform <code>5</code> factorial using a TI-84 Plus CE calculator...</p> <ol> <li>Press the <code>5</code> key on the calculator keyboard.</li> <li>Press the <code>math</code> button.</li> <li>Press the right arrow  key on the calculator keyboard 3 times so that <code>PROB</code> is highlighted in the top menu selection of the calculator screen.</li> <li>Press the <code>4</code> key then the <code>enter</code> key or press the down arrow  key 3 time so that <code>4:!</code> is highlighted then press the <code>enter</code> key on the calculator keyboard.</li> <li>Press the <code>enter</code> key on the calculator keyboard again.</li> <li>Answer: <code>5! = 120</code></li> </ol> <p>\u21a9</p> </li> </ol>","boost":1},{"location":"programming/arrays/","title":"Arrays - Index","text":"<p>One-Dimensional Arrays</p> <p>Two-Dimensional Arrays</p> <p>Initializing an Array with Random Unique Values</p> <p>Key Array Skills</p>","boost":1},{"location":"programming/arrays/initializing-array-with-random-unique-values/","title":"Initializing an Array with Random Unique Values","text":"<p>How to initialize an array with unique random values should be already clear to you the program should use the standard input validation model to validate the input BEFORE the random number is added to the array. Study this code:</p> PseudocodeJava <pre><code>Main\n    Declare Global Constant Integer LOW = 10\n    Declare Global Constant Integer HIGH = 99\n\n    Declare Integer [][] theArray = New Integer [5][7]\n    initializeArrayWithUniqueRandomValues(theArray)\n\n    //Other code not shown\n\nEnd Main\n\nModule initializeArrayWithUniqueRandomValues(Integer [][] myArray)\n    Declare Integer row\n    Declare Integer column\n\n    For row = 0 to myArray.length - 1 Step 1\n        For column = 0 to myArray[row].length - 1 Step 1\n            myArray[row][column] = getValidNumber(myArray)\n        End For\n    End For\nEnd Module\n\nFunction Integer getValidNumber (Integer [][] myArray)\n    Declare Integer newValue\n\n    newValue = getRandomNumber(LOW, HIGH) //priming read!\n\n    // loop while the function isInvalid(\u2026) returns true\n    While isInvalid(myArray, newValue)\n        newValue = getRandomNumber(LOW, HIGH)\n    End While\n    Return newValue\nEnd Function\n\nFunction Boolean isInvalid (Integer [][] myArray, Integer valueToCheck)\n    Declare Integer row\n    Declare Integer column\n\n    For row = 0 to myArray.length \u2013 1 Step 1\n        For column = 0 to myArray[row].length \u2013 1 Step 1\n            If valueToCheck == myArray[row][column] Then\n                Return true //it exists so it is invalid\n        End For\n    End For\n    Return false //it was NOT found in the array\nEnd Function\n</code></pre> <pre><code>public class InitializingArrayWithUniqueRandomValues {\n\n    final static int LOW = 10;\n    final static int HIGH = 99;\n\n    public static void main(String[] args) {\n\n        int[][] theArray = new int[5][7];\n\n        initializeArrayWithUniqueRandomValues(theArray);\n\n        // Other code not shown\n    }\n\n    public static void initializeArrayWithUniqueRandomValues(int[][] myArray) {\n        int row;\n        int ccolumn;\n\n        for (row = 0; row &lt;= myArray.length - 1; row++) {\n            for (column = 0; column &lt;= myArray[row].length - 1; column++) {\n                myArray[row][column] = getValidNumber(myArray);\n            }\n        }\n    }\n\n    public static int getValidNumber(int[][] myArray) {\n        int newValue;\n\n        newValue = getRandomNumber(LOW, HIGH); // priming read!\n\n        // loop while the function isInvalid(\u2026) returns true\n        while (isInvalid(myArray, newValue)) {\n            newValue = getRandomNumber(LOW, HIGH);\n        }\n        return newValue;\n    }\n\n    public static int getRandomNumber(int low, int high) {\n        return (int) (Math.random() * ((high + 1) - low)) + low;\n    }\n\n    public static Boolean isInvalid(int[][] myArray, int valueToCheck) {\n        int row;\n        int column;\n\n        for (row = 0; row &lt;= myArray.length - 1; row++) {\n            for (column = 0; column &lt;= myArray[row].length - 1; column++) {\n                if (valueToCheck == myArray[row][column]) {\n                    return true; // it exists so it is invalid\n                }\n            }\n        }\n        return false; // it was NOT found in the array\n    }\n}\n</code></pre>","boost":1},{"location":"programming/arrays/key-array-skills/","title":"Key Array Skills","text":"<p>Being able to process arrays quickly is a key skill all software developers must have. You must know how to do all the following for both one and two-dimensional arrays:</p> <ul> <li>Initialize the array with values<ul> <li>With random numbers</li> <li>With input from the user</li> <li>Use Two-Function Input Validation to prevent duplicate values by searching the array and rejecting duplicate values</li> </ul> </li> <li>Print the array<ul> <li>One-Dim vertically</li> <li>One-Dim horizontally separated with spaces or commas</li> <li>Two-Dim as a rectangle of rows and columns</li> </ul> </li> <li>Sum the values in an array<ul> <li>Add up all the array values</li> </ul> </li> <li>Find the average value in the array<ul> <li>Get the sum of the array and divide by the number of elements</li> </ul> </li> <li>Find the highest value in the array<ul> <li>Set the high value to the first element</li> </ul> </li> <li>Find the lowest value in the array<ul> <li>Set the low value to the first element</li> </ul> </li> <li>Count the number of even and odd numbers in an array<ul> <li>Either create 2 functions or use one and subtract from the count of all</li> </ul> </li> <li>Search the array for a value<ul> <li>Does the value exist?</li> <li>How many times does the value exist?</li> </ul> </li> <li>Return the index value for a searched value<ul> <li>Return the first value found</li> </ul> </li> </ul> <p>The good news is all the above functions are similar and, once you learn to do one, the others will become much easier and you will be able to tackle more complicated and interesting problems.</p>","boost":1},{"location":"programming/arrays/one-dimensional-arrays/","title":"One-Dimensional Arrays","text":"<p>A particularly useful function is to find out if a value is in an array by sequentially searching the array using a for loop and returning true if the value is found. </p> <p>The below code which populates the array with random numbers between a low and high value and uses the searchArray(...) function to search the array also.</p> PseudocodeJava <pre><code>Main\n    Declare Integer myArray [9] // created the array\n    Declare Constant Integer low = 10\n    Declare Constant Integer = 99\n\n    initializeArray(myArray, low, high)\n\n    Declare Boolean valueFound\n    Declare Integer nbrToSearchFor\n\n    nbrToSearchFor = getInteger(\"Number to search for?\") //Input\n\n    valueFound = searchArray(myArray, nbrToSearchFor) // Processing\n\n    displayResult(valueFound) // Output\nEnd Main\n</code></pre> <pre><code>import java.util.Scanner;\n\npublic class OneDimensionalArrayExample {\n\n    static Scanner keyboard = new Scanner(System.in);\n\n    public static void main(String[] args) {\n\n        int[] myArray = new int[9]; // declaring and allocating memory to the array\n        final int LOW = 10;\n        final int HIGH = 99;\n\n        initializeArray(myArray, LOW, HIGH);\n\n        boolean valueFound;\n        int nbrToSearchFor;\n\n        nbrToSearchFor = getInteger(\"Number to search for?\"); // Input\n\n        valueFound = searchArray(myArray, nbrToSearchFor); // Processing\n\n        displayResult(valueFound); // Output\n\n    }\n\n    public static void initializeArray(int[] myArray, int low, int high) {\n        for (int ii = 0; ii &lt; myArray.length; ii++) {\n        myArray[ii] = getRandomNumber(low, high);\n        }\n    }\n\n    public static boolean searchArray(int[] myArray, int nbrToSearchFor) {\n        boolean result = false;\n        for (int ii = 0; ii &lt; myArray.length; ii++) {\n            if (myArray[ii] == nbrToSearchFor) {\n                result = true;\n                break;\n            }\n        }\n        return result;\n    }\n\n    public static void displayResult(boolean valueFound) {\n        if (valueFound) {\n        System.out.println(\"The number was found.\");\n        } else {\n        System.out.println(\"The number was not found.\");\n        }\n    }\n\n    public static int getInteger(String msg) {\n        System.out.println(msg);\n        while (!keyboard.hasNextInt()) {\n        keyboard.nextLine();\n        System.err.println(\"Invalid integer. Try again.\");\n        }\n        int number = keyboard.nextInt();\n        keyboard.nextLine(); // flushes the buffer\n        return number;\n    }\n\n    public static int getRandomNumber(int low, int high) {\n        return (int) (Math.random() * ((high + 1) - low)) + low;\n    }\n}\n</code></pre> <p>In pseudocode, and in languages such as Java, arrays are passed by reference so this program does not have to return the array. When the values of the array elements are changed in the module or function, the original array\u2019s elements are also changed.</p> PseudocodeJava <pre><code>// Initialize the array with random numbers from low to high\nModule initializeArray (Integer [ ] theArray, Integer low, Integer high)\nDeclare Integer x\nFor x = 0 to theArray.length \u2013 1 Step 1\n    theArray [x] = getRandomNumber(low, high)\nEnd For\nEnd Module\n\n// Search the array for a value. Return true if found.\nFunction Boolean searchArray (Integer [ ] theArray, Integer numToSearchFor)\nDeclare Integer x\nFor x = 0 to theArray.length \u2013 1 Step 1\n    If theArray [x] == numToSearchFor\n    Return true //The value was found!\n    End If\nEnd For\nReturn False //The value was not in the array\nEnd Function\n\n// Display the result of the search\nModule displayResult (Boolean valueFound)\nIf valueFound\n    Display \"The value was found\"\nElse\n    Display \"The value was NOT found\"\nEnd If\nEnd Module\n\n// getInteger() method in pesudocode\nMethod Integer getInteger (String msg)\n    Declare Integer newValue\n\n    Display msg\n    Input newValue\n\n    While newValue is not an Integer\n        Display \"Invalid number.\"\n        Display msg\n        Input newValue\n    End While\n\n    Return newValue\nEnd Method\n\n// Get a random number from low to high\nFunction Integer getRandomNumber(Integer low, Integer high)\nDeclare Integer randomNbr\nrandomNbr = (Math.random() * ((high + 1) - low)) + low; \nReturn randomNbr\nEnd Function\n\n// Or write getRandomNumber() this way:\nFunction Integer getRandomNumber(Integer low, Integer high)\nReturn (Math.random() * ((high + 1) - low)) + low;\nEnd Function\n</code></pre> <pre><code>// Initialize the array with random numbers from low to high\npublic static void initializeArray(int[] myArray, int low, int high) {\n        for (int ii = 0; ii &lt; myArray.length; ii++) {\n        myArray[ii] = getRandomNumber(low, high);\n        }\n    }\n\n// Search the array for a value. Return true if found.\npublic static boolean searchArray(int[] myArray, int nbrToSearchFor) {\n    boolean result = false;\n    for (int ii = 0; ii &lt; myArray.length; ii++) {\n        if (myArray[ii] == nbrToSearchFor) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\n// Display the result of the search\npublic static void displayResult(boolean valueFound) {\n    if (valueFound) {\n    System.out.println(\"The number was found.\");\n    } else {\n    System.out.println(\"The number was not found.\");\n    }\n}\n\n// Get an integer\npublic static int getInteger(String msg) {\n    System.out.println(msg);\n    while (!keyboard.hasNextInt()) {\n    keyboard.nextLine();\n    System.err.println(\"Invalid integer. Try again.\");\n    }\n    int number = keyboard.nextInt();\n    keyboard.nextLine(); // flushes the buffer\n    return number;\n}\n\n// Get a random number from low to high\npublic static int getRandomNumber(int low, int high) {\n    return (int) (Math.random() * ((high + 1) - low)) + low;\n}\n</code></pre>","boost":1},{"location":"programming/arrays/two-dimensional-arrays/","title":"Two-Dimensional Arrays","text":"<p>A two-dimensional array is a list of items arranged by rows and columns. Look at a spreadsheet at how the data is arranged: by rows and columns.</p> <p>When looping through two-dimensional arrays, it is useful to name the variables \"r\" and \"c\" for rows and columns.</p> <p>Check out this pseudocode which uses nested loops to display the subscripts of a two-dimensional array:</p> PseudocodeJava <pre><code>Module print2DimensionalSubscripts ()\n    Declare Integer row\n    Declare Integer column\n\n    For row = 0 to 3 Step 1\n        For column = 0 to 4 Step 1\n            Display row, \",\", column, \" \"\n        End For\n        Display \"\\n\" //print a new line\n    End For\nEnd Module\n</code></pre> <pre><code>public static void print2DimensionalSubscripts () {\n    int row;\n    int column;\n\n    for (row = 0; row &lt;= 3; row++) {\n        for (column = 0; column &lt;=4; column++) {\n            System.out.print(row + \",\" + column + \" \");\n        }\n        System.out.println();\n    }\n}\n</code></pre> <p>The subscripts for a two-dimensional array will be printed like this: (row , column)</p> <pre><code>0,0 0,1 0,2 0,3 0,4 \n1,0 1,1 1,2 1,3 1,4 \n2,0 2,1 2,2 2,3 2,4 \n3,0 3,1 3,2 3,3 3,4\n</code></pre> <p>The above values show the row and column subscripts: The first item <code>0,0</code> is <code>row 0</code> and <code>column 0</code>. The last item is <code>3,4</code> which is <code>row 3</code> and <code>column 4</code>. The patterns of these subscripts should be in your mind whenever you are coding a two-dimensional array.</p> <p>Two dimensional arrays are printed as a rectangle or square of values\u2014like a multiplication table.</p> <p>You should recognize this code from printing shapes looping exercises you have seen!</p> <p>Note</p> <p>In for-loops use the (array.length - 1) value to end the outer-loop of rows. This enables you to change the array length without having to change code related to array size.</p> <p>For the inner-loop, the columns, use the length of the row being processed: array[r].length - 1</p> <p>Here is code that initializes a 2-D array with random values, sums the values, prints the array, and prints the sum.</p> PseudocodeJava <pre><code>Main\n    Declare Integer myArray [9][9]\n    Declare Constant Integer low = 10\n    Declare Constant Integer high = 99\n\n    initializeArray(myArray, low, high) //Input\n\n    Declare Integer total\n    total = sumArray(myArray) //Processing\n\n    print2DimensionalArray(myArray) //Output\n\n    Display \"The total of all elements is \", total //Output\nEnd Main\n\nModule initializeArray (Integer [ ][ ] theArray,\n                        Integer low, Integer high)\n    Declare Integer row\n    Declare Integer column\n\n    For row = 0 to theArray.length \u2013 1 Step 1\n        For column = 0 to theArray[r].length \u2013 1 Step 1\n            theArray[row][column] = getRandomNumber(low, high)\n        End For\n    End For\nEnd Module\n\nFunction Boolean sumArray (Integer [ ][ ] theArray)\n    Declare Integer row\n    Declare Integer column\n    Declare Integer total = 0 //initialize the total\n\n    For row = 0 to theArray.length \u2013 1 Step 1\n        For column = 0 to theArray[row].length \u2013 1 Step 1\n            total = total + theArray [row][column]\n        End For\n    End For\n\n    Return total\nEnd Function\n\nModule print2DimensionalArray (Integer [ ][ ] theArray)\n    Declare Integer row\n    Declare Integer column\n\n    For row = 0 to theArray.length \u2013 1 Step 1\n        For column = 0 to theArray[row].length \u2013 1 Step 1\n            //print the below with no new line\n            Display theArray [row][column], \" \"\n        End For\n        Display \"\\n\" //print a new line\n    End For\nEnd Module\n</code></pre> <pre><code>public class OneDimensionalArrayExample {\n\n    public static void main(String[] args) {\n\n        int[][] myArray = new int[9][9];\n        final int LOW = 10;\n        final int HIGH = 99;\n\n        initializeArray(myArray, low, high); //Input\n\n        int total;\n        total = sumArray(myArray); //Processing\n\n        print2DimArray(myArray); //Output\n\n        System.out.println(\"The total of all elements is \" + total); //Output\n    }\n\n    public static void initializeArray(int[ ][ ] theArray, int low, int high) {\n        int row;\n        int column;\n\n        for (row = 0; row &lt;= theArray.length \u2013 1; row++) {\n            for (column = 0; column &lt;= theArray[row].length \u2013 1; column++) {\n                theArray[row][column] = getRandomNumber(low, high)\n            }\n        }\n    }\n\n    public static Boolean sumArray(int[ ][ ] theArray) {\n        int row;\n        int column;\n        int total = 0; //initialize the total\n\n        for (row = 0; row &lt;= theArray.length \u2013 1; row++) {\n            for (column = 0; column &lt;= theArray[row].length \u2013 1; column++) {\n                total = total + theArray [row][column];\n            }\n        }\n        return total;\n    }\n\n    public static void print2DimensionalArray (int[ ][ ] theArray) {\n        int row;\n        int column;\n\n        for (row = 0; row &lt;= theArray.length \u2013 1; row++) {\n            for (column = 0; column &lt;= theArray[r].length \u2013 1; column++) {\n                //print the below with no new line\n                System.out.print(theArray[row][column] + \" \");\n            }\n            System.out.println(); //print a new line\n        }\n    }\n\n    public static int getRandomNumber(int low, int high) {\n        return (int) (Math.random() * ((high + 1) - low)) + low;\n    }\n}\n</code></pre> <p>Note</p> <p>Note that you don\u2019t have to waste a lot of time here. All the code you need to initialize an array and to search a two-dimensional array already exists. You just should study it and understand it well enough to be able to write it for yourself quickly and efficiently.</p>","boost":1},{"location":"programming/conditionals-and-loops/","title":"Conditionals and Loops - Index","text":"<ul> <li>Conditionals</li> <li>Boolean</li> <li>Logical Operators</li> <li>Relational Operators</li> <li>Basic Truth Tables Using Boolean Values Of True and False</li> <li>The getYorN() Method</li> <li>Loops - Three Types of Loops - The Do-While Loop, The While Loop, And The For Loop</li> <li>Counting Pre-Test Loop (While Loop) And Counting Post-Test Loop (Do-While Loop)</li> <li>For-Loop (Pre-Test Loop)</li> <li>While-Loop (Pre-Test Loop)</li> <li>Do-While Loop (Post-Test Loop)</li> <li>Game Loop</li> <li>Input While-Loop (Pre-Test Loop) With A Sentinel Value And A Priming Read</li> <li>Standard Input-Sentinel Loop</li> <li>wantsToContinue Loop</li> <li>Nested Loops</li> <li>While Loop General Format In Pseudocode</li> <li>While-Loop Example</li> <li>Which Loop To Use</li> <li>Loops Terminology</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/boolean/","title":"Boolean","text":"<p>Decision structures use relational operators to make comparisons that result in a Boolean value of True or False.</p> Operator Means == Equal to &gt; Greater than &lt; Less than &gt;= Greater than or Equal to &lt;= Less then or Equal to != Not Equal to <p>The result of a comparison is either true or false. Here are some coding examples and what they mean:</p> Operator Means If a == b Is a is equal to b? If so, the result is true. If a &gt; b If a &gt; b If a &lt; b Is a is less than b? If a &gt;= b Is a is greater than or equal to b? If a &lt;= b Is a is less than or equal to b? If a != b Is a is not equal to b? <p>Note the difference between == and =. The single = is an assignment operator in formulas. The double == is a comparison operator. If-statements use the == operator.</p> <p>Here is the basic structure of a simple if-statement:</p> Pseudocode <pre><code>If (this condition is true)\n    //execute these lines of code\nEnd If\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/conditionals/","title":"Conditionals","text":"","boost":1},{"location":"programming/conditionals-and-loops/conditionals/#boolean-expressions","title":"Boolean Expressions","text":"<p>A conditional statement, sometimes called a selection statement, uses conditions that are boolean expressions to allow us to choose which statement will be executed next.</p> <p>The conditional statements are:</p> <ul> <li><code>if</code> statement</li> <li><code>if-else</code> statement</li> <li><code>switch</code> statement</li> </ul> <p>Conditional statements give us the ability to choose under which conditions a block of code is executed.</p> <p>A boolean expression is an expression, also called a condition, that evaluates to a boolean value of either true or false.</p>","boost":1},{"location":"programming/conditionals-and-loops/counting-pre-test-loop-and-counting-post-test-loop/","title":"Counting Pre-Test Loop (While Loop) And Counting Post-Test Loop (Do-While Loop)","text":"","boost":1},{"location":"programming/conditionals-and-loops/counting-pre-test-loop-and-counting-post-test-loop/#counting-pre-test-loop-while-loop","title":"Counting Pre-Test Loop (While Loop)","text":"<p>Do you need to do something a number of times? Below is a counting pre-test loop:</p> PseudocodeJava <pre><code>// Pre-test Loop with a counter\nDeclare Integer last\nDeclare Integer counter\nlast = 99\ncounter = 0\n\nWhile (counter &lt;= last)     // keeps looping while this is true\n    // code inside loop goes here. May never be executed.\n    counter = counter + 1   // or use counter++\nEnd While\n\nDisplay \"The loop ran \", counter, \" times.\"\n</code></pre> <pre><code>public class PreTestLoopWithACounter {\n\n  public static void main(String[] args) {\n\n    // Pre-test Loop with a counter\n      int last = 99;\n      int counter = 0;\n\n      while(counter &lt;= last) {    // keeps looping while this is true\n          // code inside loop goes here. May never be executed.\n          counter = counter + 1;  // or use counter++\n      }\n\n      System.out.println(\"The loop ran \" + counter + \" times.\");\n\n  }\n\n// Output:\n//\n// The loop ran 100 times.\n\n}\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/counting-pre-test-loop-and-counting-post-test-loop/#counting-post-test-loop-do-while-loop","title":"Counting Post-Test Loop (Do-While Loop)","text":"<p>Here is another way to count using a counting post-test loop:</p> PseudocodeJava <pre><code>//Post-test Loop with a counter\nDeclare Integer last\nDeclare Integer counter\nlast = 99\ncounter = 0\n\nDo\n    //code inside loop goes here. Always executed at least once.\n    counter = counter + 1       //or use counter++\nWhile (counter &lt;= last)     //keeps looping while this is true\n\nDisplay \"The loop ran \", counter, \" times.\"\n</code></pre> <pre><code>public class PostTestLoopWithACounter {\n\n  public static void main(String[] args) {\n\n    // Post-test Loop with a counter\n    int last = 99;\n    int counter = 0;\n\n    do {\n        //code inside loop goes here. Always executed at least once.\n        counter = counter + 1;  //or use counter++\n    } while(counter &lt;= last);   //keeps looping while this is true\n\n    System.out.println(\"The loop ran \" + counter + \" times.\");\n\n  }\n\n// Output:\n//\n// The loop ran 100 times.\n\n}\n</code></pre> <p>Which type of loop should you use? That depends on what the problem requires. As a programmer, you have to figure that kind of thing out. Nobody is going to tell you which loop to use. Through experience and testing, you will know which type of loop to use.</p> <p>Here are two questions that will help you decide:</p> <ul> <li>Will the code in the loop be executed at least once? (that's a post-test loop)</li> <li>Can the code in the loop be skipped entirely? (that's a pre-test loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/do-while-loop-post-test-loop/","title":"Do-While Loop (Post-Test Loop)","text":"<pre><code>// the do-while loop in pseudocode\n// this loop continues while the condition is true\nDo                          // starts a do-while loop (a post-test loop)\n    // your code goes here  // code inside the loop goes here\nWhile (x &lt;= 10)             // ends the do-while loop.\n</code></pre> <p>Note</p> <ul> <li>Will the code in the loop be executed at least once? (that's a post-test loop)</li> <li>Can the code in the loop be skipped entirely? (that's a pre-test loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/for-loop-pre-test-loop/","title":"For-Loop (Pre-Test Loop)","text":"PseudocodeJava <pre><code>// the for-loop in pseudocode\nFor x = 1 to 10   //starts the for-loop (a pre-test loop)\n    // your code goes here\n    // code inside the loop goes here\nEnd For  //ends the for-loop\n</code></pre> <pre><code>// the for-loop in java\nfor(int ii = 1; ii &lt;= 10; ii++) { //starts the for-loop (a pre-test loop)\n    // your code goes here\n    // code inside the loop goes here\n}  // ends the for-loop\n</code></pre> <p>Software developers use for-loops all the time. You MUST be so comfortable with for-loops that you can write them without having to think about how to do it.</p>","boost":1},{"location":"programming/conditionals-and-loops/for-loop-pre-test-loop/#format-of-the-for-loop","title":"Format Of The For-Loop","text":"<ul> <li>In Pseudocode it is <code>For variableName = startingValue to endingValue Step stepValue</code></li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/for-loop-pre-test-loop/#3-parts-of-a-for-loop","title":"3 Parts Of A For-Loop","text":"<ul> <li>Initialize the counter (shown above as <code>variableName</code>) to the starting value</li> <li>A condition to continue looping while true, shown above as <code>startingValue to endingValue</code>, keep looping until the ending value <code>endingValue</code> is reached.</li> <li>The amount to increment, shown above as <code>Step stepValue</code> usually by adding 1 (<code>+ 1</code>) to the step value <code>stepValue</code>, or the amount to decrement, shown above as <code>Step stepValue</code>, usually by subtracting 1 (<code>- 1</code>) to the step value <code>stepValue</code>.</li> </ul> <p>The <code>Step</code> value can be any increment or decrement. The default <code>Step</code> in pseudocode is <code>Step + 1</code> if it is not shown.</p> <p>Here are some examples of how for-loops look in pseudocode and in a software language such as Java:</p> <pre><code>// In Pseudocode\nFor month = 1 to 12 Step 1\n\n// In Java\nfor (int month = 1; month &lt;= 12; month++)\n\n//-------------------------------------------\n\n// In Pseudocode        \nFor day = 1 to DAYS_IN_YEAR\n\n// In Java\nfor (int day = 1; day &lt;= DAYS_IN_YEAR; day++){\n\n}\n\n//-------------------------------------------\n\n// In Pseudocode       \nFor eNbr = 0 to nbrOfEmps\n\n// In Java\nfor (int eNbr = 0; eNbr &lt; nbrOfEmps ; eNbr++){\n\n}\n\n//-------------------------------------------\n\n// In Pseudocode        \nFor orcs = nbrOfOrcs to 1 Step -1\n\n// In Java\nfor (int orcs = nbrOfOrcs ; orcs &gt; 0; orcs--){\n\n}\n</code></pre> <p>Note</p> <ul> <li>Always use integers to loop, never real or decimal numbers.</li> <li>Will the code in the loop be executed at least once? (that's a post-test loop)</li> <li>Can the code in the loop be skipped entirely? (that's a pre-test loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/game-loop/","title":"Game Loop","text":"<p>The below game loop can be modified to play any game that plays any number of rounds. Notice the pattern of the code and how the data moves through each function.</p> PseduocodeJava <pre><code>Declare Global Constant Integer NBR_OF_ROUNDS = 5\nDeclare Global Constant Integer NBR_OF_GAMES = 3\n\nMain\n    Do\n        Declare String username\n        Declare Boolean playerWins\n\n        username = getString(\"What is your name?\")\n\n        playerWins = playMatch(userName)\n\n        displayFinalResults(playerWins, username)\n\n    While (getYesOrNo(\"Play again? y/n\"))\n\nEnd Main\n\nFunction Boolean playMatch (String uName)\n\n    Declare Integer roundNbr\n    Declare Boolean playerWinsRound\n\n    For roundNbr = 1 to NBR_OF_ROUNDS\n        playerWinsRound = playRound(username)\n\n        If playerWinsRound\n            displayPlayerWonThisRound()\n        Else\n            displayPlayerLostThisRound()\n        End If\n\n        If (insert criteria for player to win match)\n            Return True //The player won the match\n        End If\n\n        If (insert criteria for player to lose match)\n            Return False //The player lost the match\n        End If\n    End For\n    Return False //No more rounds to play\nEnd Function\n</code></pre> <pre><code>// Finishing the code is an exercise left up to the reader\nimport java.util.Scanner;\n\npublic class GameLoop {\n\n    // Putting the Scanner object here makes it global so it does\n    // not have to be passed to modules.\n    static Scanner keyboard = new Scanner(System.in);\n\n    final static int NBR_OF_ROUNDS = 5;\n    final static int NBR_OF_GAMES = 3;\n\n    public static void main(String[] args) {\n\n        Scanner keyboard = new Scanner(System.in);\n\n        do {\n            String userName;\n            boolean playerWins;\n\n            userName = getString(\"What is your name?\");\n\n            playerWins = playMatch(userName);\n\n            displayFinalResults(playerWins, userName);\n\n        } while (getYorN(\"Play again? y/n\"));\n\n        keyboard.close();\n    }\n}\n</code></pre> <p>Note</p> <ul> <li>Notice how similar <code>playMatch(...)</code> above and <code>playRound(...)</code> below are. This is how great programmers write code so quickly\u2014they are not reinventing code, they are reusing code structures that have already been written.</li> </ul> PseduocodeJava <pre><code>Function Boolean playRound (String userName)\n\n    Declare Integer gameNbr\n    Declare Boolean playerWinsGame\n\n    For gameNbr = 1 to NBR_OF_GAMES\n        playerWinsGame = playGame(userName)\n\n        If playerWinsGame\n            displayPlayerWonThisGame()\n        Else\n            displayPlayerLostThisGame()\n        End If\n\n        If (insert criteria for player to win round)\n            Return True //The player won the round\n        End If\n\n        If (insert criteria for player to lose round)\n            Return False //The player lost the round\n        End If\n    End For\n    Return False //No more games to play\nEnd Function\n</code></pre> <pre><code>public static boolean playRound(String userName) {\n    int gameNbr;\n    boolean playerWinsGame;\n\n    for (int ii = 1; ii &lt;= NBR_OF_GAMES; ii++) {\n        playerWinsGame = playGame(userName);\n\n        if (playerWinsGame) {\n            displayPlayerWonThisGame();\n        } else {\n            displayPlayerLostThisGame();\n        }\n\n        if (insert criteria for player to win round) {\n            return true; // The player won the round\n        }\n\n        if (insert criteria for player to lose round) {\n            return false; // The player lost the round\n        }\n    }\n    return false; // No more games to play\n}\n</code></pre> <p>The result of a game is displayed in the <code>playRound(...)</code> function which is one level higher than the <code>playGame(...)</code> function. And, similarly, the result of a round is displayed in the <code>playMatch(...)</code> function.</p> <p>At some point, the player has to actually play the game. That point is at the lowest level of the gaming structure: <code>playGame(...)</code> in the above example. If you wanted to add more levels to the game, you would keep adding levels of code very similar to the above between <code>playMatch(...)</code> and <code>playGame(...)</code>.</p> <p>The details of the above example will change based on the design of the game, but the gaming structure will stay the same. For example, your game may not display anything when the player wins or loses a game or a round.</p> <p>Note</p> <ul> <li>This is how to quickly create complicated, layered, programs using coding structures that have already been developed and used by thousands of programmers. Don\u2019t try to reinvent the wheel!</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/input-while-loop-pre-test-loop-with-a-sentinel-value-and-a-priming-read/","title":"Input While-Loop (Pre-Test Loop) With A Sentinel Value And A Priming Read","text":"<p>A common task for a program is to ask the user to enter a series of numbers or strings such as city names.</p> <p>The program below uses a priming read and then a pre-test loop to add numbers together. A priming read is a statement that gets input before the loop begins.</p> <p>The program reports the sum of the numbers after the sentinel value is entered. Understanding this loop and being able to reproduce it will save you lots of time. This is a coding tool that MUST be in your toolbox.</p> PseudocodeJava <pre><code>// Pre-test Loop with input and a sentinel value\n\nDeclare Real newValue, sum\nDeclare Constant Integer SENTINEL = 0\n\nsum = 0                                 // Initialize the sum to 0\n\n// The below line is the priming read before the loop\n// 0 is the sentinel value that will exit the loop\n\nnewValue = getReal (\"Enter a number. \", SENTINEL, \" to exit.\")\n\nWhile (newValue != SENTINEL)            //Continue to loop while true\n    sum = sum + newValue\n\n    //other code inside the loop goes here\n\n    newValue = getReal (\"Enter a number. \", SENTINEL, \" to exit.\")\n\nEnd While\n\nDisplay \"The sum of the numbers is \", sum\n</code></pre> <pre><code>import java.util.Scanner;\n\npublic class InputWhileLoopPreTestLoopWithASentinelValueAndAPrimingRead {\n\n  public static void main(String[] args) {\n\n    // Pre-test Loop with input and a sentinel value\n\n    Scanner keyboard = new Scanner(System.in);\n\n      double newValue;\n      double sum;\n      final int SENTINEL = 0;\n\n      sum = 0;  // Initialize the sum to 0\n\n      // The below line is the priming read before the loop\n      // 0 is the sentinel value that will exit the loop\n\n      System.out.println(\"Enter a number. \" + SENTINEL + \" to exit.\");\n      newValue = keyboard.nextDouble();\n\n      while(newValue != SENTINEL) {  //Continue to loop while true\n          sum = sum + newValue;\n\n          //other code inside the loop goes here\n\n          System.out.println(\"Enter a number. \" + SENTINEL + \" to exit.\");\n        newValue = keyboard.nextDouble();\n      }\n\n      System.out.println(\"The sum of the numbers is \" + sum);\n\n      // close the scanner object\n      keyboard.close();\n\n  }\n\n}\n</code></pre> <p>A key design point is the <code>SENTINEL</code> is a constant and you should write the code so that the <code>SENTINEL</code> value can be changed to anything and the program will still work. This is a constraint that will make you write better code.</p> <p>Notice the above loop uses a priming read before entering the loop. This enables the user to enter a sentinel value to end the loop before it even begins. Ending a loop before starting it should be a test case in your test plan.</p> <p>Why would a user do that? As programmers, we must cover all the possibilities even if they are remote. In this case, perhaps the user realized they were in the wrong program and wanted to exit. Or maybe it was just time for lunch.</p>","boost":1},{"location":"programming/conditionals-and-loops/logic-basic-truth-tables-using-boolean-values-of-true-or-false/","title":"Basic Truth Tables Using Boolean Values Of True and False","text":"","boost":1},{"location":"programming/conditionals-and-loops/logic-basic-truth-tables-using-boolean-values-of-true-or-false/#and","title":"AND","text":"A B A AND B T T T T F F F F F","boost":1},{"location":"programming/conditionals-and-loops/logic-basic-truth-tables-using-boolean-values-of-true-or-false/#or","title":"OR","text":"A B A OR B T T T F T T F F F","boost":1},{"location":"programming/conditionals-and-loops/logic-getyorn/","title":"The getYorN() Method","text":"","boost":1},{"location":"programming/conditionals-and-loops/logic-getyorn/#the-getyorn-method-in-pseudocode","title":"The getYorN() Method In Pseudocode","text":"<p>The below method asks the user to enter <code>Y</code> or <code>N</code> using the generalized <code>getString()</code> method</p> PseudocodeJava <pre><code>Method Boolean getYesOrNo (String msg)\n    Declare String newValue\n\n    Display msg\n    newValue = getString(msg)\n\n    While uppercase(newValue) is not \"Y\"\n    AND uppercase(newValue) is not \"N\"\n\n        Display \"Invalid entry. Should be Y or N\"\n        newValue = getString(msg)\n\n    End While\n\n    If newValue is \"Y\" Then\n        Return true\n    End If\n    Return false // newVaLUE IS \"N\"\nEnd Method\n</code></pre> <pre><code>/** Gets a Yes or No answer from the keyboard. Calls getString\n * to rejects null input and spaces.\n * @param msg is the text that will be displayed the user.\n * @return Returns a boolean value. True = yes; False = no. \n*/ \n\npublic static boolean getYorN(String msg) {\nString answer = getString(msg);\n\nwhile (answer.compareToIgnoreCase(\"y\")   != 0 \n    &amp;&amp; answer.compareToIgnoreCase(\"yes\") != 0 \n    &amp;&amp; answer.compareToIgnoreCase(\"n\")   != 0 \n    &amp;&amp; answer.compareToIgnoreCase(\"no\")  != 0) {\n\n    if (answer.replace(\" \", \"\").equals(\"\")) {\n        System.err.println(\"Error: Missing y/n input.\");\n    } else {\n        if (answer.compareToIgnoreCase(\"y\")   != 0 \n        &amp;&amp; answer.compareToIgnoreCase(\"yes\") != 0 \n        &amp;&amp; answer.compareToIgnoreCase(\"n\")   != 0 \n        &amp;&amp; answer.compareToIgnoreCase(\"no\")  != 0) {\n            System.err.println(\"Error: Unexpected input.\");\n            }\n        }\n        answer = getString(msg);\n    } \n\n    if  (answer.compareToIgnoreCase(\"y\")   == 0  \n        || answer.compareToIgnoreCase(\"yes\") == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n</code></pre> <p>Notice that <code>getYesOrNo()</code> uses <code>getString()</code>. Why is that? Because <code>getString()</code> is a generalized input method that can return any kind of string such as <code>Y</code> or <code>N</code>.</p>","boost":1},{"location":"programming/conditionals-and-loops/logic-getyorn/#the-getstring-method-in-used-in-the-getyorn-method","title":"The getString() Method in used in The getYorN() Method","text":"PseudocodeJava <pre><code>Method String getString (String msg)\n    Declare String newValue\n\n    Display msg\n    Input newValue\n\n    While newValue is null or spaces\n        Display \"Error: Missing input.\"\n        Display msg\n        Input newValue\n    End While\n\n    Return newValue\nEnd Method\n</code></pre> <pre><code>/** Gets a String from the keyboard. Rejects null entry or any \n * number of spaces.\n * @param msg is the text that will be displayed the user to\n * ask them to enter a value.\n * @return Returns a String from the keyboard. \n*/ \n\npublic static String getString(String msg) {\n    String answer = \"\";\n    System.out.println(msg);\n    try {\n        answer = keyboard.nextLine(); \n    } catch (Exception e) {\n        System.err.println(\"Error reading input from user. \" \n            + Ending program.\");\n        System.exit(-1);\n    } \n\n    while (answer.replace(\" \", \"\").equals(\"\")) {\n        System.err.println(\"Error: Missing input.\");\n        try {\n            System.out.println(msg);\n            answer = keyboard.nextLine(); \n        } catch (Exception e) {\n            System.err.println(\"Error reading input from user. \"\n                + Ending program.\");\n            System.exit(-1);\n        } \n    }\n    return answer;            \n}\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/logic-logical-operators/","title":"Logical Operators","text":"","boost":1},{"location":"programming/conditionals-and-loops/logic-logical-operators/#logical-operators-you-must-know","title":"Logical operators you must know","text":"<ul> <li>AND \u2013 Both conditions must be true</li> <li>OR \u2013 Either condition must be true</li> <li>NOT \u2013 Reverses the truth of an expression</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/logic-logical-operators/#basic-truth-tables-using-boolean-values-of-true-and-false","title":"Basic Truth Tables Using Boolean Values Of True and False","text":"","boost":1},{"location":"programming/conditionals-and-loops/logic-logical-operators/#and","title":"AND","text":"A B A AND B T T T T F F F F F","boost":1},{"location":"programming/conditionals-and-loops/logic-logical-operators/#or","title":"OR","text":"A B A OR B T T T F T T F F F","boost":1},{"location":"programming/conditionals-and-loops/logic-relational-operators-decision-structures-and-boolean-logic/","title":"Relational Operators","text":"<p>Decision structures use relational operators to make comparisons that result in a Boolean value of <code>True</code> or <code>False</code>.</p> Operator Means <code>==</code> Equal to <code>&gt;</code> Greater than <code>&lt;</code> Less than <code>&gt;=</code> Greater than or Equal to <code>&lt;=</code> Less then or Equal to <code>!=</code> Not Equal to <p>The result of a comparison is either <code>true</code> or <code>false</code>. Here are some coding examples and what they mean:</p> Operator Means If <code>a == b</code> Is a is equal to b? If so, the result is true. If <code>a &gt; b</code> If a &gt; b If <code>a &lt; b</code> Is a is less than b? If <code>a &gt;= b</code> Is a is greater than or equal to b? If <code>a &lt;= b</code> Is a is less than or equal to b? If <code>a != b</code> Is a is not equal to b? <p>Note</p> <ul> <li>Note the difference between <code>==</code> and <code>=</code>. The single <code>=</code> is an assignment operator in formulas. The double <code>==</code> is a comparison operator. If-statements use the <code>==</code> operator.</li> </ul> <p>Here is the basic structure of a simple if-statement:</p> <pre><code>If (this condition is true)\n  //execute these lines of code\nEnd If\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/loops/","title":"Loops - Three Types of Loops - The Do-While Loop, The While Loop, And The For Loop","text":"","boost":1},{"location":"programming/conditionals-and-loops/loops/#three-types-of-loops-the-do-while-loop-the-while-loop-and-the-for-loop","title":"Three Types of Loops - The Do-While Loop, The While Loop, And The For Loop","text":"<p>The three types of loops:</p> <ul> <li>Do-While Loop (Post-Test Loop)</li> <li>While-loop (Pre-Test Loop)</li> <li>For-loop (Pre-Test Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/loops/#do-while-loop-post-test-loop","title":"Do-While Loop (Post-Test Loop)","text":"PseudocodeJava Do-While Loop (Post-Test Loop) in Pseudocode<pre><code>// The Do-While Loop (Post-Test Loop) in pseudocode\n// this loop continues while the condition is true\n    Do                          // starts a do-while loop (a post-test loop)\n        // your code goes here  // code inside the loop goes here\n    While (x &lt;= 10)             // ends the do-while loop.\n</code></pre> Do-While Loop (Post-Test Loop) in Java<pre><code>// The Do-While Loop (Post-Test Loop) in Java\n// this loop continues while the condition is true\npublic class DoWhileLoop {\n\n    public static void main(String[] args) {\n\n        int x = 0;\n\n        do {                        // starts a do-while loop (a post-test loop)\n            // your code goes here    // code inside the loop goes here\n            System.out.println(x);\n            x++;\n        } while (x &lt;= 10);          // ends the do-while loop.\n    }\n}\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/loops/#while-loop-pre-test-loop","title":"While-loop (Pre-Test Loop)","text":"PseudocodeJava While-Loop (Pre-Test Loop) in Pseudocode<pre><code>// While-Loop (Pre-Test Loop) in Pseudocode\n// this loop continues while the condition is true\nWhile (x &lt;= 10)                 // starts the while-loop (a pre-test loop)\n    // your code goes here      // code inside the while-loop goes here\nEnd While                       // ends the while-loop\n</code></pre> While-Loop (Pre-Test Loop) in Java<pre><code>// The While Loop (Pre-Test Loop) in Java\n// this loop continues while the condition is true\npublic class WhileLoop {\n\n    public static void main(String[] args) {\n\n        int x = 0;\n\n        while(x &lt;= 10) {                // starts the while-loop (a pre-test loop)\n            // your code goes here      // code inside the while-loop goes here\n            System.out.println(x);  \n            x++;                    \n        }                               // ends the while-loop\n\n    }\n\n}\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/loops/#for-loop-pre-test-loop","title":"For-loop (Pre-Test Loop)","text":"PseudocodeJava The For-loop (Pre-Test Loop) in Pseudocode<pre><code>// The For-loop (Pre-Test Loop) in Pseudocode\n// continues while the condition is true\nFor x = 1 to 10 Step 1          // starts the for-loop (a pre-test loop), increments by 1\n    // your code goes here      // code inside the for-loop goes here\nEnd For                         // ends the for-loop\n</code></pre> The For-loop (Pre-Test Loop) in Java<pre><code>// The For-loop (Pre-Test Loop) in Java\n// continues while the condition is true\npublic class ForLoop {\n\n    public static void main(String[] args) {\n\n        for(int ii = 1; ii &lt;=10; ii++) {    // starts the for-loop (a pre-test loop), increments by 1\n            // your code goes here          // code inside the for-loop goes here\n            System.out.print(ii + \" \");\n        }                                   // ends the for-loop\n    }\n}\n</code></pre> <p>Note</p> <ul> <li>Will the code in the loop be executed at least once? (that's a post-test loop)</li> <li>Can the code in the loop be skipped entirely? (that's a pre-test loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/nested-loops/","title":"Nested Loops","text":"<p>Loops of all kinds can be nested inside each other. A very common nested loop is the nested for-loop.</p> <p>How many times does this code display \"Hello\"?</p> Pseduocode <pre><code>Declare Integer month, year\nFor year = 2019 to 2028\n    For month = 1 to 12\n        Display \"Hello\"\n    End For\nEnd For\n</code></pre> <p>To determine how many times nested loops will execute the code, multiply the number of times each for-loop is executed. The above code will loop through the inner-most code 12 * 10 which is 120 times.</p> <p>The below code will simulate a clock by moving the various hands.</p> Pseduocode <pre><code>Declare Integer seconds, minutes, hours\nFor hours = 0 to 23 Step 1\n    For minutes = 0 to 59 Step 1\n        For seconds = 0 to 59 Step 1\n        // move second hand\n        End For\n        // move minute hand\n    End For\n    // move hour hand\nEnd For\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/standard-input-sentinel-loop/","title":"Standard Input-Sentinel Loop","text":"Pseduocode <pre><code>// standard input-sentinel loop in pseudocode\nMain\n\n    // other code\n\n    newValue = getReal (\"Enter a number. \", SENTINEL_VALUE, \" to exit.\")\n\n    While (newValue != SENTINEL_VALUE)  \n\n        // other code inside the loop goes here\n\n        newValue = getReal (\"Enter a number. \", SENTINEL_VALUE, \" to exit.\")    \n\n    End While\n\n    //other code\n\nEnd Main\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/","title":"Terminology - Loops","text":"","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#do-while-loop","title":"do-while-loop","text":"<ul> <li>A Do-while-loop is a post-test loop. Do these-lines-of-code while this-is-true. Do-While Loop (Post-Test Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#while-loop","title":"while-loop","text":"<ul> <li>A While-loop is a pre-test loop. The contents of the loop may not be executed if the condition is initially false. While-Loop (Pre-Test Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#for-loop","title":"for-loop","text":"<ul> <li>A For-loop is a pre-test loop consisting of 3 parts: initialize the counter; test the counter; increment the counter. For-Loop (Pre-Test Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#nested-loops","title":"nested loops","text":"<ul> <li>Nested loops are loops that can be nested inside each other. Commonly used with two-dimensional arrays. Nested Loops</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#pre-test-loop","title":"pre-test loop","text":"<ul> <li>A loop where the test occurs before the code to be executed. The code inside the loop may not be executed at all. While-Loop (Pre-Test Loop) For-Loop (Pre-Test Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#post-test-loop","title":"post-test loop","text":"<ul> <li>A post-test loop is a loop where the code inside the loop is always executed at least once because the test occurs after the code in the loop is excuted. Do-While Loop (Post-Test Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#sentinel","title":"sentinel","text":"<ul> <li>A sentinel is an inputted value that tells the program to stop and do something else.</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#infinite-loop","title":"infinite loop","text":"<ul> <li>An infinite loop is a loop that never ends. This is not good.</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#initialization","title":"initialization","text":"<ul> <li>Initialization is setting a variable or the elements of an array to a value.</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#counter","title":"counter","text":"<ul> <li>A counter is a variable used to count the number of occurrences of an item. Example: <code>counter++</code></li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#increment","title":"increment","text":"<ul> <li>Increment is to increase the value of a variable. Example: <code>x++</code></li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#decrement","title":"decrement","text":"<ul> <li>Decrement is to reduce. Example of x minus one: <code>x--</code></li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#wantstocontinue-loop","title":"wantsToContinue Loop","text":"<ul> <li>A wantsToContinue loop is a standard loop that asks the user if they want to continue. Commonly wants a <code>Y</code> or <code>N</code> response. Also called a do-it-again-loop. wantsToContinue Loop</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#game-loop","title":"game loop","text":"<ul> <li>A game loop is a loop frequently used in games. Game Loop</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#counting-loop","title":"counting loop","text":"<ul> <li>A counting loop is a loop used to count the number of items either being entered or already in an array. Counting Pre-Test Loop (While Loop) And Counting Post-Test Loop (Do-While Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/wantstocontinue-loop/","title":"wantsToContinue Loop","text":"<p>A common programming task is to ask the user if they want to play again, or if they want to enter another value, or if they want to do it all again. </p> <p>Note</p> <ul> <li>This loop uses the <code>getYesOrNo(...)</code> input routine.</li> </ul> Pseudocode <pre><code>Do                                                        // starts a do-while-loop (a post-test loop)\n    // your code goes here                                // code inside the do-while-loop goes here\nWhile (getYesOrNo(\"Do you want to play again? (y/n)\"))    // ends the do-while-loop using the getYesorNo() input routine.\n</code></pre> <p>Of course, sometimes using a <code>wantsToContinue()</code> loop is not appropriate and you should use a loop with a <code>sentinel</code> value instead. Think very hard about using a <code>wantsToContinue()</code> loop and consider the user\u2019s experience. Consider the <code>wantsToContinue()</code> loop as a process that stops the program and restarts it again.</p>","boost":1},{"location":"programming/conditionals-and-loops/which-loop-to-use/","title":"Which Loop To Use","text":"<p>There is usually a best loop to use to solve the problem.</p> Requirement for the program Try using this type of loop: Looping through a defined number of times for-loop Reading data or getting input while-loop with a priming read At the end, ask if they want to try again do-while loop (wantsToContinue) Don\u2019t know how many times to loop do-while loop or while-loop with a sentinel","boost":1},{"location":"programming/conditionals-and-loops/while-loop-example/","title":"While-Loop Example","text":"<p>This program shows how we might use a while-loop to write a commission calculating program that was described elsewhere.</p> Pseduocode <pre><code>// Pseudocode\n// Repetition Structures\n// Condition-Controlled Loops: While, Do-While, and Do-Until\n// Program shows how we might use a While loop to write the\n// commission calculating program that was described\n// elsewhere.\n\n// Variable declarations\nDeclare Real sales, commission\nDeclare String keepGoing = \"y\"\n\n// Constant for the commission rate\nConstant Real COMMISSION_RATE = 0.10\n\nWhile keepGoing == \"y\"\n    // Get the amount of sales.\n    Display \"Enter the amount of sales.\"\n    Input sales\n\n    // Calculate the commission.\n    Set commission = sales * COMMISSION_RATE\n\n    // Display the commission\n    Display \"The commission is $\", commission\n\n    Display \"Do you want to calculate another\"\n    Display \"commission? (Enter y for yes.)\"\n    Input keepGoing\nEnd While\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/while-loop-example/#program-output-with-input-shown-in-bold","title":"Program Output (with Input Shown in Bold)","text":"<pre><code>``` Java linenums=\"1\"\nEnter the amount of sales.\n\n10000.00 [Enter]\n\nThe commission is $1000\n\nDo you want to calculate another\ncommission? (Enter y for yes.)\n\ny [Enter]\n\nEnter the amount of sales.\n5000.00 [Enter]\n\nThe commission is $500\n\nDo you want to calculate another\ncommission? (Enter y for yes.)\n\ny [Enter]\n\nEnter the amount of sales.\n\n12000.00 [Enter]\n\nThe commission is $1200\n\nDo you want to calculate another\ncommission? (Enter y for yes.)\n\nn [Enter]\n```\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/while-loop-general-format-in-pseudocode/","title":"While Loop General Format In Pseudocode","text":"Pseudocode <pre><code>// This is the general format of the While statement in pseudocode\n\nWhile condition\n    statement\n    statement\n    etc...\nEnd While\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/while-loop-pre-test-loop/","title":"While-Loop (Pre-Test Loop)","text":"PseudocodeJava <pre><code>// the while-loop (pre-test loop) in pseudocode\n// this loop continues while the condition is true\nWhile (x &lt;= 10)             //starts the do-while loop (a pre-test loop)\n\n    // your code goes here  //code inside the loop goes here\n\nEnd While                   //ends the while-loop\n</code></pre> <pre><code>// the while-loop (pre-test loop) in java\n// this loop continues while the condition is true\nwhile (x &lt;= 10) {           //starts the do-while loop (a pre-test loop)\n    // your code goes here  //code inside the loop goes here\n}                           //ends the while-loop\n</code></pre> <p>Note</p> <ul> <li>Will the code in the loop be executed at least once? (that's a post-test loop)</li> <li>Can the code in the loop be skipped entirely? (that's a pre-test loop)</li> </ul>","boost":1},{"location":"programming/data-structures-and-algorithms/","title":"Data Structures and Algorithms - Index","text":"","boost":1},{"location":"programming/data-structures-and-algorithms/#sorting","title":"Sorting","text":"<ul> <li> <p>Bubble Sort</p> </li> <li> <p>Generic Bubble Sort Using The Comparable Interface In Java</p> </li> <li> <p>Generic Bubble Sort Using The Comparator Interface In Java</p> </li> </ul>","boost":1},{"location":"programming/data-structures-and-algorithms/bubble-sort/","title":"Bubble Sort","text":"<p>A bubble sort sorts the array in multiple phases. Each pass successively swaps the neighboring elements if the elements are not in order.</p> <p>The bubble sort algorithm makes several passes through the array. On each pass, successive neighboring pairs are compared. If a pair is in decreasing order, its values are swapped; otherwise, the values remain unchanged. The technique is called a bubble sort or sinking sort, because the smaller values gradually \"bubble\" their way to the top and the larger values sink to the bottom. After the first pass, the last element becomes the largest in the array. After the second pass, the second-to-last element becomes the second largest in the array. This process is continued until all elements are sorted.</p>","boost":1},{"location":"programming/data-structures-and-algorithms/bubble-sort/#bubble-sort-algorithm","title":"Bubble Sort Algorithm","text":"Pseudocode <pre><code>for (int k = 1; k &lt; list.length; k++) {\n// Perform the kth pass\nfor (int i = 0; i &lt; list.length - k; i++) {\n    if (list[i] &gt; list[i + 1]) \n        swap list[i] with list[i + 1];\n    }\n}\n</code></pre>","boost":1},{"location":"programming/data-structures-and-algorithms/bubble-sort/#improved-bubble-sort-algorithm","title":"Improved Bubble Sort Algorithm","text":"Pseudocode <pre><code>boolean needNextPass = true;\nfor (int k = 1; k &lt; list.length &amp;&amp; needNextPass; k++) {\n    // Array may be sorted and next pass not needed\n    needNextPass = false;\n    // Perform the kth pass\n    for (int i = 0; i &lt; list.length \u2013 k; i++) {\n        if (list[i] &gt; list[i + 1]) {\n            swap list[i] with list[i + 1];\n            needNextPass = true; // Next pass still needed\n        }\n    }\n}\n</code></pre>","boost":1},{"location":"programming/data-structures-and-algorithms/bubble-sort/#bubble-sort_1","title":"Bubble Sort","text":"Java <pre><code>public class BubbleSort {\n    /** Bubble sort method */\n    public static void bubbleSort(int[] list) {\n        boolean needNextPass = true;\n\n        for (int k = 1; k &lt; list.length &amp;&amp; needNextPass; k++) {\n            // Array may be sorted and next pass not needed\n            needNextPass = false;\n            for (int i = 0; i &lt; list.length - k; i++) {\n                if (list[i] &gt; list[i + 1]) {\n                    // Swap list[i] with list[i + 1]\n                    int temp = list[i];\n                     list[i] = list[i + 1];\n                    list[i + 1] = temp;\n\n                    needNextPass = true; // Next pass still needed\n                }\n            }\n        }\n    }\n\n    /** A test method */\n    public static void main(String[] args) {\n        int[] list = {2, 3, 2, 5, 6, 1, -2, 3, 14, 12};\n        bubbleSort(list);\n        for (int i = 0; i &lt; list.length; i++) {\n            System.out.print(list[i] + \" \");\n        }\n    }\n}\n</code></pre>","boost":1},{"location":"programming/data-structures-and-algorithms/bubble-sort/#bubble-sort-using-comaprable","title":"Bubble Sort using Comaprable","text":"Java <pre><code>/**\n * Sorts the specified array of objects using a bubble sort\n * algorithm.\n *\n * @param data the array to be sorted\n */ \npublic static &lt;T extends Comparable&lt;T&gt;&gt; void bubbleSort(T[] data) {\n    int position, scan;\n    T temp;\n    for (position =  data.length - 1; position &gt;= 0; position--) {\n        for (scan = 0; scan &lt;= position - 1; scan++) {\n            if (data[scan].compareTo(data[scan+1]) &gt; 0) {\n                swap(data, scan, scan + 1);\n            }\n        }\n    }\n}\n\n/**\n * Swaps to elements in an array. Used by various sorting algorithms.\n*\n* @param data   the array in which the elements are swapped\n* @param index1 the index of the first element to be swapped\n* @param index2 the index of the second element to be swapped\n*/ \nprivate static &lt;T extends Comparable&lt;T&gt;&gt; void swap(T[] data, int index1, int index2) {\n    T temp = data[index1];\n    data[index1] = data[index2];\n    data[index2] = temp;\n}\n</code></pre> <p>The worst-case time for a bubble sort is O(n^2)</p>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparable-interface-in-java/","title":"Generic Bubble Sort Using The Comparable Interface In Java","text":"<p>Here's an implementation of a generic bubble sort using the Comparable interface in Java</p> Java <pre><code>public class BubbleSort {\n\n    // Generic method to perform bubble sort\n    public static &lt;T extends Comparable&lt;T&gt;&gt; void bubbleSort(T[] array) {\n        int n = array.length;\n        boolean swapped;\n\n        // Outer loop - number of passes\n        for (int i = 0; i &lt; n - 1; i++) {\n            swapped = false;\n\n            // Inner loop - comparing adjacent elements\n            for (int j = 0; j &lt; n - 1 - i; j++) {\n                // Compare adjacent elements using compareTo method\n                if (array[j].compareTo(array[j + 1]) &gt; 0) {\n                    // Swap elements if they are in wrong order\n                    T temp = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = temp;\n                    swapped = true;\n                }\n            }\n\n            // If no swapping occurred in this pass, array is already sorted\n            if (!swapped) {\n                break;\n            }\n        }\n    }\n\n    // Example usage with different types\n    public static void main(String[] args) {\n        // Example with Integers\n        Integer[] intArray = {64, 34, 25, 12, 22, 11, 90};\n        System.out.println(\"Original Integer Array: \" + Arrays.toString(intArray));\n        bubbleSort(intArray);\n        System.out.println(\"Sorted Integer Array: \" + Arrays.toString(intArray));\n\n        // Example with Strings\n        String[] stringArray = {\"Zebra\", \"Apple\", \"Dog\", \"Cat\", \"Bird\"};\n        System.out.println(\"\\nOriginal String Array: \" + Arrays.toString(stringArray));\n        bubbleSort(stringArray);\n        System.out.println(\"Sorted String Array: \" + Arrays.toString(stringArray));\n    }\n}\n</code></pre>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparable-interface-in-java/#generic-method-declaration","title":"Generic Method Declaration:","text":"<pre><code>public static &lt;T extends Comparable&lt;T&gt;&gt; void bubbleSort(T[] array)\n</code></pre> <ul> <li><code>&lt;T extends Comparable&lt;T&gt;&gt;</code> means this method works with any type <code>T</code> that implements the Comparable interface</li> <li>This ensures that the elements can be compared using the compareTo method</li> </ul>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparable-interface-in-java/#the-comparison","title":"The Comparison:","text":"<pre><code>if (array[j].compareTo(array[j + 1]) &gt; 0)\n</code></pre> <ul> <li>Uses the compareTo method defined in the Comparable interface</li> <li>Returns positive if first element is greater, negative if smaller, 0 if equal</li> </ul>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparable-interface-in-java/#optimization","title":"Optimization:","text":"<pre><code>if (!swapped) {\n    break;\n}\n</code></pre> <ul> <li>If no swaps occur in a pass, the array is already sorted</li> <li>This optimization reduces unnecessary iterations</li> </ul>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparable-interface-in-java/#heres-an-example-of-how-to-create-a-custom-class-that-uses-this-sort","title":"Here's an example of how to create a custom class that uses this sort:","text":"Java <pre><code>class Student implements Comparable&lt;Student&gt; {\n    private String name;\n    private int grade;\n\n    public Student(String name, int grade) {\n        this.name = name;\n        this.grade = grade;\n    }\n\n    @Override\n    public int compareTo(Student other) {\n        // Sort by grade\n        return Integer.compare(this.grade, other.grade);\n    }\n\n    @Override\n    public String toString() {\n        return name + \": \" + grade;\n    }\n\n    // Example usage with custom class\n    public static void main(String[] args) {\n        Student[] students = {\n            new Student(\"Alice\", 85),\n            new Student(\"Bob\", 92),\n            new Student(\"Charlie\", 78),\n            new Student(\"David\", 95)\n        };\n\n        System.out.println(\"Before sorting:\");\n        System.out.println(Arrays.toString(students));\n\n        BubbleSort.bubbleSort(students);\n\n        System.out.println(\"After sorting:\");\n        System.out.println(Arrays.toString(students));\n    }\n}\n</code></pre>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparable-interface-in-java/#key-points-about-this-implementation","title":"Key points about this implementation:","text":"<ul> <li>Generics allow the sort to work with any comparable type</li> <li>The implementation is stable (maintains relative order of equal elements)</li> <li>Time complexity is O(n\u00b2) in worst and average cases</li> <li>Space complexity is O(1) as it sorts in-place</li> <li>The optimization can make it run in O(n) time for already sorted arrays</li> </ul>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparable-interface-in-java/#the-sort-will-work-with","title":"The sort will work with:","text":"<ul> <li>Any primitive wrapper classes (Integer, Double, etc.)</li> <li>String</li> <li>Any custom class that implements Comparable</li> <li>Any class that implements Comparable interface properly</li> </ul>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparator-interface-in-java/","title":"Generic Bubble Sort Using The Comparator Interface In Java","text":"","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparator-interface-in-java/#an-implementation-of-a-generic-bubble-sort-using-the-comparator-interface-in-java","title":"An implementation of a generic bubble sort using the Comparator interface in Java","text":"Java <pre><code>import java.util.Comparator;\nimport java.util.Arrays;\n\npublic class BubbleSort {\n\n    // Generic bubble sort method using Comparator\n    public static &lt;T&gt; void bubbleSort(T[] array, Comparator&lt;T&gt; comparator) {\n        int n = array.length;\n        boolean swapped;\n\n        for (int i = 0; i &lt; n - 1; i++) {\n            swapped = false;\n\n            for (int j = 0; j &lt; n - 1 - i; j++) {\n                // Using comparator.compare() instead of compareTo()\n                if (comparator.compare(array[j], array[j + 1]) &gt; 0) {\n                    // Swap elements\n                    T temp = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = temp;\n                    swapped = true;\n                }\n            }\n\n            if (!swapped) {\n                break;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        // Example with Integers - sort in ascending order\n        Integer[] numbers = {64, 34, 25, 12, 22, 11, 90};\n        System.out.println(\"Original Numbers: \" + Arrays.toString(numbers));\n\n        // Using Comparator.naturalOrder()\n        bubbleSort(numbers, Comparator.naturalOrder());\n        System.out.println(\"Sorted Numbers (Ascending): \" + Arrays.toString(numbers));\n\n        // Using Comparator.reverseOrder()\n        bubbleSort(numbers, Comparator.reverseOrder());\n        System.out.println(\"Sorted Numbers (Descending): \" + Arrays.toString(numbers));\n\n        // Example with custom Person class\n        Person[] people = {\n            new Person(\"Alice\", 25),\n            new Person(\"Bob\", 30),\n            new Person(\"Charlie\", 20),\n            new Person(\"David\", 35)\n        };\n\n        // Sort by age\n        System.out.println(\"\\nOriginal People Array: \" + Arrays.toString(people));\n        bubbleSort(people, Comparator.comparing(Person::getAge));\n        System.out.println(\"Sorted by Age: \" + Arrays.toString(people));\n\n        // Sort by name\n        bubbleSort(people, Comparator.comparing(Person::getName));\n        System.out.println(\"Sorted by Name: \" + Arrays.toString(people));\n    }\n}\n\n// Example custom class\nclass Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    @Override\n    public String toString() {\n        return name + \"(\" + age + \")\";\n    }\n}\n</code></pre>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparator-interface-in-java/#lets-also-look-at-some-more-advanced-examples-using-comparator","title":"Let's also look at some more advanced examples using Comparator","text":"Java <pre><code>    public class ComparatorExamples {\n    public static void main(String[] args) {\n        // Example with Student class\n        Student[] students = {\n            new Student(\"Alice\", 85, \"Math\"),\n            new Student(\"Bob\", 92, \"Physics\"),\n            new Student(\"Charlie\", 85, \"Math\"),\n            new Student(\"David\", 78, \"Chemistry\")\n        };\n\n        // Sort by grade (descending) then by name (ascending)\n        Comparator&lt;Student&gt; gradeAndNameComparator = Comparator\n            .comparing(Student::getGrade).reversed()\n            .thenComparing(Student::getName);\n\n        System.out.println(\"Before sorting:\");\n        System.out.println(Arrays.toString(students));\n\n        bubbleSort(students, gradeAndNameComparator);\n\n        System.out.println(\"After sorting (by grade desc then name):\");\n        System.out.println(Arrays.toString(students));\n\n        // Sort by subject, then grade\n        Comparator&lt;Student&gt; subjectAndGradeComparator = Comparator\n            .comparing(Student::getSubject)\n            .thenComparing(Student::getGrade, Comparator.reverseOrder());\n\n        bubbleSort(students, subjectAndGradeComparator);\n\n        System.out.println(\"After sorting (by subject then grade desc):\");\n        System.out.println(Arrays.toString(students));\n    }\n}\n\nclass Student {\n    private String name;\n    private int grade;\n    private String subject;\n\n    public Student(String name, int grade, String subject) {\n        this.name = name;\n        this.grade = grade;\n        this.subject = subject;\n    }\n\n    public String getName() { return name; }\n    public int getGrade() { return grade; }\n    public String getSubject() { return subject; }\n\n    @Override\n    public String toString() {\n        return name + \"(\" + subject + \":\" + grade + \")\";\n    }\n}\n</code></pre>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparator-interface-in-java/#key-differences-from-comparable-implementation","title":"Key differences from Comparable implementation","text":"","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparator-interface-in-java/#method-signature","title":"Method Signature","text":"<ul> <li>No need for T to implement any interface</li> <li>Comparator is passed as a parameter</li> </ul>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparator-interface-in-java/#flexibility","title":"Flexibility","text":"<ul> <li>Can have multiple sorting criteria for the same class</li> <li>Can change sorting behavior without modifying the class</li> <li>Can sort classes you don't have access to modify</li> </ul>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparator-interface-in-java/#common-comparator-methods","title":"Common Comparator Methods","text":"Java <pre><code>// Natural order\nComparator.naturalOrder()\n\n// Reverse order\nComparator.reverseOrder()\n\n// Compare by property\nComparator.comparing(Person::getAge)\n\n// Reverse compare by property\nComparator.comparing(Person::getAge).reversed()\n\n// Multiple criteria\nComparator.comparing(Person::getAge)\n        .thenComparing(Person::getName)\n\n// Custom comparison\nComparator.comparing(Person::getAge, (a, b) -&gt; b - a)\n</code></pre>","boost":1},{"location":"programming/data-structures-and-algorithms/generic-bubble-sort-using-the-comparator-interface-in-java/#the-advantages-of-using-comparator-over-comparable","title":"The advantages of using Comparator over Comparable","text":"<ul> <li>Separation of concerns - sorting logic is separate from the class</li> <li>Multiple sorting strategies without modifying the class</li> <li>Can sort classes that don't implement Comparable</li> <li>Easy to combine multiple sorting criteria</li> <li>Can be changed at runtime</li> </ul>","boost":1},{"location":"programming/inputvalidation/","title":"Input Validation - Index","text":"<ul> <li> <p>getValidNumber() Template Input Validation</p> </li> <li> <p>isInvalid() Template Input Validation</p> </li> <li> <p>One-Function Input Validation Model</p> </li> <li> <p>Two-function Input Validation Model</p> </li> <li> <p>Validating String Data</p> </li> <li> <p>Examples of Common String Library Functions</p> </li> <li> <p>Common Input Values To Test For</p> </li> </ul>","boost":1},{"location":"programming/inputvalidation/common-input-values-to-test-for/","title":"Common Input Values To Test For","text":"<p>Data input is a common process that most programs have to do. As a programmer, it\u2019s your responsibility to test your code and make sure it works as required.</p>","boost":1},{"location":"programming/inputvalidation/common-input-values-to-test-for/#for-string-data-test-for","title":"For String data, test for","text":"<ul> <li><code>null</code> (no entry at all)</li> <li><code>space</code> or <code>spaces</code></li> <li>data that does not meet the program's expectations. For example, instead of <code>Y</code> or <code>N</code>, the user enters <code>abc</code></li> </ul>","boost":1},{"location":"programming/inputvalidation/common-input-values-to-test-for/#for-numeric-data-test-for","title":"For numeric data, test for","text":"<ul> <li><code>null</code> (no entry at all)</li> <li><code>space</code> or <code>spaces</code></li> <li>non-numeric data such as <code>abc</code></li> <li>negative numbers</li> <li>zero</li> <li>negative zero</li> <li>a decimal number such as <code>3.1415</code></li> <li>a number that is out of range. For example, entering 15 for the number of the month</li> <li>a number that is not reasonable for the data. For example, entering an age of 3541, or an age of -3</li> </ul>","boost":1},{"location":"programming/inputvalidation/common-input-values-to-test-for/#for-yes-or-no-data-test-for","title":"For Yes or No data, test for","text":"<ul> <li><code>null</code> (no entry at all)</li> <li><code>space</code> or <code>spaces</code></li> <li>data that does not meet the program's expectations. For example, instead of <code>Y</code> or <code>N</code>, the user enters <code>abc</code></li> </ul> <p>Yes, you must test ALL these conditions for EVERY input! Your users certainly will. Don\u2019t assume your code has been written perfectly. ALWAYS test your code to verify you are the genius you think you are.</p> <p>It\u2019s been estimated that 80% of every program is input validation and data scrubbing. If you use the standard input validation routines, you will write better code and finish faster.</p>","boost":1},{"location":"programming/inputvalidation/examples-of-common-string-library-functions/","title":"Examples of Common String Library Functions","text":"Java <pre><code>    theLength = myString.length()\n    If firstString.equalsToIgnoreCase(secondString)\n    If firstString.compareTo(secondString)\n    If firstString.compareToIgnoreCase(secondString)\n    If firstString.contains(\"xxx\")\n    If firstString.startsWith(\"Jan\")\n    myString = myString.trim()\n</code></pre>","boost":1},{"location":"programming/inputvalidation/getvalidnumber-template-input-validation/","title":"getValidNumber() Function Template Input Validation","text":"<pre><code>// Pseudocode\n// Change this function to meet the program\u2019s requirements\nFunction Integer getValidNumber (String msg, Integer low, Integer high, Integer sentinel)\n    Declare Integer newValue\n\n    newValue = getInteger(msg)\n\n    //continue looping while the function isInvalid(...) returns true\n    While isInvalid(newValue, low, high, sentinel)\n        Display \"Invalid Value\"\n        newValue = getInteger(msg)\n    End While\n\n    Return newValue //returns a good value\n\nEnd Function\n</code></pre>","boost":1},{"location":"programming/inputvalidation/isinvalid-template-input-validation/","title":"isInvalid() Function Template Input Validation","text":"<pre><code>// Pseudocode\n// Change this function to meet the program\u2019s requirements\n\nFunction Boolean isInvalid (Integer newValue, Integer low,\n                            Integer high, Integer sentinel)\n    If newValue == sentinel\n        Return false // returning false since this is valid\n    End If\n\n    If newValue &lt; low\n      Return true // returning true since invalid\n    End If\n\n    If newValue &gt; high\n        Return true // returning true to keep looping\n    End If\n\n    If newValue MOD 2 = 0 //add as many conditions\n                          // as needed for the problem\n        Return true //in this case \u2018even\u2019 numbers are invalid\n    End If\n\n    Return false //the value of newValue is OK!\n\nEnd Function\n</code></pre>","boost":1},{"location":"programming/inputvalidation/one-function-input-validation-model/","title":"One-Function Input Validation Model","text":"<p>The below code uses the standard input while-loop with a priming read and a sentinel. Use the One-Function Input Validation model when the input validation condition is simple and does not use more than one AND or OR statement. The below code determines the lowest and highest number entered by the user.</p>","boost":1},{"location":"programming/inputvalidation/one-function-input-validation-model/#main","title":"Main()","text":"<pre><code>// Pseudocode\nDeclare Global Constant Integer SENTINEL = -1\nDeclare Global Constant Integer LOW_VALUE = 0\n\nMain\n    Declare Integer newValue, lowestValue, highestValue\n    String message = \"Enter number &gt; \", LOW_VALUE, \". \", \"Enter \", SENTINEL, \" to quit\"\n\n    newValue = getValidNumber (message) //priming read\n\n    If newValue != SENTINEL //continues while true\n        highestValue = newValue\n        lowestValue = newValue\n\n        While (newValue != SENTINEL)\n\n            If newValue &gt; highestValue\n                highestValue = newValue\n            End If\n\n            If newValue &lt; lowestValue\n                    lowestValue = newValue\n            End If\n\n            newValue = getValidNumber(message)\n\n        End While\n\n        Display \"Highest value= \", highestValue\n        Display \"Lowest value = \", lowestValue\n    Else\n        Display \"No numbers entered.\"\n    End If\n\nEnd Main\n</code></pre>","boost":1},{"location":"programming/inputvalidation/one-function-input-validation-model/#getvalidnumber-the-one-function-input-validation-routine","title":"getValidNumber() - The One-Function Input Validation Routine","text":"<pre><code>// Pseudocode\n// The One-Function Input Validation routine!\n\nFunction Integer getValidNumber (String msg)\n    Declare Integer newValue\n    newValue = getInteger(msg) //the priming read\n\n    //loop while the input value is invalid\n    While newValue &lt; LOW_VALUE AND newValue != SENTINEL\n        Display \"Invalid Value\"\n        newValue = getInteger(msg)\n    End While\n    Return newValue //returns a good value\nEnd Function\n</code></pre> <p>The while loop in <code>getValidNumber(...)</code> continues while the condition is true - in this case, it is true because the data is invalid. The condition should continue when invalid values are found, not valid values.</p>","boost":1},{"location":"programming/inputvalidation/two-function-input-validation-model/","title":"Two-function Input Validation Model","text":"<p>When the validation condition becomes complicated, use the below two-function input validation model. The function shown below, the <code>getValidNumber(...)</code> model, is good for validating almost anything. Study it and be able to easily reproduce it when you need to validate input\u2014and input could mean data from a user\u2019s keyboard, a file being read, a random number function, or even the movement of holographic lightsabers.</p> <p>The below code counts the number of odd numbers between <code>10</code> and <code>100</code> entered by the user and displays the count to the user at the end of the program.</p>","boost":1},{"location":"programming/inputvalidation/two-function-input-validation-model/#main","title":"Main()","text":"<pre><code>// Pseudocode\nMain\n    Declare Constant Integer LOW = 10\n    Declare Constant Integer HIGH = 100\n    Declare Constant Integer SENTINEL = -99\n\n    Declare Integer newValue\n    Declare Integer counter = 0\n\n    String message = \"Enter an odd number from \", LOW, \"-\", HIGH, \", \", SENTINEL, \" to quit\"\n\n    //priming read\n    newValue = getValidNumber(message, LOW, HIGH, SENTINEL)\n\n    While (newValue != SENTINEL) //continues while true\n\n        counter++\n\n        newValue = getValidNumber(message, LOW, HIGH, SENTINEL)\n\n    End While\n\n    Display counter + \" numbers were entered.\"\n\nEnd Main\n</code></pre> <p>Don\u2019t add any other code such as if-statements or while-loops inside the `getValidNumber(...) function. Use this coding structure as shown.</p>","boost":1},{"location":"programming/inputvalidation/two-function-input-validation-model/#getvalidnumber","title":"getValidNumber()","text":"<pre><code>// Pseudocode\nFunction Integer getValidNumber (String msg,\n                                  Integer low,\n                                  Integer high,\n                                  Integer sentinel)\n    Declare Integer newValue\n\n    newValue = getInteger(msg)\n\n    //continue looping while the function isInvalid(\u2026) returns true\n    While isInvalid(newValue, low, high, sentinel)\n        Display \"Invalid Value\"\n        newValue = getInteger(msg)\n    End While\n\n    Return newValue //returns a good value\n\nEnd Function\n</code></pre>","boost":1},{"location":"programming/inputvalidation/two-function-input-validation-model/#isinvalid","title":"isInvalid()","text":"<pre><code>// Pseudocode\n//Change this function to meet the program\u2019s requirements\nFunction Boolean isInvalid (Integer newValue, Integer low,\n                            Integer high, Integer sentinel)\n    If newValue == sentinel\n        Return false // returning false since this is valid\n    End If\n\n    If newValue &lt; low\n      Return true // returning true since invalid\n    End If\n\n    If newValue &gt; high\n        Return true // returning true to keep looping\n    End If\n\n    If newValue MOD 2 = 0 //add as many conditions\n                          // as needed for the problem\n        Return true //in this case \u2018even\u2019 numbers are invalid\n    End If\n\n    Return false //the value of newValue is OK!\n\nEnd Function\n</code></pre> <p>Those are the two input validation models to know. You should be able to create similar functions for validating string input by following the sample code above.</p> <p>Note</p> <p>The above code confuses some people because the value True is being returned when the data is invalid. (It is True that the data is invalid). Be sure you understand this code so you can reproduce it easily!</p>","boost":1},{"location":"programming/inputvalidation/validating-string-data/","title":"Validating String Data","text":"<p>To validate String data, you may have to make the inputted value lowercase (or uppercase) and then compare. In some languages, you can use an ignorecase function in the comparison instead.</p> <p>With a little bit of thought and research into String library functions, you would come up with a better method with fewer lines of code such as this:</p> <pre><code>// Pseudocode\nupperCaseDataEntry = toUpperCase(dataEntry) //convert to upper case\nIf upperCaseDataEntry == \"Y\"\n    OR upperCaseDataEntry == \"YE\"\n    OR upperCaseDataEntry == \"YES\"\n    OR upperCaseDataEntry == \"N\"\n    OR upperCaseDataEntry == \"NO\"\nThen\n    //etc.\n</code></pre> <p>Note</p> <p>In some languages, like Java, you can\u2019t use <code>==</code> to compare Strings. In Java you have to use the String <code>equals()</code> function: <pre><code>// Java\nif (myString.equals(\"B\")) {\n    //etc.\n</code></pre></p>","boost":1},{"location":"programming/menus/","title":"Menus - Index","text":"<ul> <li>Practice Menu</li> </ul>","boost":1},{"location":"programming/menus/practicemenu/","title":"Practice Menu","text":"","boost":1},{"location":"programming/menus/practicemenu/#practice-menu-in-java","title":"Practice Menu In Java","text":"<pre><code>/*******************************************************************************************************************\n  * PracticeMenu.java\n  * \n  * To Do: \n  *    Add a sub-menu to the main menu\n  *    Create all the sub-menu elements needed\n  *    Test all the menu options\n  * \n  *******************************************************************************************************************/\npublic class PracticeMenu {\n\n    public static void main(String[] mainArgs) {\n        final int DISPLAY_HELLO = 1;\n        final int DISPLAY_PI = 2;\n        final int DISPLAY_SUB_MENU_01 = 3;\n        final int EXIT = 4;\n\n        int menuSelection = 0; \n        do {\n            displayMainMenu();\n            menuSelection = getInteger(\"Enter your Selection\");    \n\n            switch (menuSelection) {\n                case DISPLAY_HELLO: \n                    displayHello();\n                    break;\n                case DISPLAY_PI:\n                    displayPI();\n                    break;\n                case DISPLAY_SUB_MENU_01:\n                    processSubMenu();\n                    break;\n                case EXIT:\n                    break;\n                default:\n                    System.err.println(\"Invalid menu number. Please try again.\"); \n                    break;\n            }\n        } \n        while (menuSelection != EXIT);\n        System.out.println(\"Goodbye!\");\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    private static void displayMainMenu() {\n        System.out.println(\"\");\n        System.out.println(\"****************************************\");\n        System.err.println(\"          Main Menu         \");\n        System.out.println(\"****************************************\");\n        System.out.println(\"       1. Display Hello\");\n        System.out.println(\"       2. Display PI\");\n        System.out.println(\"       3. Display Sub Menu\");\n        System.out.println(\"       4. Exit\");\n        System.out.println(\"\");\n    }\n\n    private static void displayHello () {\n        System.out.println(\"Hello\");        \n    }\n    private static void displayPI () {\n        System.out.println(\"pi = 3.1415 etc...\");        \n    }\n\n    //------------------------------------------------------------------------\n\n    private static void processSubMenu(){\n\n        final int SUB_MENU_DISPLAY_NAME = 1;\n        final int SUB_MENU_DISPLAY_RANDOM_NUMBER = 2;\n        final int SUB_MENU_EXIT = 3;\n\n        int subMenuSelection = 0;\n\n        displaySubMenu();\n        subMenuSelection = getInteger(\"Enter your Selection\");    \n\n        switch (subMenuSelection) {\n            case SUB_MENU_DISPLAY_NAME: \n                displayName();\n                processSubMenu();\n                break;\n            case SUB_MENU_DISPLAY_RANDOM_NUMBER:\n                displayRandomNumber();\n                processSubMenu();\n                break;\n            case SUB_MENU_EXIT:\n                break;\n            default:\n                System.err.println(\"Invalid menu number. Please try again.\"); \n                break;\n        }\n\n        //copy code to here\n        //on option 3, return to the main menu\n    }\n\n    //add sub menu methods here\n\n    private static void displaySubMenu() {\n        System.out.println(\"\");\n        System.out.println(\"****************************************\");\n        System.err.println(\"          SubMenu Options \");\n        System.out.println(\"****************************************\");\n        System.out.println(\"       1. Display a Name \");\n        System.out.println(\"       2. Display a random number\");\n        System.out.println(\"       3. Return to Main Menu\");\n        System.out.println(\"\");\n    }\n\n    private static void displayName() {\n        String name = getString(\"What is your name? \");\n        System.out.println(name);\n    }\n\n    private static void displayRandomNumber() {\n        int randomNumber = getRandomNumber(0, 100);\n        System.out.println(randomNumber);\n    }\n\n}\n</code></pre>","boost":1},{"location":"programming/methods/","title":"Methods - Index","text":"<p>Methods can be used to define reusable code as well as to organize and simplify coding.</p> <ul> <li>The getString() Method</li> <li>The getInteger() Method</li> <li>The getDouble() Method</li> <li>The getYorN() Method</li> <li>The closeScanner() Method</li> <li>The getRandomNumber() Method</li> <li>Generalized Input Functions</li> <li>Methods Terminology</li> </ul>","boost":1},{"location":"programming/methods/closescanner/","title":"The closeScanner() Method","text":"PseduocodeJava <pre><code>Method Real closeScanner()\n    If Scanner is not null\n        Close scanner\n    Else\n        Display \"Error\"\n    End If\n\nEnd Method\n</code></pre> <pre><code>/** Closes the scanner.\n */\npublic static void closeScanner() {\ntry { \n    if(keyboard != null) {\n        keyboard.close(); \n    }\n} \ncatch (Exception e) { // (Exception) catches all errors java might throw here\n    System.err.println(\"Error closing reader.\");\n}\n}\n</code></pre>","boost":1},{"location":"programming/methods/generalized-input-method-in-java/","title":"Generalized Input Methods In Java","text":"","boost":1},{"location":"programming/methods/generalized-input-method-in-java/#generalizedinputmethodsjava","title":"GeneralizedInputMethods.java","text":"<pre><code>//-------------------------------------------------------------------\n// Generalized Input Functions In Java\n// This program gets input from a user using Scanner. \n// Use at your own risk. No guarantee this code works \n// in all situations.\n//-------------------------------------------------------------------\n\nimport java.util.Scanner;\n\npublic class Input {\n   // Putting the Scanner object here makes it global so it does not\n   // have to be passed to modules.\n   static Scanner keyboard = new Scanner(System.in);\n\n   public static void main(String[] args) {\n      /** Main () -\n        * This program demonstrates various generalized input routines. \n        * This program also demonstrates generating a random number.\n        * @param args Arguments can be passed to this program but \n        * they are not used. \n        */\n\n      do {\n         String stringData = getString(\"Please enter a word or two\");\n         System.out.println(\"This is what you entered: \" + stringData);\n\n         int intData = getInteger(\"Please enter an integer\");     \n         System.out.println(\"This is what you entered: \" + intData);\n\n         //Generating random numbers. \n         for (int i = 0; i &lt; 5; i++) {\n            System.out.println(\"random number \" + (i + 1) \n             + \": \" + getRandomNumber(0, 100));\n         }\n\n      } while (getYorN(\"\\nDo you want to start over? (y/n)\"));\n\n      //close the Scanner\n      closeScanner();\n\n      System.out.println(\"Program Terminating Normally\");\n   }//end of main\n\n   public static void displayGoodbye(){\n       System.out.println(\"Goodbye!\");\n   }\n\n   //////////////////////////////////////////////////////////////////\n   // GENERALIZED INPUT FUNCTIONS \n   //////////////////////////////////////////////////////////////////\n   /** Gets a String from the keyboard. Rejects null entry or any \n     * number of spaces.\n     * @param msg is the text that will be displayed the user to\n     * ask them to enter a value.\n     * @return Returns a String from the keyboard. \n     */ \n   public static String getString(String msg) {\n      String answer = \"\";\n      System.out.println(msg);\n      try {\n         answer = keyboard.nextLine(); \n      }\n      catch (Exception e) {\n         System.err.println(\"Error reading input from user. \" \n           + Ending program.\");\n         System.exit(-1);\n      } \n\n      while (answer.replace(\" \", \"\").equals(\"\")) {\n         System.err.println(\"Error: Missing input.\");\n         try {\n            System.out.println(msg);\n            answer = keyboard.nextLine(); \n         }\n         catch (Exception e) {\n            System.err.println(\"Error reading input from user. \"\n             + Ending program.\");\n            System.exit(-1);\n         } \n      }\n      return answer;            \n   }\n\n   //----------------------------------------------------------------\n   /** Gets an Integer from the keyboard. Rejects null, spaces and\n     * non-integers.\n     * @param msg is the text that will be displayed the user to ask\n     * them to enter a number.\n     * @return Returns an int from the keyboard. \n     */  \n   public static int getInteger(String msg) {\n      System.out.println(msg);\n      while (!keyboard.hasNextInt()) {\n         keyboard.nextLine();\n         System.err.println(\"Invalid integer. Try again.\");\n      }\n      int number = keyboard.nextInt();\n      keyboard.nextLine(); //flushes the buffer\n      return number;\n   }\n\n   //----------------------------------------------------------------\n   /** Gets a Double from the keyboard. Rejects null, spaces and\n     * non-numbers.\n     * @param msg is the text that will be displayed the user to\n     * ask them to enter a number.\n     * @return Returns a double from the keyboard. \n     */ \n   public static double getDouble(String msg) {\n      System.out.println(msg);\n      while (!keyboard.hasNextDouble()) {\n         keyboard.nextLine();\n         System.err.println(\"Invalid number. Try again.\");\n      }\n      double number = keyboard.nextDouble();\n      keyboard.nextLine(); //flushes the buffer\n      return number;\n   }\n\n   //----------------------------------------------------------------\n   /** Gets a Yes or No answer from the keyboard. Calls getString\n     * to rejects null input and spaces.\n     * @param msg is the text that will be displayed the user.\n     * @return Returns a boolean value. True = yes; False = no. \n     */ \n   public static boolean getYorN(String msg) {\n      String answer = getString(msg);\n\n      while (answer.compareToIgnoreCase(\"y\")   != 0 \n          &amp;&amp; answer.compareToIgnoreCase(\"yes\") != 0 \n          &amp;&amp; answer.compareToIgnoreCase(\"n\")   != 0 \n          &amp;&amp; answer.compareToIgnoreCase(\"no\")  != 0) {\n\n         if (answer.replace(\" \", \"\").equals(\"\")) {\n            System.err.println(\"Error: Missing y/n input.\");\n         } else {\n            if (answer.compareToIgnoreCase(\"y\")   != 0 \n             &amp;&amp; answer.compareToIgnoreCase(\"yes\") != 0 \n             &amp;&amp; answer.compareToIgnoreCase(\"n\")   != 0 \n             &amp;&amp; answer.compareToIgnoreCase(\"no\")  != 0) {\n               System.err.println(\"Error: Unexpected input.\");\n            }\n         }\n         answer = getString(msg);\n      } \n\n      if  (answer.compareToIgnoreCase(\"y\")   == 0  \n        || answer.compareToIgnoreCase(\"yes\") == 0) {\n         return true;\n      } \n      else {\n         return false;\n      }\n   }\n\n   //----------------------------------------------------------------\n   /** Closes the scanner.\n     */ \n   public static void closeScanner() {\n      try { \n         if(keyboard != null) {\n            keyboard.close(); \n         }\n      } \n     // (Exception) catches all errors java might throw here\n      catch (Exception e) { \n         System.err.println(\"Error closing reader.\");\n      }\n   }\n   //----------------------------------------------------------------\n   /** Generates a random number between low and high, inclusive.\n     * @param low is the smallest number that will be randomly \n     * generated.\n     * @param high is the largest number that will be randomly \n     * generated.\n     * @return Returns the random number as an integer.\n     */\n   public static int getRandomNumber (int low, int high) {\n      return (int)(Math.random() * ((high + 1) - low)) + low;\n   }\n\n}//end of class\n</code></pre>","boost":1},{"location":"programming/methods/getdouble/","title":"The getDouble() Method","text":"PseduocodeJava <pre><code>// getReal() function in pesudocode\n\nFunction Real getReal (String msg)\n    Declare Real newValue\n\n    Display msg\n    Input newValue\n\n    While newValue is not a Real number\n        Display \"Invalid number.\"\n        Display msg\n        Input newValue\n    End While\n\n    Return newValue\nEnd Function\n</code></pre> <pre><code>/** Gets a Double from the keyboard. Rejects null, spaces and non-numbers.\n * @param msg is the text that will be displayed the user to ask them to enter a number.\n * @return Returns a double from the keyboard. \n */ \npublic static double getDouble(String msg) {\n  System.out.println(msg);\n  while (!keyboard.hasNextDouble()) {\n  keyboard.nextLine();\n  System.err.println(\"Invalid number. Try again.\");\n  }\n  double number = keyboard.nextDouble();\n  keyboard.nextLine(); //flushes the buffer\n  return number;\n}\n</code></pre>","boost":1},{"location":"programming/methods/getinteger/","title":"The getInteger() Method","text":"PseduocodeJava <pre><code>// getInteger() method in pesudocode\n\nMethod Integer getInteger (String msg)\n    Declare Integer newValue\n\n    Display msg\n    Input newValue\n\n    While newValue is not an Integer\n        Display \"Invalid number.\"\n        Display msg\n        Input newValue\n    End While\n\n    Return newValue\nEnd Method\n</code></pre> <pre><code>/** Gets an Integer from the keyboard. Rejects null, spaces and non-integers.\n * @param msg is the text that will be displayed the user to ask them to enter a number.\n * @return Returns an int from the keyboard. \n */  \npublic static int getInteger(String msg) {\n    System.out.println(msg);\n    while (!keyboard.hasNextInt()) {\n        keyboard.nextLine();\n        System.err.println(\"Invalid integer. Try again.\");\n    }\n    int number = keyboard.nextInt();\n    keyboard.nextLine(); //flushes the buffer\n    return number;\n}\n</code></pre>","boost":1},{"location":"programming/methods/getrandomnumber/","title":"The getRandomNumber() Method","text":"","boost":1},{"location":"programming/methods/getrandomnumber/#developing-a-getrandomnumber-method","title":"Developing a getRandomNumber Method","text":"<p>All programming languages have a way to generate a random number. Well, that\u2019s not quite true. No software can generate a truly random number\u2014the closest software can do is to generate a good-enough random number.</p> <p>Here is a pseudocode method to get a random number:</p> <pre><code>randomNumber = Math.random()\n</code></pre> <p>The Math function will return a value from 0 to 1, not including 1. But what if you want an integer from 0 to 100? The calling program will have to convert the return value using a mathematical formula such as this:</p> <pre><code>Declare Integer randomNumber\nrandomNumber = Math.random() * 100\n</code></pre> <p>Every time a program needs a random number that does not start with 0, such as a random number from 10 to 20, you will have to write a conversion in the program over and over again. That\u2019s a waste of your valuable time. To generalize the function, let\u2019s do those conversions in a getRandomNumber() method instead.</p> <p>This is a method in pseudocode named getRandomNumber (low, high) that will pass the lowest and the highest value the program wants generated, and then use those values to generate and return a random number between those numbers, inclusive.</p> <p>To solve this: first try just using the low value to restrict the random number, then work on restricting the formula to the high value.</p> <p>getRandomNumnber IPO (Input Processing Output) Chart</p> Input Processing Output Two integers: low and high Generate a random number between the low and high numbers, inclusive of each Return a random number between the input parameters, inclusive <p>Assume <code>Math.Random()</code> returns a Real number from 0 to 1, not including the number 1. And it will come in handy to remember the concept of integer truncation for this problem!</p> <p>Note: Truncating Real Numbers</p> <p>Integers are round numbers. If you set an integer to a Real number, the decimal portion of the number is discarded. This comes in handy in programming so it is something to be aware of.</p> <p>Here is one solution:</p>","boost":1},{"location":"programming/methods/getrandomnumber/#getrandomnumber-method-in-pseudocode","title":"getRandomNumber() Method in Pseudocode","text":"<pre><code>Method Integer getRandomNumber(Integer low, Integer high)\n    Declare Integer randomNbr\n\n    randomNbr = (Math.random() * ((high + 1) - low)) + low;\n\n    Return randomNbr\nEnd Method\n</code></pre> <p>Let\u2019s test that code by plugging in some sample numbers.</p> <p>When we want a random number from 11 to 22, including 11 and 22, here is how the math works out:</p> <pre><code>(Math.random() * ((22 + 1) - 11)) + 11\n(Math.random() * (23 \u2013 11)) + 11\n(Math.random() * 12) + 11\n</code></pre> <p>Now let\u2019s imagine the Math.random function returns extreme values: 0 and then .999</p> <p>First let\u2019s plug in 0:</p> <pre><code>(0 * 12) + 11\n(0) + 11\n11\n</code></pre> <p>So, the number 11 is the lowest value that will be returned.</p> <p>Now let\u2019s plug in .999:</p> <pre><code>(.999 * 12) + 11\n(11.998) + 11\n22.998\n22\n</code></pre> <p>And returning an Integer will strip off the numbers to the right of the decimal, so 22 is the highest value that will be returned.</p>","boost":1},{"location":"programming/methods/getrandomnumber/#getrandomnumber-method-in-java","title":"getRandomNumber() Method in Java","text":"<pre><code>/** Generates a random number between low and high, inclusive.\n * @param low is the smallest number that will be randomly generated.\n * @param high is the largest number that will be randomly generated.\n * @return Returns the random number as an integer.\n */\npublic static int getRandomNumber (int low, int high) {\n  return (int)(Math.random() * ((high + 1) - low)) + low;\n}\n</code></pre>","boost":1},{"location":"programming/methods/getstring/","title":"The getString() Method","text":"PseduocodeJava <pre><code>Method String getString (String msg)\n    Declare String newValue\n\n    Display msg\n    Input newValue\n\n    While newValue is null or spaces\n        Display \"Error: Missing input.\"\n        Display msg\n        Input newValue\n    End While\n\n    Return newValue\nEnd Method\n</code></pre> <pre><code>/** Gets a String from the keyboard. Rejects null entry or any \n * number of spaces.\n * @param msg is the text that will be displayed the user to\n * ask them to enter a value.\n * @return Returns a String from the keyboard. \n*/ \n\npublic static String getString(String msg) {\n    String answer = \"\";\n    System.out.println(msg);\n    try {\n        answer = keyboard.nextLine(); \n    } catch (Exception e) {\n        System.err.println(\"Error reading input from user. \" \n            + Ending program.\");\n        System.exit(-1);\n    } \n\n    while (answer.replace(\" \", \"\").equals(\"\")) {\n        System.err.println(\"Error: Missing input.\");\n        try {\n            System.out.println(msg);\n            answer = keyboard.nextLine(); \n        } catch (Exception e) {\n            System.err.println(\"Error reading input from user. \"\n                + Ending program.\");\n            System.exit(-1);\n        } \n    }\n    return answer;            \n}\n</code></pre>","boost":1},{"location":"programming/methods/getyorn/","title":"The getYorN() Method","text":"<p>The below method asks the user to enter <code>Y</code> or <code>N</code> using the generalized <code>getString()</code> method</p> PseduocodeJava <pre><code>Method Boolean getYesOrNo (String msg)\n    Declare String newValue\n\n    Display msg\n    newValue = getString(msg)\n\n    While uppercase(newValue) is not \"Y\"\n    AND uppercase(newValue) is not \"N\"\n\n        Display \"Invalid entry. Should be Y or N\"\n        newValue = getString(msg)\n\n    End While\n\n    If newValue is \"Y\" Then\n        Return true\n    End If\n    Return false // newVaLUE IS \"N\"\nEnd Method\n</code></pre> <pre><code>/** Gets a Yes or No answer from the keyboard. Calls getString\n * to rejects null input and spaces.\n * @param msg is the text that will be displayed the user.\n * @return Returns a boolean value. True = yes; False = no. \n*/ \n\npublic static boolean getYorN(String msg) {\nString answer = getString(msg);\n\nwhile (answer.compareToIgnoreCase(\"y\")   != 0 \n    &amp;&amp; answer.compareToIgnoreCase(\"yes\") != 0 \n    &amp;&amp; answer.compareToIgnoreCase(\"n\")   != 0 \n    &amp;&amp; answer.compareToIgnoreCase(\"no\")  != 0) {\n\n    if (answer.replace(\" \", \"\").equals(\"\")) {\n        System.err.println(\"Error: Missing y/n input.\");\n    } else {\n        if (answer.compareToIgnoreCase(\"y\")   != 0 \n        &amp;&amp; answer.compareToIgnoreCase(\"yes\") != 0 \n        &amp;&amp; answer.compareToIgnoreCase(\"n\")   != 0 \n        &amp;&amp; answer.compareToIgnoreCase(\"no\")  != 0) {\n            System.err.println(\"Error: Unexpected input.\");\n            }\n        }\n        answer = getString(msg);\n    } \n\n    if  (answer.compareToIgnoreCase(\"y\")   == 0  \n        || answer.compareToIgnoreCase(\"yes\") == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n</code></pre> <p>Notice that <code>getYesOrNo()</code> uses <code>getString()</code>. Why is that? Because <code>getString()</code> is a generalized input method that can return any kind of string such as <code>Y</code> or <code>N</code>.</p>","boost":1},{"location":"programming/methods/getyorn/#the-getstring-method-in-pseduocode-used-in-the-getyorn-method","title":"The getString() Method in Pseduocode used in The getYorN() Method","text":"PseduocodeJava <pre><code>Method String getString (String msg)\n    Declare String newValue\n\n    Display msg\n    Input newValue\n\n    While newValue is null or spaces\n        Display \"Error: Missing input.\"\n        Display msg\n        Input newValue\n    End While\n\n    Return newValue\nEnd Method\n</code></pre> <pre><code>/** Gets a String from the keyboard. Rejects null entry or any \n * number of spaces.\n * @param msg is the text that will be displayed the user to\n * ask them to enter a value.\n * @return Returns a String from the keyboard. \n*/ \n\npublic static String getString(String msg) {\n    String answer = \"\";\n    System.out.println(msg);\n    try {\n        answer = keyboard.nextLine(); \n    } catch (Exception e) {\n        System.err.println(\"Error reading input from user. \" \n            + Ending program.\");\n        System.exit(-1);\n    } \n\n    while (answer.replace(\" \", \"\").equals(\"\")) {\n        System.err.println(\"Error: Missing input.\");\n        try {\n            System.out.println(msg);\n            answer = keyboard.nextLine(); \n        } catch (Exception e) {\n            System.err.println(\"Error reading input from user. \"\n                + Ending program.\");\n            System.exit(-1);\n        } \n    }\n    return answer;            \n}\n</code></pre>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/","title":"Modules and Functions Terminology","text":"","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#method","title":"Method","text":"<p>Another name for module or function used in object-oriented programming. A method definition consists of its method name, parameters, return value type, and body.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#method-header","title":"Method header","text":"<p>The first line of a group of lines of code that are called and executed. The method header specifies the modifiers, return value type, method name, and parameters of the method.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#return-variable-type","title":"Return variable type","text":"<p>The variable type of the variable being returned from a function to the calling statement.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#ipo-chart","title":"IPO Chart","text":"<p>Input-Processing-Output. The sequence of tasks in a well-structured program.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#function","title":"Function","text":"<p>A group of code that returns a value to the calling statement.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#function-header","title":"Function header","text":"<p>The first line of a group of lines of code that returns a value to the calling statement.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#calling-statement","title":"Calling statement","text":"<p>The statement used to start a function. After the function ends, control of the program returns to the calling statement.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#parameters","title":"Parameters","text":"<p>Data passed to a module or function. See Arguments.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#return","title":"Return","text":"<p>Used to return from a function to the calling statement. Usually returns a value.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#local-variable","title":"Local variable","text":"<p>A local variable is declared in a function and is only known in that function. Its scope is local.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#local-constant","title":"Local constant","text":"<p>A local constant is declared in a function and is only known in that function. Its scope is local.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#pass-by-reference","title":"Pass by reference","text":"<p>This refers to passing a variable to a module or function so the code inside the module or function can update the variable\u2019s value. In Java this is only possible for arrays.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#pass-by-value","title":"Pass by value","text":"<p>This refers to passing the value of a variable to a module or function so the variable is local in scope. The code inside the module of function cannot change the original variable in the calling routine.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#arguments","title":"Arguments","text":"<p>A list of variables being passed to a module or function. See parameters.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#scope","title":"Scope","text":"<p>Refers to where a variable or constant can be used. See global and local.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#local-scope","title":"Local scope","text":"<p>The scope of a variable or constant. Local scope is limited to the function where the variable or constant is declared.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#hierarchy-chart","title":"Hierarchy Chart","text":"<p>A chart of modules and functions in a program. Used for design and for documentation.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#global-variables","title":"Global variables","text":"<p>A variable known to the entire program must be declared globally. Do not create global variables unless approved by your teacher or manager. Global variables make debugging difficult.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#global-constant","title":"Global constant","text":"<p>A constant known to the entire program must be declared globally. OK to use because they do not change.</p>","boost":1},{"location":"programming/oop/","title":"Object-Oriented Programming (OOP) - Index","text":"<ul> <li>Object-Oriented Programming</li> <li>Object-Oriented Programming Terminology</li> <li>Object-Oriented Programming Review Questions</li> </ul>","boost":1},{"location":"programming/oop/object-oriented-programming/","title":"Object-Oriented Programming (OOP)","text":"<p>What are objects? An employee, a hero, a house, a television remote - just about anything you can picture in the real world can be simulated as a software object. Object-Oriented Programming (OOP) is another way of looking at software.</p>","boost":1},{"location":"programming/oop/object-oriented-programming/#classes-and-objects","title":"Classes and Objects","text":"<p>The class (file) is the blueprint for creating an actual object. A good analogy is a house\u2019s set of blueprints and the actual house itself. You can look at a blueprint (the class), but you can\u2019t actually walk into it. You have to build the actual house first (the object, also called an instance of the class).</p> <p>Key Concept</p> <p>Classes and Objects do not run by themselves. They just are. Very Zen. Objects need to be created and used in a Driver Program. The Driver Program does all the work of creating objects, validating input data, telling the object to change its data, printing its data, and more.</p> <p>Here is some code from a driver program that creates a House object:</p> <pre><code>// Pseudocode\n//The below line creates a variable, myHouse, of the type House.\n//myHouse has been named, but it doesn\u2019t exist yet.\n//Note that House is a variable type like String or Integer.\n//But it is a variable type YOU created!\nDeclare House myHouse\n\n//The below line creates the actual object, myHouse, of the type House.\nmyHouse = New House( )\n</code></pre> <p>Now you can do things to myHouse like store and change data. You can move in furniture and walk around in it, metaphorically speaking.</p> <pre><code>// Pseudocode\n//The below line creates a variable, myHouse, of the type House\n//and it creates the actual object, myHouse, of the type House\n//all in one line.\nDeclare House myHouse = New House( )\n\n//Creating another house object called yourHouse:\nDeclare House yourHouse = New House( )\n</code></pre> <p>An array of objects can be created like this:</p> <pre><code>// Pseudocode\nDeclare Person [ ] people = New Person [10]\n</code></pre> <p>This doesn\u2019t create the Person objects - it creates an array of 10 elements to hold Person objects. A program could create the first object in the array like this:</p> <pre><code>// Pseudocode\npeople[0] = New Person( )\n</code></pre>","boost":1},{"location":"programming/oop/object-oriented-programming/#constructors","title":"Constructors","text":"<p>When an object is created, a method in the class called its constructor is executed. Look at this line of code:</p> <pre><code>// Pseudocode\nHouse myHouse = New House ()\n</code></pre> <p>See the <code>( )</code>? That means that is a method, right? That\u2019s the constructor. A constructor that does not have any arguments is called a no-arg constructor. (No arguments, get it?)</p> <p>In the House class, you would find this:</p> <pre><code>// Pseudocode\nClass House\n    //The No-Arg Constructor\n    Public Module House ( )\n        //Code that usually initializes data in the object\n    End Module\nEnd Class\n</code></pre> <p>And check this out: (creating an object with 2 arguments!)</p> <pre><code>// Pseudocode\nmyHouse = New House (nbrOfBedrooms, nbrOfBathrooms)\n</code></pre> <p>See the fields in the \"<code>( )</code>\"? That means that is a method, right? That\u2019s a constructor. And in the House class and object, you would expect to find a constructor that brings in two values as parameters. And you do, as seen below!</p> <pre><code>// Pseudocode\nClass House\n    Declare Private Integer numberOfBedrooms\n    Declare Private Integer numberOfBathrooms\n    //The No-Arg Constructor\n    Public Module House ( )\n        //Code that usually initializes data in the object\n        numberOfBedrooms = 0\n        numberOfBathrooms = 0\n    End Module\n\n    //A Constructor accepting two parameters\n    Public Module House (Integer bedrooms, Integer bathrooms)\n        //Code that usually initializes data in the object\n        numberOfBedrooms = bedrooms\n        numberOfBathrooms = bathrooms\n    End Module\nEnd Class\n</code></pre> <p>Notice in the class above, the data fields are private. That means other programs cannot update the fields directly, but they can use public methods in the class to update the fields\u2019 values. This is done for security and to follow the OOP principle of encapsulation. The objects created from the class are responsible for the data stored in them. The object has final say about how and when its data can be updated. This is very important for objects that hold money, security clearances, bitcoins, or anything else that should be secure.</p>","boost":1},{"location":"programming/oop/object-oriented-programming/#getters-and-setters","title":"Getters and Setters","text":"<p>In OOP, objects keep their data private, which means no other program can directly change the data. Other programs must use public methods called getters and setters to get and set data in the object.</p> <p>Key Concept</p> <p>A famous saying you must understand: Private fields, Public methods</p> <p>It means just what it says! Fields are private, methods are public!</p> <p>Notice below that the getter does not need an input parameter, but the setter does. Another program is calling the setter to set a field to something new - so there must be an input parameter.</p> <pre><code>// Pseudocode\nClass House\n    Declare Private Integer numberOfBedrooms\n    Declare Private Integer numberOfBathrooms\n\n    Public Module House ( )\n        //Code that usually initializes data in the object\n        numberOfBedrooms = 0\n        numberOfBathrooms = 0\n    End Module\n\n    //Getters\n    Public String Function getBedrooms ()\n        Return numberOfBedrooms\n    End Function\n\n    Public String Function getBathrooms ()\n        Return numberOfBathrooms\n    End Function\n\n    //Setters\n    Public Module setBedrooms (Integer nbrBedrooms)\n        numberOfBedrooms = nbrBedrooms\n    End Module\n\n    Public Module setBathrooms (Integer nbrBathrooms)\n        numberOfBathrooms = nbrBathrooms\n    End Module\nEnd Class\n</code></pre> <p>The below method is also a setter. Because the incoming variable name is the same as the field name in the class, using \"this\" tells the computer to use the field name for the object instead of the local variable name in the parameter list.</p> <pre><code>// Pseudocode\nPublic Module setBedrooms (Integer numberOfBedrooms)\n    this.numberOfBedrooms = numberOfBedrooms\nEnd Module\n</code></pre>","boost":1},{"location":"programming/oop/object-oriented-programming/#common-mistakes-with-getters-and-setters","title":"Common mistakes with getters and setters","text":"<p>In the below code the local variable numberOfBedrooms is set to itself. This setter needed .this as shown above.</p> <pre><code>// Pseudocode - Common Mistake\nPublic Module setBedrooms (Integer numberOfBedrooms)\n    numberOfBedrooms = numberOfBedrooms\nEnd Module\n</code></pre> <p>In the below two routines the programmer didn\u2019t think through what a getter and setter should do. They tried to memorize the form without understanding the function.</p> <pre><code>// Pseudocode - Common Mistake\nPublic String Function getName (String name)//name not used\n    Return userName\nEnd Function\n\nPublic Module setName ()\n    userName = name //name is not defined\nEnd Module\n</code></pre> <p>If you understand what getters and setters are supposed to do, you don\u2019t have to memorize so much.</p>","boost":1},{"location":"programming/oop/object-oriented-programming/#inheritance","title":"Inheritance","text":"<p>The concept of inheritance allows a class to extend an existing class. The \u2018top\u2019 class is called the superclass. The class that inherits is the subclass. The subclass can use any data fields or methods in the superclass without having them in the subclass. This enables the programmer to change code in one place, the superclass, and all the subclasses will effectively change also.</p> <p>Below is a classic example of inheritance. Beagle inherits characteristics from Dog which inherits characteristics from Animal. Persian inherits data and methods from the Cat class which inherits data and methods from the Animal class.</p> <p></p> <p>Inheritance can be determined by saying two classes are in an is-a relationship. A beagle is-a dog. Therefore, the Beagle class extends the Dog class. A Persian is not a Dog so it does not inherit anything from the Dog class. But a Persian is a Cat which is an Animal, so Persian inherits from Animal.</p> <p>The Animal, Dog, Beagle, Poodle, Cat, and Persian classes can all be created as objects. Here is how the classes are extended and how a method in Animal can be used in Dog and Beagle objects:</p> <pre><code>// Pseudocode\nPublic Class Animal\n    Private String name\n\n    //Constructors\n    Public Module Animal ()\n        name = \"undefined\"\n    End Module\n\n    Public Module Animal (String n)\n        name = n\n    End Module\n\n    //getters and setters\n    Public Module setName(String n)\n        name = n\n    End Module\n\n    Public Function String getname()\n        Return name\n    End Function\nEnd Class\n</code></pre> <p>Note</p> <p>If the function <code>setName()</code> is not in Beagle, but it is in Dog, the function in Dog will be executed. If the function is not in Dog, but it is in Animal, the function in Animal will be executed.</p> <p>Note that Beagle does not contain a <code>name</code> field, but Animal does. So, because Beagle extends Dog which extends Animal, Beagle does have a name field where his name is stored.</p> <pre><code>// Pseudocode\nPublic Class Dog extends Animal\n    //Constructors\n    Public Module Dog ()\n        setName(\"Undefined in Dog\")\n    End Module\n\n    Public Module Dog (String name)\n        setName(name)\n    End Module\nEnd Class\n</code></pre> <p>Note</p> <p>There are two constructors in all three classes.</p> <pre><code>// Pseudocode\nPublic Class Beagle extends Dog\n    //Constructors\n    Public Module Beagle ()\n        setName(\"Undefined in Beagle\")\n    End Module\n\n    Public Module Beagle (String name)\n        setName(name)\n    End Module\nEnd Class\n</code></pre> <p>Note</p> <p>In a driver program, here is how objects could be created: <pre><code>// Pseudocode\nAnimal myAnimal = New Animal ()\nDog myDog = New Dog()\nDog yourDog = New Dog(\"Fido\")\n</code></pre></p>","boost":1},{"location":"programming/oop/object-oriented-programming/#overriding-a-method","title":"Overriding a Method","text":"<p>If the superclass and the subclass have a method named the same, the subclass overrides the superclass and the computer uses the subclass's method and not the superclass's.</p> <pre><code>// Pseudocode\nPublic Class Employee\n    Private Integer salary\n\n    //no-arg constructor\n    Public Method Employee ()\n        salary = 0\n    End Method\n\n    //constructor with an argument\n    //The \u201cthis.\u201d Is used to set the instance variable\n    Public Method Employee (String salary)\n        this.salary = salary\n    End Method\n\n    Public Method setSalary (Integer newSalary)\n        salary = newSalary\n    End Method\n\n    Public Method updateSalary (Integer increment) //overridden!\n        salary = salary + increment * 2\n    End Method\nEnd Class\n</code></pre> <pre><code>// Pseudocode\nPublic Class SalariedEmployee extends Employee\n    Public Method Employee ()\n        //no code. Uses the superclass's constructor\n    End Method\n\n    Public Method updateSalary (Integer increment) //this is used!\n        salary = salary + increment * 2\n    End Method\nEnd Class\n</code></pre> <p>In OOP, when a SalariedEmployee object is created as shown above, both the SalariedEmployee's constructor and the Employee's constructor are executed.</p> <p>But, when a program runs the SalariedEmployee's <code>updateSalary(...)</code> method, the computer only runs the <code>updateSalary(...)</code> method in the SalariedEmployee object. The subclass overrides the superclass's method and effectively replaces it. This allows salaried employees to have a different method from the Employee superclass's method.</p> <p>When a program runs the <code>setSalary(...)</code> method for a SalariedEmployee, the computer sees the method is not in the SalariedEmployee class, so it looks for it in the Employee class. This allows the subclass to inherit methods in the superclass without having to duplicate the code in the subclass. That\u2019s inheritance!</p>","boost":1},{"location":"programming/oop/object-oriented-programming/#overloading-a-method","title":"Overloading a Method","text":"<p>A program may have two or more methods named the same when they have different parameter lists. You have already seen this when a class contains a no-arg constructor AND a constructor with the same name that accepts at least one parameter.</p> <p>Overloading is possible for methods other than just constructors too. For example, this is allowed:</p> <pre><code>// Pseudocode\nMain\n    Declare Real playerHealth = 0\n    playerHealth = calculateHealth()\n    playerHealth = calculateHealth(-.1)\n    //This is a code snippet. Other code is not shown.\nEnd Main\n\nFunction Real calculateHealth ()\n    Return (playerHealth * .9)\nEnd Method\n\nFunction Real calculateHealth (Real pctToChange)\n    Return (playerHealth + (playerHealth * pctToChange))\nEnd Method\n</code></pre> <p>The computer will know which method to run because the parameter list is different.</p> <p>Note that the parameter list must be different enough for the computer to tell there is a difference. For example, this will not work:</p> <pre><code>// Pseudocode - Do not do this\nFunction Real calculateHealth (Real decreaseAmount)\n    Return (playerHealth \u2013 decreaseAmount)\nEnd Method\n\nFunction Real calculateHealth (Real increaseAmount)\n    Return (playerHealth + increaseAmount)\nEnd Method\n</code></pre> <p>But the below code will work since the computer can distinguish which function to use by the number of parameters or by the sequence of the incoming variable type(s):</p> <pre><code>// Pseudocode\nFunction Real calculateHealth (Real decreaseAmount)\n    Return (playerHealth \u2013 decreaseAmount)\nEnd Method\n\nFunction Real calculateHealth (Integer increaseAmount)\n    Return (playerHealth + increaseAmount)\nEnd Method\n\nFunction Real calculateHealth (Real increaseAmount, Integer bonus)\n    Return (playerHealth + increaseAmount + bonus)\nEnd Method\n</code></pre>","boost":1},{"location":"programming/oop/object-oriented-programming/#unified-modeling-language-uml","title":"Unified Modeling Language (UML)","text":"<p>The Unified Modeling Language is used by analysts and programmers to communicate with each other by using a standard methodology to describe an Object-Oriented group of classes and programs. The top section is the name of the class and therefore the file. The middle section lists the fields. The bottom section lists the methods in the class and the required parameters for each method. A negative sign (-) means private, and a plus sign (+) means public.</p> <p>The Student class extends the Person class - in other words, Student inherits the fields and methods from the Person class.</p> <p></p> <p>Note</p> <p>\"-\" means private \"+\" means public</p> <p>!! note</p> <pre><code>The arrow means extends (inheritance).\nStudent extends Person.\n</code></pre>","boost":1},{"location":"programming/oop/object-oriented-programming/#accessing-an-object","title":"Accessing an Object","text":"<p>Here are two instances of a class being created in a driver program:</p> <p><code>Person person1 = New Person ( )</code></p> <p><code>Person person2 = New Person (\"Janet\")</code></p> <p>Then the driver program can call methods in the object by using the object\u2019s variable name, like this:</p> <p><code>person1.setName(\"Bob\")</code></p> <p><code>name = person2.getName()</code></p>","boost":1},{"location":"programming/oop/object-oriented-programming/#a-full-oop-example","title":"A Full OOP Example","text":"<p>Using the Person and Student Objects from the prior section, we will need a driver program to create and use the objects.</p> <p>Here are the specifications for the PersonDriver Program: (what it should do)</p> <ol> <li>Create the first Person object using the constructor with all the parameters</li> <li>Create the second Person object using the no-arg constructor</li> <li>Set the first and last name of the second Person object using setters</li> <li>Display the full names of each Person.</li> <li>Create the first Student object using the constructor with all the parameters</li> <li>Create the second Student object using the no-arg constructor</li> <li>Set the first and last name of the second Student object using setters.</li> <li>Display the full names of each Student.</li> <li>Display the full names of each Student which should show the sID (studentID) also.</li> </ol> <p>Can you imagine the code for each of the above classes and the driver program?</p> <p>Try to describe the code for each item to someone out loud.</p> <p>Coding Exercise:</p> <p>Write the above classes and the driver program in pseudocode.</p> <p>Compare your code to the code below.</p> <p>(If you can\u2019t write it in pseudocode, you don\u2019t really understand it.)</p> <p>First, let\u2019s create the superclass:</p> <pre><code>// Pseudocode\npublic Class Person\n\n    //data fields or properties\n    Private String firstName    //note that fields in\n    Private String lastName     // classes are global\n\n    //No-arg constructor\n    Public Module Person()\n        firstName = \"NA\"\n        lastName = \"NA\"\n    End Module\n\n    //Another Constructor\n    Public Module Person(String fName, String lName)\n        firstName = fName\n        lastName = lName\n    End Module\n\n    //Setters\n    Public Module setFirstName (String fName)\n        firstName = fName\n    End Module\n\n    Public Module setLastName (String lName)\n        lastName = lName\n    End Module\n\n    //Getters are functions because they return data\n    Public Function String getFirstName()\n        Return firstName\n    End Function\n\n    Public Function String getLastName()\n        Return lastName\n    End Function\n\n    Public Function String getFullName()\n        Return (firstName, \" \", lastName)\n    End Function\n\nEnd Class\n</code></pre> <p>Next, let\u2019s create a subclass that will inherit from the Person superclass:</p> <pre><code>// Pseudocode\npublic Class Student extends Person\n\n    //data fields or properties\n    Private String studentID\n\n    //No-arg constructor\n    Public Module Student(){\n        setFirstName(\"NA\")  //Calls the superclass setter\n        setLastName(\"NA\")   //Calls the superclass setter\n        studentID = \"NA\"\n    End Module\n\n    //Constructor\n    Public Module Student(String fName,\n        String lName,\n        String sID)\n        setFirstName(fName) //Calls the superclass setter\n        setLastName(lName) //Calls the superclass setter\n        studentID = sID;\n    End Module\n\n    //Setters\n    Public Module setStudentID (String sID)\n        studentID = sID;\n    End Module\n\n    //Getters\n    Public Function String getStudentID()\n        Return studentID;\n    End Function\n\n    //This method overrides getFullName() in Person.\n    Public String getFullName()\n        Return (super.getFullName(), \": \", studentID)\n    End Function\n\nEnd Class\n</code></pre> <p>Notice that in <code>setFullName()</code> the <code>super.getFullName()</code> tells the computer to use the superclass\u2019s method. So the <code>Student</code> class uses both its own <code>getFullName()</code> method and the superclass\u2019s. The <code>Student</code> class adds the student ID to the full name.</p> <p>Now, let\u2019s create a basic Driver Program that will create 2 person objects and 2 student objects:</p> <pre><code>// Pseudocode\nPublic Class PersonDriver\n    Public Module Main()\n        //Create the first person object p1\n        Person p1 = New Person(\n            getString(\"Enter the first name\"),\n            getString(\"Enter the last name\"))\n\n        //Create the second person object p2\n        // using a no-arg constructor\n        Person p2 = New Person()\n\n        //Use setters to set data for p2\n        p2.setFirstName(getString(\"Enter the first name\"))\n        p2.setLastName (getString(\"Enter the last name\"))\n\n        Display p1.getFullName() //Using a getter for p1\n        Display p2.getFullName() //Using a getter for p2\n\n        //Create the first student object s1\n        Student s1 = New Student(\n            getString(\"Enter the first name\"),\n            getString(\"Enter the last name\"),\n            getString(\"Enter the Student ID\"))\n\n        //Create the second student object s2\n        // using a no-arg constructor\n        Student s2 = New Student()\n\n        //Use setters to set the data for s2\n        s2.setFirstName (getString(\"Enter the first name\"))\n        s2.setLastName (getString(\"Enter the last name\"))\n        s2.setStudentID (getString(\"Enter the Student ID\"))\n\n        Display s1.getFullName() //Using a getter for s1\n        Display s2.getFullName() //Using a getter for s2\n\n    End Module\nEnd Class\n</code></pre> <p>The above code is all well and good if we have only a few objects to create, but it would become unwieldy if we had hundreds or thousands of objects. How can we organize this better?</p> <p>With an Array! (But you knew that.)</p> <pre><code>// Pseudocode\nProgram: PersonDriverWithAnArray\n\n    Private Person [] people = New Person[4];   //Global array\n\n    Public Module main()\n\n        //Create the objects in a loop\n        Declare Integer i\n\n        for i = 0 to 1 Step 1 //There are 2 person objects\n            people[i] = New Person()\n\n            Display \"Person #\", i\n            //Create the person\u2019s fields using setters\n            people[i].setFirstName(getString(\"First name?\"))\n            people[i].setLastName(getString(\"Last name?\"))\n        End For\n\n        for j = 2 to 3 Step 1 //There are 2 Student objects\n            people[i] = New Student()\n\n            Display \"Student #\", i\n            //Create the student\u2019s fields using setters\n            people[i].setFirstName(getString(\"First name?\"))\n        people[i].setLastName(getString(\"Last name?\"))\n        End For\n\n        Display \" \"\n\n        //Print all the full names in a loop using a getter\n        for i = 0 to people.length \u2013 1 Step 1\n            Display people[i].getFullName()\n        End For\n\n        //Illustrate polymorphism\n        for i = 0 to people.length \u2013 1 Step 1\n            displayInfo(people[i])\n        End For\n    End of Module\n\n    // Note the below module accepts Person objects\n    // but it will also accept any object that\n    // inherits from Person such as Student: Polymorphism!\n    Public Module displayInfo(Person p)\n        Display p.getFullName()\n    End Module\n\nEnd of Program\n</code></pre> <p>Polymorphism. One of my favorite words. Notice above that the <code>displayInfo(...)</code> method takes in a Person as a parameter. But the program is sending to it both Person and Student objects. Because Student extends Person the computer will know what to do with each type of object. That\u2019s polymorphism!</p> <p>For the above example to work, the method <code>getFullName()</code> must exist in the superclass as well as in the subclasses.</p>","boost":1},{"location":"programming/oop/object-oriented-programming/#can-you-do-this","title":"Can You Do This?","text":"<p>From your knowledge of OOP concepts and principles, write the below classes and the driver program.</p> <p></p> <p>Fly extends Insect.</p> <p>Specifications for the InsectDriver Program:</p> <ol> <li>Create the first Insect object using the constructor with all the parameters</li> <li>Create the second Insect object using the no-arg constructor</li> <li>Set the fields of the second Insect object using setters</li> <li>Display the fields of each Insect.</li> <li>Create the first Fly object using the constructor with all the parameters</li> <li>Create the second Fly object using the no-arg constructor</li> <li>Set the fields of the second Fly object using setters.</li> <li>Display the fields of each fly.</li> </ol>","boost":1},{"location":"programming/oop/oop-review-questions/","title":"Object-Oriented Programming Review Questions","text":"<p>You should be able to answer these questions, discuss their meaning, and give examples. Pretend you are in a job interview - you should know the answers, right?</p> <ol> <li>What is a class?</li> <li>What is an object?</li> <li>What are getters and setters?</li> <li>What is encapsulation?</li> <li>What is a constructor and when is it executed?</li> <li>What is inheritance? Give an example.</li> <li>What is a superclass? Give an example.</li> <li>What is a subclass? Give an example.</li> <li>What is overriding a method? Give an example.</li> <li>What is overloading a method? Give an example.</li> <li>What is UML?</li> <li>What is polymorphism? Give an example.</li> </ol>","boost":1},{"location":"programming/oop/oop-terminology/","title":"Object-Oriented Programming (OOP) Terminology","text":"<p>Object-Oriented Programming (OOP) Terminology You Should Know</p> <p>Class: The blueprint for an object, not the actual object.</p> <p>Object: An object is created from the Class. It contains actual data and methods for the object.</p> <p>Method: Another name for module or function.</p> <p>Getter: A function. A program calls a getter to get the value of a field.</p> <p>Setter: A module. A program calls a setter to set a field to a value.</p> <p>Field: A word Object-Oriented Programming (OOP) uses instead of variable.</p> <p>Private Fields: Variables in a class are set to private so other programs can\u2019t update them directly.</p> <p>Public Methods: Methods are public so other programs can use public methods to get or set fields in that program.</p> <p>Constructor: A method named for the class that is automatically run when the object is created. It usually initializes the object\u2019s fields. A class/object can have multiple constructors.</p> <p>Encapsulation: Combining data and code into one object.</p> <p>UML: Unified Modeling Language. Like Input, Processing, and Output (IPO) Charts and Hierarchy Charts, UML is used to design object oriented classes and programs.</p> <p>Inheritance: A class can \u2018extend\u2019 another class which allows it to use the data fields and methods in the superclass.</p> <p>Superclass: The general class, such as <code>Dog</code>. A subclass extends a superclass.</p> <p>Subclass: The specialized class, such as <code>Beagle</code>. <code>Beagle</code> extends <code>Dog</code>. A subclass extends the superclass.</p> <p>Polymorphism: An object\u2019s ability to take on many forms.</p>","boost":1},{"location":"programming/resources/","title":"Resources - Index","text":"","boost":1},{"location":"programming/resources/#c","title":"C","text":"<ul> <li>Where And How To Learn C</li> </ul>","boost":1},{"location":"programming/resources/#java","title":"Java","text":"<ul> <li>Java Programming Resources</li> <li>Installing The Java Development Kit JDK</li> <li>Glossary</li> </ul>","boost":1},{"location":"programming/resources/#eclipse-ide","title":"Eclipse IDE","text":"<ul> <li>Eclipse IDE: How To Find Matching Brackets and Missing Brackets</li> </ul>","boost":1},{"location":"programming/resources/#writing","title":"Writing","text":"<ul> <li>Di\u00e1taxis: A systematic approach to technical documentation authoring</li> </ul>","boost":1},{"location":"programming/resources/diataxis-a-systematic-approach-to-technical-documentation-authoring/","title":"Di\u00e1taxis: A systematic approach to technical documentation authoring","text":"<p>Di\u00e1taxis is a way of thinking about and doing documentation.</p> <p>It prescribes approaches to content, architecture and form that emerge from a systematic approach to understanding the needs of documentation users.</p> <p>Di\u00e1taxis identifies four distinct needs, and four corresponding forms of documentation - tutorials, how-to guides, technical reference and explanation. It places them in a systematic relationship, and proposes that documentation should itself be organised around the structures of those needs.</p> <p>Website: https://diataxis.fr/</p>","boost":1},{"location":"programming/resources/eclipse-ide-how-to-find-matching-brackets-and-missing-brackets/","title":"Eclipse IDE - How To Find Matching Brackets and Missing Brackets","text":"","boost":1},{"location":"programming/resources/eclipse-ide-how-to-find-matching-brackets-and-missing-brackets/#3-ways-to-find-matching-missing-brackets-in-eclipse-ide","title":"3 Ways To Find Matching / Missing Brackets In Eclipse IDE","text":"<p>Note</p> <p>Eclipse IDE 2024-03 on Windows was used for this document.</p>","boost":1},{"location":"programming/resources/eclipse-ide-how-to-find-matching-brackets-and-missing-brackets/#1-in-the-eclipse-ide","title":"1. In the Eclipse IDE","text":"<ol> <li>In your source code in the Eclipse IDE, go to the bracket you want to match, then use your keyboard <code>CTRL</code> + <code>SHIFT</code> + <code>P</code> to go to the matching bracket in your source code.</li> </ol>","boost":1},{"location":"programming/resources/eclipse-ide-how-to-find-matching-brackets-and-missing-brackets/#2-eclipse-ide-preferences-highlight-matching-brackets","title":"2. Eclipse IDE Preferences - Highlight Matching Brackets","text":"<ol> <li> <p>Open the Eclipse IDE.</p> </li> <li> <p>From the top menu bar, click on <code>Window</code>, then from the pull down <code>Window</code> menu, click on <code>Preferences</code> from the <code>Window</code> menu.</p> </li> <li> <p>In the <code>Preferences</code> popup window, click on little carrot arrow <code>&gt;</code> next to <code>Java</code> in the left side menu of the <code>Preferences</code> popup window. </p> </li> <li> <p>Next, In the <code>Preferences</code> popup window, under <code>Java</code> in the left side menu of the <code>Preferences</code> popup window, click on the word <code>Editor</code> in the left side menu of the <code>Preferences</code> popup window.</p> </li> <li> <p>Make sure <code>Bracket highlighting</code> checkbox is checked and that the MAtching bracket radio button is selected.</p> </li> </ol> <p>Note</p> <p>Matching bracket - you must have cursor right next to the bracket and it will highlight only the corresponding bracket.</p> <p>Matching bracket and caret location - same as matching bracket, only it will highlight both brackets.</p> <p>Enclosing brackets - highlight both brackets that enclosing the place where your cursor is located.</p> <ol> <li> <p>To make it slightly easier to see, you might want to change the <code>Appearance color options:</code> of <code>Matching brackets highlight</code> to the <code>Color:</code> red.</p> </li> <li> <p>In the <code>Preferences</code> popup window, click on the <code>Apply and Close</code> button in the lower right of the <code>Preferences/Editor</code> popup window.</p> </li> </ol>","boost":1},{"location":"programming/resources/eclipse-ide-how-to-find-matching-brackets-and-missing-brackets/#3-installing-the-bracketeer2-plugin-in-eclipse-ide","title":"3. Installing The Bracketeer2 Plugin in Eclipse IDE","text":"<ol> <li> <p>Open the Eclipse IDE.</p> </li> <li> <p>From the top menu bar, click on <code>Help</code>, then from the pull down <code>Help</code> menu, click on <code>Eclipse Marketplace</code> from the <code>Help</code> menu.</p> </li> <li> <p>From the <code>Eclipse Marketplace</code> popup window, on the <code>Search</code> tab, in the <code>Find:</code> box, type <code>Bracketeer</code> and then hit the <code>Enter</code> key on your keyboard.</p> </li> <li> <p>From the <code>Eclipse Marketplace</code> popup window, click on the <code>Install</code> button in the <code>Bracketeer2 2.0.0</code> search results window pane.</p> </li> <li> <p>From the <code>Eclipse Marketplace/Confirm Selected Features</code> popup window, make sure under the <code>Bracketeer2 2.0.0</code> folder that <code>Bracketeer2 (required)</code> has a checkmark and that <code>Bracketeer JDT support</code> has a checkmark. </p> </li> </ol> <p>Note</p> <p><code>Bracketeer2 (required)</code> is required, <code>Bracketeer JDT support</code> is for use with Java, and <code>Bracketeer CDT support</code> is for use with C/C++. </p> <ol> <li> <p>After the checkboxes are selected, click on the <code>Confirm</code> button located just right of center in the bottom of the <code>Eclipse Marketplace/Confirm Selected Features</code> popup window.</p> </li> <li> <p>In the <code>Eclipse Marketplace/Review Licenses</code> popup window, click on the <code>Finish</code> button located right of center in the bottom of the <code>Eclipse Marketplace/Review Licenses</code> popup window.</p> </li> <li> <p>In the <code>Trust Artifacts</code> popup window, make sure the checkbox is selected for <code>Unsigned</code>. The list items in the bottom half of the <code>Trust Artifacts</code> popup window should now be in bold font and highlighted.</p> </li> <li> <p>In the <code>Trust Artifacts</code> popup window, click on the <code>Trust Selected</code> button in the lower right of the <code>Trust Artifacts</code> popup window.</p> </li> <li> <p>After the installation of the plugin has been completed, you will be prompted to restart the Eclipse IDE. Make sure you have saved all your work in Eclipse IDE before restarting the Eclipse IDE.</p> </li> </ol> <p>Note</p> <p>Bracketeer2 project page at the Eclipse Marketplace website: https://marketplace.eclipse.org/content/bracketeer2</p> <p>Bracketeer2 GitHub repository: https://github.com/gnl42/Bracketeer2</p>","boost":1},{"location":"programming/resources/glossary/","title":"Glossary","text":"<p>In Progress</p> <p>A B</p>","boost":1},{"location":"programming/resources/glossary/#a","title":"A","text":"","boost":1},{"location":"programming/resources/glossary/#abstract","title":"abstract","text":"<p>A Java reserved word that serves as a modifier for classes, interfaces, and methods. An abstract class cannot be instantiated and is used to specify bodiless abstract methods that are given definitions by derived classes. Interfaces are inherently abstract.</p>","boost":1},{"location":"programming/resources/glossary/#abstract-class","title":"abstract class","text":"<p>Same as abstract. A Java reserved word that serves as a modifier for classes, interfaces, and methods. An abstract class cannot be instantiated and is used to specify bodiless abstract methods that are given definitions by derived classes. Interfaces are inherently abstract.</p>","boost":1},{"location":"programming/resources/glossary/#abstract-data-type-adt","title":"abstract data type (ADT)","text":"<p>A collection of data and the operations that are defined on those data. An abstract data type might be implemented in a variety of ways, but the interface operations are consistent.</p>","boost":1},{"location":"programming/resources/glossary/#abstract-method","title":"abstract method","text":"<p>Same as abstract. A Java reserved word that serves as a modifier for classes, interfaces, and methods. An abstract class cannot be instantiated and is used to specify bodiless abstract methods that are given definitions by derived classes. Interfaces are inherently abstract</p>","boost":1},{"location":"programming/resources/glossary/#abstract-windowing-toolkit-awt","title":"Abstract Windowing Toolkit (AWT)","text":"<p>The package in the Java API (java.awt) that contains classes related to graphics and GUIs. See also Swing</p>","boost":1},{"location":"programming/resources/glossary/#abstraction","title":"abstraction","text":"<p>The concept of hiding details. If the right details are hidden at the right times, abstraction can significantly help control complexity and focus attention on appropriate issues.</p>","boost":1},{"location":"programming/resources/glossary/#adt","title":"ADT","text":"<p>abstract data type (ADT) - A collection of data and the operations that are defined on those data. An abstract data type might be implemented in a variety of ways, but the interface operations are consistent.</p>","boost":1},{"location":"programming/resources/glossary/#aggregate-object","title":"aggregate object","text":"<p>An object that contains variables that are references to other objects. See also has-a relationship.</p>","boost":1},{"location":"programming/resources/glossary/#aggregation","title":"aggregation","text":"<p>Something that is composed, at least in part, of other things. See also aggregate object.</p>","boost":1},{"location":"programming/resources/glossary/#algorithm","title":"algorithm","text":"<p>A step-by-step process for solving a problem. A program is based on one or more algorithms.</p>","boost":1},{"location":"programming/resources/glossary/#alias","title":"alias","text":"<p>A reference to an object that is currently also referred to by another reference. Each reference is an alias of the other.</p>","boost":1},{"location":"programming/resources/glossary/#analog","title":"analog","text":"<p>A representation that is in direct proportion to the source of the information. See also digital.</p>","boost":1},{"location":"programming/resources/glossary/#animation","title":"animation","text":"<p>A series of images or drawings that gives the appearance of movement when displayed in order at a particular speed.</p>","boost":1},{"location":"programming/resources/glossary/#api","title":"API","text":"<p>Stands for application programming interface (API). A set of classes that defines services for a programmer. Not part of the language itself, but often relied on to perform even basic tasks. See also class library.</p>","boost":1},{"location":"programming/resources/glossary/#applet","title":"applet","text":"<p>A Java program that is linked into an HTML document and is then retrieved and executed using a Web browser, as opposed to a stand-alone Java application.</p>","boost":1},{"location":"programming/resources/glossary/#appletviewer","title":"appletviewer","text":"<p>A software tool that interprets and displays Java applets through links in HTML documents. Part of the Java Development Kit.</p>","boost":1},{"location":"programming/resources/glossary/#application","title":"application","text":"<p>(1) A generic term for any program. (2) A Java program that can be run without the use of a Web browser, as opposed to a Java applet.</p>","boost":1},{"location":"programming/resources/glossary/#application-programming-interface-api","title":"application programming interface (API)","text":"<p>A set of classes that defines services for a programmer. Not part of the language itself, but often relied on to perform even basic tasks. See also class library.</p>","boost":1},{"location":"programming/resources/glossary/#arc-angle","title":"arc angle","text":"<p>In the definition of an arc, the radial distance that defines the arc\u2019s length. See also start angle.</p>","boost":1},{"location":"programming/resources/glossary/#architectural-design","title":"architectural design","text":"<p>A high-level design that identifies the large portions of a software system and key data structures. See also detailed design.</p>","boost":1},{"location":"programming/resources/glossary/#architecture","title":"architecture","text":"<p>Refers to computer architecture. The structure and interaction of the hardware components of a computer.</p>","boost":1},{"location":"programming/resources/glossary/#architecture-neutral","title":"architecture neutral","text":"<p>Not specific to any particular hardware platform. Java code is considered architecture neutral because it is compiled into bytecode and then interpreted on any machine with a Java interpreter. See also bytecode.</p>","boost":1},{"location":"programming/resources/glossary/#arithmetic-operator","title":"arithmetic operator","text":"<p>An operator that performs a basic arithmetic computation, such as addition or multiplication.</p>","boost":1},{"location":"programming/resources/glossary/#arithmetic-promotion","title":"arithmetic promotion","text":"<p>The act of promoting the type of a numeric operand to be consistent with the other operand.</p>","boost":1},{"location":"programming/resources/glossary/#array","title":"array","text":"<p>A programming language construct used to store an ordered list of primitive values or objects. Each element in the array is referenced using a numeric index from '0' to 'N\u20131', where 'N' is the size of the array.</p>","boost":1},{"location":"programming/resources/glossary/#array-element","title":"array element","text":"<p>A value or object that is stored in an array.</p>","boost":1},{"location":"programming/resources/glossary/#array-element-type","title":"array element type","text":"<p>The type of the values or objects that are stored in an array.</p>","boost":1},{"location":"programming/resources/glossary/#ascii","title":"ASCII","text":"<p>A popular character set used by many programming languages. ASCII stands for American Standard Code for Information Interchange. It is a subset of the Unicode character set, which is used by Java.</p>","boost":1},{"location":"programming/resources/glossary/#assembly-language","title":"assembly language","text":"<p>A low-level language that uses mnemonics to represent program commands.</p>","boost":1},{"location":"programming/resources/glossary/#assert","title":"assert","text":"<p>A Java reserved word that is used to make an assertion that a condition is fulfilled. See also assertion.</p>","boost":1},{"location":"programming/resources/glossary/#assertion","title":"assertion","text":"<p>A programming language construct that is used to declare a programmatic assumption (that is usually true). Assertions are used by JUnit for the purposes of unit testing. See also JUnit, unit testing.</p>","boost":1},{"location":"programming/resources/glossary/#assignment-conversion","title":"assignment conversion","text":"<p>Some data types can be converted to another data type in an assignment statement. See widening conversion.</p>","boost":1},{"location":"programming/resources/glossary/#assignment-operator","title":"assignment operator","text":"<p>An operator that results in an assignment to a variable. The = operator performs basic assignment. Many other assignment operators, such as the *= operator, perform additional operations prior to the assignment.</p>","boost":1},{"location":"programming/resources/glossary/#association","title":"association","text":"<p>A relationship between two classes in which one uses the other or is related to it in some way. See also operator association, use relationship.</p>","boost":1},{"location":"programming/resources/glossary/#asymptotic-complexity","title":"asymptotic complexity","text":"<p>The order, or dominant term, of a growth function. See also dominant term, growth function.</p>","boost":1},{"location":"programming/resources/glossary/#awt","title":"AWT","text":"<p>Abstract Windowing Toolkit (AWT). The package in the Java API (java.awt) that contains classes related to graphics and GUIs. See also Swing.</p>","boost":1},{"location":"programming/resources/glossary/#b","title":"B","text":"","boost":1},{"location":"programming/resources/glossary/#background-color","title":"background color","text":"<p>(1) The color of the background of a GUI component. (2) The color of the background of an HTML page. See also foreground color.</p>","boost":1},{"location":"programming/resources/glossary/#bag","title":"bag","text":"<p>A collection that facilitates the selection of random elements from a group. See also collection.</p>","boost":1},{"location":"programming/resources/installing-the-java-development-kit/","title":"Java - Installing the Java Development Kit (JDK)","text":"<p>If you have never installed the JDK (Java Development Kit) or the JRE (Java Runtime Environment) on to your computer before, may I suggest that you choose to install from one of these sources:</p> <p>Note</p> <p>I installed the latest LTS (Long Term Suppoerted) version of Eclipse Adoptium's Temurin. Other LTS verison are 8, 11, and 17. While the JDK does include the JRE (Java Runtime Environment), you are able to install the JRE seperatly on your system if you so choose.</p> <p>Tip</p> <p>If you are developing from multiple computers for homework, such as a school computer as well as a personal computer, install the same version of the JDK as well as from the same source such as Oracle Java, Eclipse Adoptium, etc., as the school computer has installed. It will might make your life a little easier.</p> <p>You will need Adminstrator privledges if you are installing the Java Development Kit (JDK) on a Windows Operating System. Make sure you have the adminstrator's username and password available to you before installing.</p>","boost":1},{"location":"programming/resources/installing-the-java-development-kit/#installer-sources-for-the-jdk-and-the-jre-for-windows-mac-linux-etc","title":"Installer Sources for the JDK and the JRE for Windows, Mac, Linux, Etc.","text":"<ul> <li> <p>Eclipse Adoptium's Temurin</p> </li> <li> <p>Amazon Corretto</p> </li> <li> <p>Azul Zulu</p> </li> <li> <p>IBM Semeru Runtimes</p> </li> <li> <p>Microsoft Build of OpenJDK</p> </li> <li> <p>Oracle Java SE</p> </li> <li> <p>Red Hat build of OpenJDK</p> </li> <li> <p>SapMachine</p> </li> </ul>","boost":1},{"location":"programming/resources/java-programming-resources/","title":"Java Programming Resources","text":"<p>The Official Java Documentation from Oracle</p> <p>This is the resource that professional developers use.</p> <p>Go to this resource to find:</p> <ol> <li>The official documentation for Java Programmers</li> <li> <p>Information about all Java Classes</p> </li> <li> <p>The Official Java Documentation: Version 21</p> </li> <li>The Official Java Documentation: Version 17</li> <li>The Official Java Documentation: Version 11</li> <li>The Official Java Documentation: Version 8</li> </ol>","boost":1},{"location":"programming/resources/java-programming-resources/#other-great-resources","title":"Other Great Resources","text":"<p>Logic Lambda Videos</p> <p>https://www.youtube.com/@logiclambda</p> <p>Programming in Java Computer Science: An Interdisciplinary Approach (using Java)</p> <p>https://introcs.cs.princeton.edu/java/home/</p> <p>Oracle Java Tutorials Version 8</p> <p>http://docs.oracle.com/javase/tutorial/index.html</p> <p>TutorialsPoint Java Tutorials</p> <p>https://www.tutorialspoint.com/java/index.htm</p> <p>TutorialsPoint Java8 Tutorial</p> <p>https://www.tutorialspoint.com/java8/index.htm</p> <p>Derek Banas Java Video Tutorial</p> <p>https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19</p> <p>Nathan S Java Videos</p> <p>https://www.youtube.com/@nathanschutz4095/</p> <p>Beginners Programming - Beginners Java Playlist</p> <p>https://www.youtube.com/playlist?list=PL9J7I-bSsj4FlFrxVAncSFTZLX7adIyRQ</p> <p>Beginners Programming - Intermediate Java Playlist</p> <p>https://www.youtube.com/playlist?list=PL9J7I-bSsj4Fb57M5asi0wxvmSR3o8Yll</p> <p>Margret Posch Java Basics</p> <p>https://www.youtube.com/playlist?list=PL5OtzItldO_S-0Hnuyg-PnBwZnHvu2fWm</p> <p>JetBrains Academy - Java For Beginners</p> <p>https://academy.jetbrains.com/ https://plugins.jetbrains.com/plugin/18905-java-for-beginners</p>","boost":1},{"location":"programming/resources/java-programming-resources/#data-structures-algorithms","title":"Data Structures &amp; Algorithms","text":"<p>EECS.berkeley.edu: CS61B -- Data Structures (Prof. Jonathan Shewchuk)</p> <p>https://people.eecs.berkeley.edu/~jrs/61b/</p> <p>OCW.MIT.edu: Introduction to Algorithms (Prof. Erik Demaine &amp; Prof. Srini Devadas)</p> <p>https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/index.htm</p> <p>TutorialsPoint Data Structures &amp; Algorithm Basic Concepts</p> <p>https://www.tutorialspoint.com/data_structures_algorithms/data_structures_basics.htm</p> <p>CS.USFca.edu: Data Structure Visualizations</p> <p>https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</p>","boost":1},{"location":"programming/resources/javaprogrammingcheatsheet/","title":"Java Programming Cheatsheet","text":"","boost":1},{"location":"programming/resources/javaprogrammingcheatsheet/#hello-world","title":"Hello, World.","text":"","boost":1},{"location":"programming/resources/where-and-how-to-learn-c/","title":"Where And How To Learn C","text":"<p>Source https://www.reddit.com/r/C_Programming/comments/10zyicb/where_and_how_to_learn_c/</p> <p>What resources did you use to learn C ? As a beginner to C, I'm finding it really difficult to pick up the language from just reading about the syntax rules. Are there any good resources / books / youtube videos to not only learn the syntax, but also the more advanced concepts (pointers, scope, etc)?</p> <p>Edit: I know learning how to code takes time, but I'd prefer resources that wouldn't be so time consuming. More of a resource that I could approach when I'm stuck on a single topic</p> <p>I've posted this here before and it's what has worked for me an a few others who told me it worked for them as well. Ymmv.</p> <p>People sometimes struggle with C when they start from scratch or come from a higher to lower level of abstraction. I struggled with this for a long time till I did these things:</p> <p>I would not try and understand how the higher level abstractions translate to the lower C level. I would instead learn from first principles on how a computer works and build the abstractions up from there. You will learn how a CPU works. How the data bus and registers are used. How memory is laid out and accessed. The call stack and how that works, etc.. This will go a long way in understanding how C sits on top of this and how it's data structures like arrays and structs map to this and understanding how pointers work the way they do and why. Check out these resources:</p> <pre><code>Read [Code: The Hidden Language of Computer Hardware and Software](http://charlespetzold.com/code)\n\nWatch [Exploring How Computers Work](https://youtu.be/QZwneRb-zqA)\n\nWatch all 41 videos of [A Crash Course in Computer Science](https://www.youtube.com/playlist?list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo)\n\nTake the [Build a Modern Computer from First Principles: From Nand to Tetris (Project-Centered Course)](https://www.coursera.org/learn/build-a-computer)\n\nTake the [CS50: Introduction to Computer Science](https://online-learning.harvard.edu/course/cs50-introduction-computer-science) course.\n\nGrab a copy of[ C programming: A Modern Approach](http://knking.com/books/c2/index.html) and use it as your main course on C.\n\nFollow this [Tutorial On Pointers And Arrays In C](https://github.com/jflaherty/ptrtut13)\n</code></pre> <p>The first four really help by approaching C from a lower level of abstraction (actually the absolute lowest level and gradually adding layers of abstraction until you are at the C level which, by then is incredibly high!) You can do all four or pick one or two and dive deep. The 5<sup>th</sup> is a great introduction to computer science with a decent amount of C programming. The sixth is just the best tutorial on C. By far. The seventh is a deep dive into pointers and one of best tutorial on pointers and arrays out there (caveat, it's a little loose with the l-value/r-value definition for simplicity sake I believe.)</p> <p> https://github.com/practical-tutorials/project-based-learning#cc</p> <p>Play the long game when learning to code.</p> <p>You can also check out Teach Yourself Computer Science</p> <p>Here is a decent list of 8 Books on Algorithms and Data Structures For All Levels </p> <p>I agree with this. Nand2Tetris is especially very good for foundational knowledge. I also recommend reading Computer Systems: A Programmer's Perspective. You can also watch the video lectures from the authors of CS:APP : https://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/</p> <p>Started learning mid-summer last year and would recommend using more than one tool to learn, and make one of those a book. Here is a video series I came across that was clearly presented and easy to follow:</p> <p>https://www.youtube.com/playlist?list=PLBlnK6fEyqRhX6r2uhhlubuF5QextdCSM .</p> <p>Also, I think you will find some useful info in some of these post. Scan for relavent post titles: https://www.reddit.com/r/C_Programming/search/?q=learn%20book&amp;restrict_sr=1&amp;sr_nsfw=&amp;include_over_18=1</p> <p>un through basic syntax for free on learn-c.org.</p> <p>Start solving real problems quickly with https://www.codestepbystep.com/problem/list/c</p> <p>If you are not adverse to learning from books, get The C Programming Language 2<sup>nd</sup> Edition, it gives you little examples and tasks to explore in every chapter.</p> <p>Whenever you do anything to learn, never copy-paste. Always type the code in your own editor. This helps you build knowledge of syntax and constructs. </p> <p>This online book helped me more than anything else:</p> <p>https://beej.us/guide/bgc/</p> <p>I was scanning through the replies to see if anyone else had already mentioned this book. I've been using it as a supplement to one of my classes where we need to learn a bit of C, and have found the book to be incredibly clear and quite helpful. The writing style, which maintains an easygoing sort of tone, helps keep the material approachable.</p> <p>It may be worth noting that there are two volumes to the guide, a tutorial and a reference. I didn't see that right away, as the reference is only mentioned briefly in a link towards the top of the page, with the actual download being on the linked page. As someone new to C and programming in general, it's helpful to have a reference guide for common functions written in a relatively approachable language, as I can sometimes become a bit lost in the jargon of official documentation meant for a more professional audience.</p> <p>In fact, in a moment of procrastination, I was just looking at the Dedication section of the book. Beej specifically thanks the users of r/C_programming. Hence, my arrival in this sub a few minutes ago. Who knows, maybe Beej will see this post too.</p>","boost":1},{"location":"programming/ternary/","title":"Ternary - Index","text":"<ul> <li>Enhanced For Loops</li> <li>Enhanced If Statements</li> </ul>","boost":1},{"location":"programming/ternary/ternary-enhanced-for-loops-short-form-for-loops-examples/","title":"Enhanced For Loops","text":"<p>The usual way to step through all the elements of an array in order is with a \"standard\" for loop, for example,</p> <pre><code>for (int i = 0; i &lt; myArray.length; i++) {\n    System.out.println(myArray[i]);\n}\n</code></pre> <p>The so-called enhanced for loop is a simpler way to do this same thing. (The colon in the syntax can be read as \"in.\")</p> <pre><code>for (int myValue : myArray) {\n    System.out.println(myValue);\n}\n</code></pre> <p>The enhanced for loop was introduced in Java 5 as a simpler way to iterate through all the elements of a Collection (Collections are not covered in these pages). It can also be used for arrays, as in the above example, but this is not the original purpose.</p> <p>Enhanced for loops are simple but inflexible. They can be used when you wish to step through the elements of the array in first-to-last order, and you do not need to know the index of the current element. In all other cases, the \"standard\" for loop should be preferred.</p> <p>Two additional statement types, break and continue, can also control the behavior of enhanced for loops.</p> <p>Source: https://www.cis.upenn.edu/~matuszek/General/JavaSyntax/enhanced-for-loops.html</p> <p>Other examples... The Java ternary operator examples | alvinalexander.com</p>","boost":1},{"location":"programming/ternary/ternary-enhanced-if-statements-short-form-if-statments-examples/","title":"Enhanced If Statements (Short Form If Statements) Ternary Operator Examples","text":"","boost":1},{"location":"programming/ternary/ternary-enhanced-if-statements-short-form-if-statments-examples/#if-then-else","title":"if-then-else","text":"<p>I'm always forgeting how to use the ?: ternary operator. This supplemental answer is a quick reminder. It is shorthand for <code>if-then-else</code>.</p> <pre><code>myVariable = (testCondition) ? someValue : anotherValue;\n</code></pre> <p>where</p> <ul> <li><code>()</code> holds the <code>if</code></li> <li><code>?</code> means <code>then</code></li> <li><code>:</code> means <code>else</code></li> </ul> <p>It is the same as</p> <pre><code>if (testCondition) {\n    myVariable = someValue;\n} else {\n    myVariable = anotherValue;\n}\n</code></pre>","boost":1},{"location":"programming/ternary/ternary-enhanced-if-statements-short-form-if-statments-examples/#if-else-if-else","title":"if, else if, else","text":"<p>You can write <code>if, else if, else</code> statements in short form. For example:</p> <pre><code>Boolean isCapital = city.isCapital(); //Object Boolean (not boolean)\nString isCapitalName = isCapital == null ? \"\" : isCapital ? \"Capital\" : \"City\";\n</code></pre> <p>This is short form of:</p> <pre><code>Boolean isCapital = city.isCapital();\nString isCapitalName;\nif(isCapital == null) {\n    isCapitalName = \"\";\n} else if(isCapital) {\n    isCapitalName = \"Capital\";\n} else {\n    isCapitalName = \"City\";\n}\n</code></pre> <p>Source: Short form for Java if statement - Stack Overflow</p> <p>Other Examples... The Java ternary operator examples / alvinalexander.com</p>","boost":1}]}
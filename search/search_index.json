{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Notes","text":"<ul> <li> <p>Programming</p> <ul> <li>Arrays</li> <li>Conditionals and Loops</li> <li>Input Validation</li> <li>Menus</li> <li>Methods</li> <li>Object-Oriented Programming</li> <li>Resources</li> <li>Ternary</li> </ul> </li> <li> <p>Arduino</p> <ul> <li>Arduino Labs (Lab 0 to Lab 5)</li> <li>How To Install A Library</li> <li>Hot To Install A Sketch</li> <li>Arduino Additional Resources</li> </ul> </li> <li> <p>How-Tos</p> <ul> <li>How-Tos - CSC110</li> <li>How-Tos - CSC205</li> <li>How-Tos - CSC240</li> </ul> </li> </ul>","boost":1},{"location":"arduino/","title":"Arduino - Index","text":"","boost":1},{"location":"arduino/#labs","title":"Labs","text":"<ul> <li>Lab 0 - System Verification Test</li> <li>Lab 1 - Passive Buzzer</li> <li>Lab 2 - Servo Motor</li> <li>Lab 3 - Ultrasonic Sensor</li> <li>Lab 4 - Stepper Motor Control</li> <li>Lab 5 - Collision Avoidance</li> </ul>","boost":1},{"location":"arduino/#additional-resources","title":"Additional Resources","text":"<ul> <li>How To Install A Library Using The Arduino IDE</li> <li>How To Upload A Sketch Using The Arduino IDE</li> <li>Arduino Resources</li> </ul>","boost":1},{"location":"arduino/arduino-resources/","title":"Arduino Resources","text":"","boost":1},{"location":"arduino/arduino-resources/#arduino-hardware","title":"Arduino Hardware","text":"<ul> <li> <p>Arduino Uno Rev3 (Board Only)</p> </li> <li> <p>Arduino UNO R3 Documentation</p> </li> <li> <p>Arduino UNO R3 Datasheet</p> </li> <li> <p>Arduino UNO R3 Pinout Guide</p> </li> </ul>","boost":1},{"location":"arduino/arduino-resources/#elegoo-hardware","title":"Elegoo Hardware","text":"<ul> <li> <p>ELEGOO UNO Project Super Starter Kit with Tutorial and UNO R3 Compatible with Arduino IDE</p> </li> <li> <p>ELEGOO Super Starter Kit for UNO V1.0.2022.08.04 Download Link</p> </li> </ul>","boost":1},{"location":"arduino/arduino-resources/#arduino-ide","title":"Arduino IDE","text":"<ul> <li> <p>Arduino IDE 2 Download Link</p> </li> <li> <p>Getting Started with Arduino IDE 2</p> </li> <li> <p>Downloading and Installing the Arduino IDE 2</p> </li> <li> <p>How to upload a sketch with the Arduino IDE 2</p> </li> <li> <p>The Autocomplete Feature</p> </li> <li> <p>Using the Board Manager</p> </li> <li> <p>Synchronizing Sketches between IDE 2 and Arduino Cloud</p> </li> <li> <p>Customizing the Auto Formatter Feature</p> </li> <li> <p>Debugging with the Arduino IDE 2</p> </li> <li> <p>Updating Firmware version and Uploading Certificates</p> </li> <li> <p>Installing libraries</p> </li> <li> <p>Security of Arduino IDE</p> </li> <li> <p>Using the Serial Monitor tool</p> </li> <li> <p>Using the Serial Plotter Tool</p> </li> </ul>","boost":1},{"location":"arduino/arduino-resources/#arduino-programming","title":"Arduino Programming","text":"<ul> <li> <p>Arduino Language Reference</p> </li> <li> <p>Arduino Libraries</p> </li> <li> <p>Arduino Built-in Examples</p> </li> </ul>","boost":1},{"location":"arduino/how-to-install-a-library-using-the-arduino-ide/","title":"How To Install A Library Using The Arduino IDE","text":"<p>Info</p> <ul> <li>Source: Arduino.cc Installing libraries</li> </ul> <p>A large part of the Arduino programming experience is the use of libraries. There are thousands of libraries that can be found online, and the best documented ones can be found and installed directly through the editor.</p> <p>In this tutorial, we will go through how to install a library using the library manager in the Arduino IDE 2. We will also show how to access examples from a library that you have installed.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/how-to-install-a-library-using-the-arduino-ide/#requirements","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/how-to-install-a-library-using-the-arduino-ide/#why-use-libraries","title":"Why Use Libraries?","text":"<p>Libraries are incredibly useful when creating a project of any type. They make our development experience much smoother, and there almost an infinite amount out there. They are used to interface with many different sensors, RTCs, Wi-Fi modules, RGB matrices and of course with other components on your board.</p> <p>Arduino has many official libraries, but the real heroes are the Arduino community, who develop, maintain and improve their libraries on a regular basis.</p>","boost":1},{"location":"arduino/how-to-install-a-library-using-the-arduino-ide/#installing-a-library","title":"Installing a Library","text":"<p>Installing a library is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the left column. Here, we can see a couple of icons. Let's click the on the \"library\" icon.</p> </li> </ol> <p></p> <ol> <li>A list will now appear of all available libraries, where we can also search for the library we want to use. In this example, we are going to install the RTCZero library. Click on the \"INSTALL\" button to install the library.</li> </ol> <p></p> <ol> <li>This process should not take too long, but allow up to a minute to install it.</li> </ol> <p></p> <ol> <li>When it is finished, we can take a look at the library in the library manager column, where it should say \"INSTALLED\".</li> </ol> <p></p> <p>Congratulations! You have now successfully downloaded and installed a library on your machine.</p>","boost":1},{"location":"arduino/how-to-install-a-library-using-the-arduino-ide/#including-a-library","title":"Including a Library","text":"<p>To use a library, you first need to include the library at the top of the sketch.</p> <p></p> <p>Almost all libraries come with already made examples that you can use. These are accessible through File &gt; Examples &gt; {Library} &gt; {Example}. In this example, we are choosing the RTCZero &gt; SimpleRTC.</p> <p></p> <p>You can also access library examples directly in the library manager, by clicking the three dots next to the installed library, like this:</p> <p></p> <p>The chosen example will now open up in a new window, and you can start using it however you want to.</p> <p></p>","boost":1},{"location":"arduino/how-to-upload-a-sketch-using-the-arduino-ide/","title":"How To Upload A Sketch Using The Arduino IDE","text":"<p>Info</p> <ul> <li>Source:  Arduino.cc How to upload a sketch with the Arduino IDE 2</li> </ul> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/how-to-upload-a-sketch-using-the-arduino-ide/#requirements","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/how-to-upload-a-sketch-using-the-arduino-ide/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/how-to-upload-a-sketch-using-the-arduino-ide/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/how-to-upload-a-sketch-using-the-arduino-ide/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor.</p>","boost":1},{"location":"arduino/labs/","title":"Arduino - Labs - Index","text":"<ul> <li>Arduino Lab 0 - System Verification Test</li> <li>Arduino Lab 1 - Passive Buzzer</li> <li>Arduino Lab 2 - Servo Motor</li> <li>Arduino Lab 3 - Ultrasonic Sensor</li> <li>Arduino Lab 4 - Stepper Motor Control</li> <li>Arduino Lab 5 - Collision Avoidance</li> </ul>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/","title":"Arduino Lab 0 - System Verification Test","text":"","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#overview","title":"Overview","text":"<p>In this lab, you will install the Arduino IDE 2 onto your computer. You will open the provided source code file and upload it to the UNO R3 controller board using a USB 2.0 Type A to USB 2.0 Type B Cable to blink the Arduino's built-in LED.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#requirements","title":"Requirements:","text":"<ul> <li>Arduino IDE (Arduino IDE 2 was used for this document)</li> <li>Arduino UNO R3 or Elegoo UNO R3 Board</li> <li>(1) x USB 2.0 Type A to USB 2.0 Type B Cable</li> </ul>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#datasheets","title":"Datasheets:","text":"<ul> <li>Arduino UNO R3 Datasheet</li> <li>ELEGOO UNO R3 Datasheet</li> </ul>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#downloading-and-installing-the-arduino-ide-2","title":"Downloading and installing the Arduino IDE 2","text":"<p>Info</p> <p>Source: Arduino.cc Downloading and installing the Arduino IDE 2</p> <p>A quick guide on how to install the IDE 2 on your operating system.</p> <p>You can easily download the editor from the Arduino Software page.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#requirements_1","title":"Requirements","text":"<ul> <li>Windows - Win 10 and newer, 64 bits</li> <li>Linux - 64 bits</li> <li>Mac OS X - Version 10.14: \"Mojave\" or newer, 64 bits</li> </ul>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#the-arduino-ide-2","title":"The Arduino IDE 2","text":"<p>The Arduino IDE 2 is an open-source project. It is a big step from its sturdy predecessor, Arduino IDE 1.x, and comes with revamped UI, improved board &amp; library manager, debugger, autocomplete feature and much more.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#download-the-editor","title":"Download the Editor","text":"<p>Downloading the Arduino IDE 2 is done through the Arduino Software page. Here you will also find information on the other editors available to use.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#installation","title":"Installation","text":"","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#windows","title":"Windows","text":"<p>To install the Arduino IDE 2 on a Windows computer, simply run the file downloaded from the software page.</p> <p></p> <p>Running the installation file.</p> <p>Follow the instructions in the installation guide. The installation may take several minutes.</p> <p></p> <p>Instructions for installing the IDE 2</p> <p>You can now use the Arduino IDE 2 on your Windows computer!</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#macos","title":"macOS","text":"<p>To install the Arduino IDE 2 on a macOS computer, simply copy the downloaded file into your application folder.</p> <p></p> <p>Installation on macOS.</p> <p>You can now use the Arduino IDE 2 on your macOS computer!</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#linux","title":"Linux","text":"<p>To install the Arduino IDE 2 on Linux, first download the AppImage 64 bits (X86-64) from the Arduino Software page.</p> <p>Before we can launch the editor, we need to first make it an executable file. This is done by:</p> <ul> <li>right-click the file,</li> <li>choose Properties,</li> <li>select Permissions tab,</li> <li>tick the Allow executing file as program box.</li> </ul> <p></p> <p>You can now double click the file to launch the Arduino IDE 2 on your Linux machine. In case you cannot run the AppImage file, make sure that FUSE is installed on your system.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#in-ubuntu-2204","title":"In Ubuntu (&gt;= 22.04):","text":"<pre><code>sudo add-apt-repository universe\nsudo apt install libfuse2\n</code></pre>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#in-fedora","title":"In Fedora","text":"<pre><code>dnf install fuse\n</code></pre> <p>See instructions for installing FUSE on your distribution here.</p> <p>To enable the Arduino IDE to access the serial port and upload code to your board, the following rule can be added to <code>/etc/udev/rules.d/99-arduino.rules</code>.</p> <pre><code>SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"2341\", GROUP=\"plugdev\", MODE=\"0666\"\n</code></pre>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#systems-verification-test","title":"Systems Verification Test","text":"<p>Download the Arduino source code file (also known as a sketch) Lab0SystemVerificationTest.ino and save it to your computer.</p> Arduino <pre><code>/*\n  Lab0SystemVerificationTest.ino\n\n  Turns an on-board LED on for 100 milliseconds, then off for 100 milliseconds, \n  repeatedly.\n\n  Most Arduinos have an on-board LED you can control. On the UNO, MEGA and ZERO\n  it is attached to digital pin 13, on MKR1000 on pin 6. LED_BUILTIN is set to\n  the correct LED pin independent of which board is used.\n  If you want to know what pin the on-board LED is connected to on your Arduino\n  model, check the Technical Specs of your board at:\n  https://www.arduino.cc/en/Main/Products\n\n  modified 21 Feburary 2023\n  by Steve Ellermann\n  modified 8 May 2014\n  by Scott Fitzgerald\n  modified 2 Sep 2016\n  by Arturo Guadalupi\n  modified 8 Sep 2016\n  by Colby Newman\n\n  This code is based on example code in the public domain.\n\n  https://www.arduino.cc/en/Tutorial/BuiltInExamples/Blink\n*/\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);  // turn the LED on (HIGH is the voltage level)\n  delay(100);                      // wait for 100 milliseconds\n  digitalWrite(LED_BUILTIN, LOW);   // turn the LED off by making the voltage LOW\n  delay(500);                      // wait for 500 milliseconds\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#principle","title":"Principle","text":"<p>The UNO R3 board has rows of connectors along both sides that are used to connect to several electronic devices and plug-in 'shields' that extends its capability.</p> <p>It also has a single LED that you can control from your sketches. This LED is built onto the UNO R3 board and is often referred to as the 'L' LED as this is how it is labeled on the board.</p> <p></p> <p>You may find that your UNO R3 board's 'L' LED already blinks when you connect it to a USB plug. This is because the boards are generally shipped with the 'Blink' sketch pre-installed.</p> <p>We will reprogram the UNO R3 board with our own Blink sketch and then change the rate at which it blinks.</p> <p>The time has now come to put that connection to the test and program your UNO R3 board.</p> <p>Attach your Arduino board to your computer with the USB cable.</p> <p>Open the file Lab0_SystemVerificationTest.ino that you downloaded with Arduino IDE 2</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#how-to-upload-a-sketch-with-the-arduino-ide-2","title":"How to upload a sketch with the Arduino IDE 2","text":"<p>Info</p> <p>Source: Arduino.cc How to upload a sketch with the Arduino IDE 2</p> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#requirements_2","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/labs/lab-0-system-test-verification/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor. Results</p> <p>If you see the Arduino onboard LED blinking (100ms ON, 500ms OFF). Congratulations! Your PC / Arduino have passed the System Verification Test.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/","title":"Arduino Lab 1 - Passive Buzzer","text":"","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#overview","title":"Overview","text":"<p>In this lab, you will learn how to use a passive buzzer. The purpose of the experiment is to generate eight different sounds, each sound lasting 0.5 seconds: from Alto Do (523Hz), Re (587Hz), Mi (659Hz), Fa (698Hz), So (784Hz), La (880Hz), Si (988Hz) to Treble Do (1047Hz).</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#requirements","title":"Requirements","text":"<ul> <li>Arduino IDE (Arduino 2 was used for this document)</li> <li>(1) x Arduino Uno R3 or Elegoo Uno R3</li> <li>(1) x Passive buzzer</li> <li>(2) x F-M wires (Female to Male DuPont wires)</li> <li>(1) x USB 2.0 Type A to USB 2.0 Type B Cable</li> <li>(Optional) (1) x Apple USB-C to USB Adapter for macOS Users</li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#datasheets","title":"Datasheets","text":"<ul> <li>Arduino UNO R3 Datasheet</li> <li>ELEGOO UNO R3 Datasheet</li> <li>Passive Buzzer Data Sheet</li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#required-libraries","title":"Required Libraries","text":"<ul> <li>Library File: pitches.zip</li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#component-introduction","title":"Component Introduction","text":"","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#passive-buzzer","title":"Passive Buzzer","text":"<p>The working principle of passive buzzer is using PWM generating audio to make the air to vibrate. Appropriately changed as long as the vibration frequency, it can generate different sounds. For example, sending a pulse of 523Hz, it can generate Alto Do, pulse of 587Hz, it can generate mid-range Re, pulse of 659Hz, it can produce mid-range Mi. By the buzzer, you can play a song.</p> <p>We should be careful not to use the UNO R3 board analog Write () function to generate a pulse to the buzzer, because the pulse output of analog Write () is fixed (500Hz).</p> <p></p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#connection","title":"Connection","text":"","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#schematic","title":"Schematic","text":"","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#wiring-diagram","title":"Wiring Diagram","text":"<p>Wiring the buzzer connected to the UNO R3 board, the red (positive) to the pin8, black wire (negative) to the GND.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#example-picture","title":"Example Picture","text":"","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#sample-code","title":"Sample Code","text":"<ul> <li> <p>Ardunio Sample Source Code File: Lab01ArduinoSampleCode.ino</p> </li> <li> <p>Library File: pitches.zip</p> </li> </ul> <pre><code>// Lab01ArduinoSampleCode.ino\n// www.elegoo.com\n// 2016.12.08\n\n#include \"pitches.h\"\n\n// notes in the melody:\nint melody[] = {\n  NOTE_C5, NOTE_D5, NOTE_E5, NOTE_F5, NOTE_G5, NOTE_A5, NOTE_B5, NOTE_C6};\nint duration = 500;  // 500 milliseconds\n\nvoid setup() {\n\n}\n\nvoid loop() {  \n  for (int thisNote = 0; thisNote &lt; 8; thisNote++) {\n    // pin8 output the voice, every scale is 0.5 sencond\n    tone(8, melody[thisNote], duration);     \n\n    delay(1000);\n  }\n\n  // restart after two seconds \n  delay(2000);\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#upload-the-source-code-and-library-to-the-arduino","title":"Upload the source code and library to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#modify-the-code-for-the-lab","title":"Modify The Code For The Lab","text":"<p>Modify the code to do the following:</p> <p>Modify the code to have buzzer turn ON 100ms, turn OFF 1000ms, continuously.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#modified-source-code-for-lab-1","title":"Modified Source Code For Lab 1","text":"<p>Modified Ardunio Source Code File: Lab01ArduinoPassiveBuzzer.ino</p> <p>Library File: pitches.zip</p> <pre><code>// Lab01ArduinoPassiveBuzzer.ino\n//\n// Author: Steve Ellermannn\n// Modified: 2023-03-04\n//\n// Required Library: pitches.zip\n\n#include \"pitches.h\"\n\n// notes in the melody:\nint melody[] = {\n  NOTE_C5, NOTE_D5, NOTE_E5, NOTE_F5, NOTE_G5, NOTE_A5, NOTE_B5, NOTE_C6};\nint duration = 100;  // 100 milliseconds\n\nvoid setup() {\n\n}\n\nvoid loop() {  \n  for (int thisNote = 0; thisNote &lt; 8; thisNote++) {\n    // pin8 output the voice, every scale is 0.5 second\n    tone(8, melody[thisNote], duration);\n\n    // Output the voice after several minutes\n    delay(1000); // 1000 milliseconds\n  }\n\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#upload-the-source-code-and-library-to-the-arduino_1","title":"Upload the source code and library to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#how-to-upload-a-sketch-with-the-arduino-ide-2","title":"How to upload a sketch with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc How to upload a sketch with the Arduino IDE 2</li> </ul> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#requirements_1","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor. Results</p> <p>If you see the Arduino onboard LED blinking (100ms ON, 500ms OFF). Congratulations! Your PC / Arduino have passed the System Verification Test.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#how-to-add-library-files-to-the-arduino-ide-2","title":"How To Add Library Files To The Arduino IDE 2","text":"<p>From within the Arduino IDE, with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the pitches.zip file downloaded from this page.</p> <ul> <li>Library File: pitches.zip</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#how-to-install-a-library-with-the-arduino-ide-2","title":"How to install a library with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc Installing libraries</li> </ul> <p>A large part of the Arduino programming experience is the use of libraries. There are thousands of libraries that can be found online, and the best documented ones can be found and installed directly through the editor.</p> <p>In this tutorial, we will go through how to install a library using the library manager in the Arduino IDE 2. We will also show how to access examples from a library that you have installed.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#requirements_2","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#why-use-libraries","title":"Why Use Libraries?","text":"<p>Libraries are incredibly useful when creating a project of any type. They make our development experience much smoother, and there almost an infinite amount out there. They are used to interface with many different sensors, RTCs, Wi-Fi modules, RGB matrices and of course with other components on your board.</p> <p>Arduino has many official libraries, but the real heroes are the Arduino community, who develop, maintain and improve their libraries on a regular basis.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#installing-a-library","title":"Installing a Library","text":"<p>Installing a library is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the left column. Here, we can see a couple of icons. Let's click the on the \"library\" icon.</p> </li> </ol> <p></p> <ol> <li>A list will now appear of all available libraries, where we can also search for the library we want to use. In this example, we are going to install the RTCZero library. Click on the \"INSTALL\" button to install the library.</li> </ol> <p></p> <ol> <li>This process should not take too long, but allow up to a minute to install it.</li> </ol> <p></p> <ol> <li>When it is finished, we can take a look at the library in the library manager column, where it should say \"INSTALLED\".</li> </ol> <p></p> <p>Congratulations! You have now successfully downloaded and installed a library on your machine.</p>","boost":1},{"location":"arduino/labs/lab-1-passive-buzzer/#including-a-library","title":"Including a Library","text":"<p>To use a library, you first need to include the library at the top of the sketch.</p> <p></p> <p>Almost all libraries come with already made examples that you can use. These are accessible through File &gt; Examples &gt; {Library} &gt; {Example}. In this example, we are choosing the RTCZero &gt; SimpleRTC.</p> <p></p> <p>You can also access library examples directly in the library manager, by clicking the three dots next to the installed library, like this: </p> <p></p> <p>The chosen example will now open up in a new window, and you can start using it however you want to.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/","title":"Arduino Lab 2 - Servo Motor","text":"","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#overview","title":"Overview","text":"<p>Servo is a type of geared motor that can only rotate 180 degrees. It is controlled by sending electrical pulses from your UNO R3 board. These pulses tell the servo what position it should move to. The Servo has three wires, of which the brown one is the ground wire and should be connected to the GND port of UNO, the red one is the power wire and should be connected to the 5v port, and the orange one is the signal wire and should be connected to the Dig #9 port.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#requirements","title":"Requirements:","text":"<ul> <li>Arduino IDE (Arduino 2 was used for this document)</li> <li>(1) x Arduino Uno R3 or Elegoo Uno R3</li> <li>(1) x Servo Motor SG90</li> <li>(3) x M-M wires (Male to Male jumper wires)</li> <li>(1) x USB 2.0 Type A to USB 2.0 Type B Cable</li> <li>(Optional) Phillips #0 Screwdriver to attach one of the three horns (arms) to the servo. They can be press-fit on for the purpose of this lab.</li> <li>(Optional) (1) x Apple USB-C to USB Adapter for macOS Users</li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#datasheets","title":"Datasheets:","text":"<ul> <li>Arduino UNO R3 Datasheet</li> <li>ELEGOO UNO R3 Datasheet</li> <li>Servo Motor SG90 Datasheet</li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#component-introduction","title":"Component Introduction","text":"<p>Servo Motor SG90 - Universal for JR and FP connector - Cable length : 25cm - No load; Operating speed: 0.12 sec / 60 degree (4.8V), 0.10 sec / 60 degree (6.0V) - Stall torque (4.8V): 1.6kg/cm - Temperature : -30~60'C - Dead band width: 5us - Working voltage: 3.5~6V - Dimension : 1.26 in x 1.18 in x 0.47 in (3.2 cm x 3 cm x 1.2 cm) - Weight : 4.73 oz (134 g)</p> <p></p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#connection","title":"Connection","text":"","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#schematic","title":"Schematic","text":"","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#wiring-diagram","title":"Wiring diagram","text":"<p>Note For Servo Motor SG90:</p> <ul> <li>The BROWN wire from the servo motor connects to GND on the Elegoo Uno R3 board with an M-M wire.</li> <li>The RED wire from the servo motor connects to 5V on the Elegoo Uno R3 board with an M-M wire.</li> <li>The ORANGE wire from the servo motor connects to ~9 on the Elegoo Uno R3 board with an M-M wire.</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#example-picture","title":"Example Picture","text":"<p>In the picture, the brown wire of servo is connected via the black M-M wires, the red one is connected via the red M-M wires, and the orange one is connected via the yellow M-M wires.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#example-code","title":"Example Code","text":"<ul> <li> <p>Ardunio Example Source Code File: Lab02ArduinoServoExampleCode.ino</p> </li> <li> <p>Library File: Servo.zip</p> </li> </ul> <pre><code>//www.elegoo.com\n//2016.12.08\n#include &lt;Servo.h&gt;\n\nServo myservo;  // create servo object to control a servo\n// twelve servo objects can be created on most boards\n\nint pos = 0;    // variable to store the servo position\n\nvoid setup() {\n  Serial.begin(9600);\n  myservo.attach(9);  // attaches the servo on pin 9 to the servo object\n}\n\nvoid loop() {\n  for (pos = 0; pos &lt;= 180; pos += 1) { // goes from 0 degrees to 180 degrees\n    // in steps of 1 degree\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\n    delay(15);                       // waits 15ms for the servo to reach the position\n  }\n  for (pos = 180; pos &gt;= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\n    delay(15);                       // waits 15ms for the servo to reach the position\n  }\n\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#upload-the-code-to-the-arduino","title":"Upload the code to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#modify-the-code-for-the-lab","title":"Modify The Code For The Lab","text":"<p>Modify the code to do the following:</p> <ul> <li> <p>Move Servo Motor Clockwise 180 deg</p> </li> <li> <p>Stop 1 second</p> </li> <li> <p>Move Servo Motor Counterclockwise 180 deg</p> </li> <li> <p>Stop 1 second</p> </li> <li> <p>repeat continuously</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#source-code-for-lab-2","title":"Source Code For Lab 2","text":"<ul> <li> <p>Modified Ardunio Source Code File: Lab02ArduinoServo.ino</p> </li> <li> <p>Library file: Servo.zip</p> </li> </ul> <pre><code>// Lab02ArduinoServo.ino\n//\n// Modified by: Steve Ellermann\n// Modified date:  2023-03-01\n// \n// Original code by: www.elegoo.com\n// Original date: 2016-12-18\n//\n// Library Required: Servo.zip\n// https://github.com/arduino-libraries/Servo\n\n#include &lt;Servo.h&gt;\n\nServo myservo;                             // create servo object to control a servo\n                                           // twelve servo objects can be created on most boards\n\nint pos = 0;                               // variable to store the servo position\n\nvoid setup() {\n  Serial.begin(9600);\n  myservo.attach(9);                       // attaches the servo on pin 9 to the servo object\n}\n\nvoid loop() {\n  for (pos = 0; pos &lt;= 180; pos += 1) {    // goes from 0 degrees to 180 degrees\n                                           // in steps of 1 degree\n    myservo.write(pos);                    // tell servo to go to position in variable 'pos'\n    delay(5);                              // waits 15ms for the servo to reach the position\n  }\n\n  delay(1000);                             // wait 1 second\n\n  for (pos = 180; pos &gt;= 0; pos -= 1) {    // goes from 180 degrees to 0 degrees\n    myservo.write(pos);                    // tell servo to go to position in variable 'pos'\n    delay(5);                              // waits 15ms for the servo to reach the position\n  }\n\n  delay(1000);                             // wait 1 second\n\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#upload-the-code-to-the-arduino_1","title":"Upload the code to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#how-to-upload-a-sketch-with-the-arduino-ide-2","title":"How to upload a sketch with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc How to upload a sketch with the Arduino IDE 2</li> </ul> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#requirements_1","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor. Results</p> <p>If you see the Arduino onboard LED blinking (100ms ON, 500ms OFF). Congratulations! Your PC / Arduino have passed the System Verification Test.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#how-to-add-library-files-to-the-arduino-ide-2","title":"How To Add Library Files To The Arduino IDE 2","text":"<p>From within the Arduino IDE, with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the pitches.zip file downloaded from this page.</p> <ul> <li>Library File: Servo.zip</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#how-to-install-a-library-with-the-arduino-ide-2","title":"How to install a library with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc Installing libraries</li> </ul> <p>A large part of the Arduino programming experience is the use of libraries. There are thousands of libraries that can be found online, and the best documented ones can be found and installed directly through the editor.</p> <p>In this tutorial, we will go through how to install a library using the library manager in the Arduino IDE 2. We will also show how to access examples from a library that you have installed.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#requirements_2","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#why-use-libraries","title":"Why Use Libraries?","text":"<p>Libraries are incredibly useful when creating a project of any type. They make our development experience much smoother, and there almost an infinite amount out there. They are used to interface with many different sensors, RTCs, Wi-Fi modules, RGB matrices and of course with other components on your board.</p> <p>Arduino has many official libraries, but the real heroes are the Arduino community, who develop, maintain and improve their libraries on a regular basis.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#installing-a-library","title":"Installing a Library","text":"<p>Installing a library is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the left column. Here, we can see a couple of icons. Let's click the on the \"library\" icon.</p> </li> </ol> <p></p> <ol> <li>A list will now appear of all available libraries, where we can also search for the library we want to use. In this example, we are going to install the RTCZero library. Click on the \"INSTALL\" button to install the library.</li> </ol> <p></p> <ol> <li>This process should not take too long, but allow up to a minute to install it.</li> </ol> <p></p> <ol> <li>When it is finished, we can take a look at the library in the library manager column, where it should say \"INSTALLED\".</li> </ol> <p></p> <p>Congratulations! You have now successfully downloaded and installed a library on your machine.</p>","boost":1},{"location":"arduino/labs/lab-2-servo-motor/#including-a-library","title":"Including a Library","text":"<p>To use a library, you first need to include the library at the top of the sketch.</p> <p></p> <p>Almost all libraries come with already made examples that you can use. These are accessible through File &gt; Examples &gt; {Library} &gt; {Example}. In this example, we are choosing the RTCZero &gt; SimpleRTC.</p> <p></p> <p>You can also access library examples directly in the library manager, by clicking the three dots next to the installed library, like this: </p> <p></p> <p>The chosen example will now open up in a new window, and you can start using it however you want to.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/","title":"Arduino Lab 3 - Ultrasonic Sensor","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#overview","title":"Overview","text":"<p>Ultrasonic sensor is great for all kind of projects that need distance measurements, avoiding obstacles as examples.</p> <p>The HC-SR04 is inexpensive and easy to use since we will be using a Library specifically designed for these sensor. </p> <p>In this lab, you will learn how to use an ultrasonic sensor in conjunction with a passive buzzer to measure the distance of an object from the ultrasonic sensor with sound and text text as output.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#requirements","title":"Requirements:","text":"<ul> <li>Arduino IDE (Arduino 2 was used for this document)</li> <li>(1) x Arduino Uno R3 or Elegoo Uno R3</li> <li>(1) x Passive buzzer</li> <li>(1) x Ultrasonic sensor module HC-SR04</li> <li>(6) x F-M wires (Female to Male DuPont wires)</li> <li>(1) x USB 2.0 Type A to USB 2.0 Type B Cable</li> </ul>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#datasheets","title":"Datasheets:","text":"<ul> <li>Arduino UNO R3 Datasheet</li> <li>ELEGOO UNO R3 Datasheet</li> <li>HC-SR04 Ultrasonic Sensor Module Datasheet</li> <li>Passive Buzzer Datasheet</li> </ul>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#component-introduction","title":"Component Introduction","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#ultrasonic-sensor","title":"Ultrasonic sensor","text":"<p>Ultrasonic sensor module HC-SR04 provides 2cm-400cm non-contact measurement function, the ranging accuracy can reach to 3mm. The modules includes ultrasonic transmitters, receiver and control circuit. The basic principle of work:</p> <ol> <li>Using IO trigger for at least 10us high level signal,</li> <li>The Module automatically sends eight 40 kHz and detect whether there is a pulse signal back.</li> <li>IF the signal back, through high level , time of high output IO duration is the time from sending ultrasonic tore turning.</li> </ol> <p>Test distance = (high level time \u00d7 velocity of sound (340m/s) /2</p> <p>The Timing diagram is shown below. You only need to supply a short 10us pulse to the trigger input to start the ranging, and then the module will send out an 8 cycle burst of ultrasound at 40 kHz and raise its echo. The Echo is a distance object that is pulse width and the range in proportion .You can calculate the range through the time interval between sending trigger signal and receiving echo signal. Formula: us / 58 = centimeters or us / 148 =inch; or: the range = high level time * velocity (340M/S) / 2; we suggest to use over 60ms measurement cycle, in order to prevent trigger signal to the echo signal.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#ultrasonic-sensor-module-timing-diagram","title":"Ultrasonic Sensor Module Timing Diagram","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#ultrasonic-sensor-module-connection","title":"Ultrasonic Sensor Module Connection","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#schematic","title":"Schematic","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#wiring-diagram","title":"Wiring Diagram","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#example-picture","title":"Example Picture","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#code","title":"Code","text":"<p>Using a Library designed for these sensors will make our code short and simple. We include the library at the beginning of our code, and then by using simple commands we can control the behavior of the sensor.</p> <p>After wiring, please type in or open the program Lab03ArduinoSR04Example.ino in the Arduino IDE code and click UPLOAD to upload the program.</p> <p>Before you can run this, make sure that you have installed the HC-SR04.zip library or re-install it, if necessary. Otherwise, your code won't work.</p> <p>For details about loading the library file, see \"How To Insall A Library\" at the bottom of this document.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#example-ultrasonic-sensor-code","title":"Example Ultrasonic Sensor Code","text":"<ul> <li>Ardunio Example Source Code File: Lab03ArduinoSR04Example.ino</li> <li>Library File: HC-SR04.zip</li> </ul> <pre><code>// Example ultrasonic sensor module code\n// Lab03ArduinoSR04Example.ino\n//\n// Library Required: HC-SR04.zip\n//\n//  www.elegoo.com\n//  2016.12.08\n#include \"SR04.h\"\n#define TRIG_PIN 12\n#define ECHO_PIN 11\nSR04 sr04 = SR04(ECHO_PIN,TRIG_PIN);\nlong a;\n\nvoid setup() {\n   Serial.begin(9600);\n   delay(1000);\n}\n\nvoid loop() {\n   a=sr04.Distance();\n   Serial.print(a);\n   Serial.println(\"cm\");\n   delay(1000);\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#upload-the-code-to-the-arduino","title":"Upload the code to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#passive-buzzer","title":"Passive Buzzer:","text":"<p>The working principle of passive buzzer is using PWM generating audio to make the air to vibrate. Appropriately changed as long as the vibration frequency, it can generate different sounds. For example, sending a pulse of 523Hz, it can generate Alto Do, pulse of 587Hz, it can generate mid-range Re, pulse of 659Hz, it can produce mid-range Mi. By the buzzer, you can play a song. </p> <p>We should be careful not to use the UNO R3 board analog Write () function to generate a pulse to the buzzer, because the pulse output of analog Write () is fixed (500Hz).</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#passive-buzzer-connection","title":"Passive Buzzer Connection","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#schematic_1","title":"Schematic","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#wiring-diagram_1","title":"Wiring Diagram","text":"<p>Wiring the buzzer connected to the UNO R3 board, the red (positive) to the pin 8, black wire (negative) to the GND.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#example-picture_1","title":"Example Picture","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#code_1","title":"Code","text":"<p>After wiring, please type in or open the program Lab03ArduinoPassiveBuzzerExample.ino in the Arduino IDE code and click UPLOAD to upload the program.</p> <p>Before you can run this, make sure that you have installed the pitches.zip library or re-install it, if necessary. Otherwise, your code won't work.</p> <p>For details about loading the library file, see \"How To Insall A Library\" at the bottom of this document.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#example-passive-buzzer-code","title":"Example Passive Buzzer Code","text":"<ul> <li>Ardunio Example Source Code File: Lab03ArduinoPassiveBuzzerExample.ino</li> <li>Library File: pitches.zip</li> </ul> <pre><code>// Lab03ArduinoPassiveBuzzerExample.ino\n// Example passive buzzer code\n//\n// Library Required: pitches.zip\n//\n// www.elegoo.com\n// 2016.12.08\n\n#include \"pitches.h\"\n\n// notes in the melody:\nint melody[] = {\n  NOTE_C5, NOTE_D5, NOTE_E5, NOTE_F5, NOTE_G5, NOTE_A5, NOTE_B5, NOTE_C6};\nint duration = 500;  // 500 miliseconds\n\nvoid setup() {\n\n}\n\nvoid loop() {  \n  for (int thisNote = 0; thisNote &lt; 8; thisNote++) {\n    // pin8 output the voice, every scale is 0.5 sencond\n    tone(8, melody[thisNote], duration);\n\n    // Output the voice after several minutes\n    delay(1000);\n  }\n\n  // restart after two seconds \n  delay(2000);\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#upload-the-source-code-and-library-to-the-arduino","title":"Upload the source code and library to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#modify-the-code-for-the-lab","title":"Modify The Code For The Lab","text":"<p>Modify the code to do the following:</p> <pre><code>Read distance (between your hand and the sensor) using Ultrasonic sensor:\n\nif (distance &gt; 5 cm)\n{\n    turn Onboard LED ON;\n    Buzzer On;\n    delay(100 ms);\n    turn Onboard LED OFF;\n    Buzzer OFF;\n    delay(1000 ms);\n}\n\nif (distance &lt;= 5 cm)\n{\n    turn Onboard LED ON; \n    Buzzer On;\n    delay(100 ms);\n    turn Onboard LED OFF;\n    Buzzer OFF\n    delay(100 ms);\n}\nrepeat continuously\n</code></pre>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#putting-it-all-together-ultrasonic-sensor-and-the-passive-buzzer","title":"Putting it all together, Ultrasonic Sensor and the Passive Buzzer","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#wiring-diagram_2","title":"Wiring Diagram","text":"","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#source-code-for-lab-3","title":"Source Code For Lab 3","text":"<ul> <li>Modified Ardunio Source Code File: Lab03ArduinoLibrariesRequired.ino</li> <li>Library File: HC-SR04.zip</li> <li>Library File: pitches.zip</li> </ul> <pre><code>// Lab03ArduinoLibrariesRequired.ino\n// \n// Author: Steve Ellermannn\n// Modified: 2023-02-28\n//\n// Library required: HC-SR04.zip\n// Library required: pitches.zip\n//\n// https://www.arduino.cc/reference/en/\n//\n// Ardunio (Elegoo) Uno R3 Board\n// 5V Passive Buzzer\n// HC-SR04 Ultrasonic Module\n//\n// Passive Bussier Wiring\n// + to Digital \"8\"\n// - to Digital \"GND\"\n//\n// HC-SR04 Ultrasonic Module Wiring\n// VCC to Power \"5V\"\n// TRIG to Digital \"12\"\n// ECHO to Ditial \"11\"\n// GND to Power \"GND\" \n\n// Library for Ultrasonic Sennsor\n#include \"SR04.h\"\n// Library for Passive Buzzer\n#include \"pitches.h\"\n\n// For the ultrasonic sensor\n#define TRIG_PIN 12\n#define ECHO_PIN 11\n\n// For the passive buzzer\n#define BUZZER_PIN 8\n\nSR04 sr04 = SR04(ECHO_PIN,TRIG_PIN);\n\nlong distance;\n\nvoid setup() {\n   Serial.begin(9600);\n}\n\n// repeat infinitely \nvoid loop() {\n   distance=sr04.Distance();\n   Serial.print(\"Distance: \");\n   Serial.print(distance);\n   Serial.println(\" cm\");\n   delay(100);\n\n   if (distance &gt; 5) {\n     // turn the LED on (HIGH is the voltage level)\n     digitalWrite(LED_BUILTIN, HIGH);\n\n     // play a tone on the passive buzzer\n     tone(8, NOTE_C5, 100);\n\n     // wait for 100 milliseconds\n     delay(100);\n\n     // turn the LED off by making the voltage LOW                      \n     digitalWrite(LED_BUILTIN, LOW);\n\n     // turn the tone off\n     noTone(8);\n\n    // wait for 1000 milliseconds\n      delay(1000);\n   }\n\n  if (distance &lt;= 5) {\n     // turn the LED on (HIGH is the voltage level)\n     digitalWrite(LED_BUILTIN, HIGH);\n\n     // play a tone on the passive buzzer\n     tone(8, NOTE_G5, 100);\n\n     // wait for 100 milliseconds\n     delay(100);\n\n     // turn the LED off by making the voltage LOW                      \n     digitalWrite(LED_BUILTIN, LOW);\n\n     // turn the tone off\n     noTone(8);\n\n    // wait for 100 milliseconds\n      delay(100);\n  }\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#how-to-upload-a-sketch-with-the-arduino-ide-2","title":"How to upload a sketch with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc How to upload a sketch with the Arduino IDE 2</li> </ul> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#requirements_1","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor. Results</p> <p>If you see the Arduino onboard LED blinking (100ms ON, 500ms OFF). Congratulations! Your PC / Arduino have passed the System Verification Test.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#how-to-add-library-files-to-the-arduino-ide-2","title":"How To Add Library Files To The Arduino IDE 2","text":"<p>From within the Arduino IDE, with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the pitches.zip file downloaded from this page.</p> <ul> <li>Library File: HC-SR04.zip</li> <li>Library File: pitches.zip</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#how-to-install-a-library-with-the-arduino-ide-2","title":"How to install a library with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc Installing libraries</li> </ul> <p>A large part of the Arduino programming experience is the use of libraries. There are thousands of libraries that can be found online, and the best documented ones can be found and installed directly through the editor.</p> <p>In this tutorial, we will go through how to install a library using the library manager in the Arduino IDE 2. We will also show how to access examples from a library that you have installed.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#requirements_2","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#why-use-libraries","title":"Why Use Libraries?","text":"<p>Libraries are incredibly useful when creating a project of any type. They make our development experience much smoother, and there almost an infinite amount out there. They are used to interface with many different sensors, RTCs, Wi-Fi modules, RGB matrices and of course with other components on your board.</p> <p>Arduino has many official libraries, but the real heroes are the Arduino community, who develop, maintain and improve their libraries on a regular basis.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#installing-a-library","title":"Installing a Library","text":"<p>Installing a library is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the left column. Here, we can see a couple of icons. Let's click the on the \"library\" icon.</p> </li> </ol> <p></p> <ol> <li>A list will now appear of all available libraries, where we can also search for the library we want to use. In this example, we are going to install the RTCZero library. Click on the \"INSTALL\" button to install the library.</li> </ol> <p></p> <ol> <li>This process should not take too long, but allow up to a minute to install it.</li> </ol> <p></p> <ol> <li>When it is finished, we can take a look at the library in the library manager column, where it should say \"INSTALLED\".</li> </ol> <p></p> <p>Congratulations! You have now successfully downloaded and installed a library on your machine.</p>","boost":1},{"location":"arduino/labs/lab-3-ultrasonic-sensor/#including-a-library","title":"Including a Library","text":"<p>To use a library, you first need to include the library at the top of the sketch.</p> <p></p> <p>Almost all libraries come with already made examples that you can use. These are accessible through File &gt; Examples &gt; {Library} &gt; {Example}. In this example, we are choosing the RTCZero &gt; SimpleRTC.</p> <p></p> <p>You can also access library examples directly in the library manager, by clicking the three dots next to the installed library, like this: </p> <p></p> <p>The chosen example will now open up in a new window, and you can start using it however you want to.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/","title":"Arduino Lab 4 - Stepper Motor Control","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#overview","title":"Overview","text":"<p>In this lab, you will learn to drive a stepper motor.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#requirements","title":"Requirements:","text":"<ul> <li>Arduino IDE (Arduino 2 was used for this document)</li> <li>(1) x Arduino Uno R3 or Elegoo Uno R3</li> <li>(1) x 830 tie-point plug -in Solderless Breadboard</li> <li>(1) x ULN2003 stepper motor driver module PCB</li> <li>(1) x 28BYJ-48 \u2013 5V Stepper Motor</li> <li>(1) x 9V 1A Snap-On Connector Clip Adapter</li> <li>(1) x 9V battery</li> <li>(1) x MB-V2 Breadboard Power Supply Module</li> <li>(6) x F-M wires (Female to Male DuPont wires)</li> <li>(1) x M-M wire (Male to Male jumper wire)</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#datasheets","title":"Datasheets:","text":"<ul> <li>Arduino UNO R3 Datasheet</li> <li>ELEGOO UNO R3 Datasheet</li> <li>830 tie-point plug -in Solderless Breadboard</li> <li>ULN2003 stepper motor driver module PCB</li> <li>28BYJ-48 \u2013 5V Stepper Motor Datasheet</li> <li>9V battery</li> <li>MB-V2 Breadboard Power Supply Module</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#required-libraries","title":"Required Libraries:","text":"<ul> <li>Stepper.zip version 1.1.3 was used for this document. More info can be found at https://www.arduino.cc/reference/en/libraries/stepper/ and the GitHub repository is located at https://github.com/arduino-libraries/Stepper.</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#component-introduction","title":"Component Introduction","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#28byj-48-5v-stepper-motor","title":"28BYJ-48 \u2013 5V Stepper Motor","text":"<p>A stepper motor is an electromechanical device which converts electrical pulses into discrete mechanical movements. The shaft or spindle of a stepper motor rotates in discrete step increments when electrical command pulses are applied to it in the proper sequence. The motors rotation has several direct relationships to these applied input pulses. The sequence of the applied pulses is directly related to the direction of motor shafts rotation. The speed of the motor shafts rotation is directly related to the frequency of the input pulses and the length of rotation is directly related to the number of input pulses applied. One of the most significant advantages of a stepper motor is its ability to be accurately controlled in an open loop system. Open loop control means no feedback information about position is needed. This type of control eliminates the need for expensive sensing and feedback devices such as optical encoders. Your position is known simply by keeping track of the input step pulses.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#stepper-motor-28byj-48-parameters","title":"Stepper motor 28BYJ-48 Parameters","text":"<ul> <li>Model: 28BYJ-48</li> <li>Rated voltage: 5V DC</li> <li>Number of Phase: 4</li> <li>Speed Variation Ratio: 1 / 64</li> <li>Stride Angle: 5.625\u00b0 / 64</li> <li>Frequency: 100Hz</li> <li>DC resistance: 50\u03a9 \u00b17% (25\u00b0C)</li> <li>Idle In-traction Frequency: &gt; 600Hz</li> <li>Idle Out-traction Frequency: &gt; 1000Hz</li> <li>In-traction Torque &gt; 34.3mN.m (120Hz)</li> <li>Self-positioning Torque &gt; 34.3mN.m</li> <li>Friction torque: 600-1200 gf.cm</li> <li>Pull in torque: 300 gf.cm</li> <li>Insulated resistance &gt; 10M\u03a9 (500V)</li> <li>Insulated electricity power: 600VAC / 1mA / 1s</li> <li>Insulation grade: A</li> <li>Rise in Temperature &lt; 40K(120Hz)</li> <li>Noise &lt; 35dB (120Hz, No load, 10cm)</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#interfacing-circuits","title":"Interfacing Circuits","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#wiring-diagram","title":"Wiring Diagram","text":"<p>The bipolar stepper motor usually has four wires coming out of it. Unlike unipolar steppers, bipolar steppers have no common center connection. They have two independent sets of coils instead. You can distinguish them from unipolar steppers by measuring the resistance between the wires. You should find two pairs of wires with equal resistance. If you\u2019ve got the leads of your meter connected to two wires that are not connected (i.e. not attached to the same coil), you should see infinite resistance (or no continuity).</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#breadboard-power-supply","title":"Breadboard Power Supply","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#mb-v2-breadboard-power-supply-module","title":"MB-V2 Breadboard Power Supply Module","text":"<p>The small DC motor is likely to use more power than an UNO R3 board digital output can handle directly. If we tried to connect the motor straight to an UNO R3 board pin, there is a good chance that it could damage the UNO R3 board. So we use a power supply module provides power supply.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#product-specifications","title":"Product Specifications:","text":"<ul> <li>Locking On/Off Switch</li> <li>LED Power Indicator</li> <li>Input voltage: 6.5-9v (DC) via 5.5mm x 2.1mm plug</li> <li>Output voltage: 3.3V/5v</li> <li>Maximum output current: 700 mA</li> <li>Independent control rail output. 0v, 3.3v, 5v to breadboard</li> <li>Output header pins for convenient external use</li> <li>Size: 2.1 in x 1.4 in</li> <li>USB device connector onboard to power external device</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#setting-up-output-voltage-of-the-breadboard-power-supply-module","title":"Setting up output voltage of the breadboard power supply module:","text":"<p>The left and right voltage output can be configured independently. To select the output voltage, move jumper to the corresponding pins. Note: power indicator LED and the breadboard power rails will not power on if both jumpers are in the \u201cOFF\u201d position.</p> <p></p> <p>Warning</p> <p>Make sure that you align the module correctly on the breadboard. The negative pin(-) on module lines up with the blue line(-) on breadboard and that the positive pin(+) lines up with the red line(+). Failure to do so could result in you accidentally reversing the power to your project.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#uln2003-driver-board","title":"ULN2003 Driver Board","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#uln2003-stepper-motor-driver-module-pcb","title":"ULN2003 Stepper Motor Driver Module PCB","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#product-description","title":"Product Description","text":"<ul> <li>Size: 42 mm x 30 mm</li> <li>Use ULN2003 driver chip, 500mA</li> <li>A B C D LED indicating the four phase stepper motor working condition.</li> <li>White jack is the four phase stepper motor standard jack.</li> <li>Power pins are separated</li> <li>We kept the rest pins of the ULN2003 chip for your further prototyping.</li> </ul> <p>The simplest way of interfacing a unipolar stepper to Arduino is to use a breakout for ULN2003A transistor array chip. The ULN2003A contains seven Darlington transistor drivers and is somewhat like having seven TIP120 transistors all in one package. The ULN2003A can pass up to 500 mA per channel and has an internal voltage drop of about 1V when on. It also contains internal clamp diodes to dissipate voltage spikes when driving inductive loads. To control the stepper, apply voltage to each of the coils in a specific sequence.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#the-sequence-would-go-like-this","title":"The sequence would go like this:","text":"<p>Here are schematics showing how to interface a unipolar stepper motor to four controller pins using a ULN2003A, and showing how to interface using four com.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#connection","title":"Connection","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#schematic","title":"Schematic","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#wiring-diagram_1","title":"Wiring Diagram","text":"<p>We are using 4 pins to control the Stepper. </p> <p>Pin 8-11 are controlling the Stepper motor. </p> <p>We connect the Ground from to UNO to the Stepper motor.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#example-photo","title":"Example Photo","text":"","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#code","title":"Code","text":"<p>After wiring, please open the example program Lab04ArduinoStepperExample.ino in the Arduino IDE and click UPLOAD to upload the program from the Arduino IDE.</p> <p>Before you can run this, make sure that you have installed the Stepper-1.1.3.zip library or re-install it to the Arduino IDE, if necessary. Otherwise, your code won't work.</p> <p>For details about loading the library file, see \"How To Add Library Files To The Arduino IDE\" at the bottom of this document.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#example-code","title":"Example Code","text":"<ul> <li> <p>Ardunio Example Source Code File: Lab04ArduinoStepperExample.ino</p> </li> <li> <p>Library File: Stepper-1.1.3.zip</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#lab04arduinostepperexampleino","title":"Lab04ArduinoStepperExample.ino","text":"<pre><code>// Lab04ArduinoStepperExample.ino\n//\n// Library Required: Stepper.zip\n//\n//www.elegoo.com\n//2018.10.25\n\n/*\n  Stepper Motor Control - one revolution\n\n  This program drives a unipolar or bipolar stepper motor.\n  The motor is attached to digital pins 8 - 11 of the Arduino.\n\n  The motor should revolve one revolution in one direction, then\n  one revolution in the other direction.\n\n*/\n\n#include &lt;Stepper.h&gt;\n\nconst int stepsPerRevolution = 2048;  // change this to fit the number of steps per revolution\nconst int rolePerMinute = 15;         // Adjustable range of 28BYJ-48 stepper is 0~17 rpm\n\n// initialize the stepper library on pins 8 through 11:\nStepper myStepper(stepsPerRevolution, 8, 10, 9, 11);\n\nvoid setup() {\n  myStepper.setSpeed(rolePerMinute);\n  // initialize the serial port:\n  Serial.begin(9600);\n}\n\nvoid loop() {  \n  // step one revolution  in one direction:\n  Serial.println(\"clockwise\");\n  myStepper.step(stepsPerRevolution);\n  delay(500);\n\n  // step one revolution in the other direction:\n  Serial.println(\"counterclockwise\");\n  myStepper.step(-stepsPerRevolution);\n  delay(500);\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#upload-the-code-to-the-arduino","title":"Upload the code to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#modify-the-code-for-the-lab","title":"Modify The Code For The Lab","text":"<p>Below is the pseudocode of the changes that need to be made.</p> <pre><code>Initialize direction = 0     \nloop()\n{ \n    toggle direction;\n\n    if (direction==1)\n      {\n       move stepper motor clockwise for 10 seconds;\n      }\n\n    if (direction==0) \n            { \n       move stepper motor counterclockwise for 10 seconds; \n       }\n} \nrepeat continuously\n</code></pre>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#source-code-for-lab-4","title":"Source Code For Lab 4:","text":"<ul> <li> <p>Download Ardunio Source Code File: Lab04Arduino.ino</p> </li> <li> <p>Download Library File: Stepper-1.1.3.zip</p> </li> </ul> <pre><code>// Lab04Arduino.ino\n// -----------------------------------\n// Author: Steve Ellermann\n// Created: 2023-03-21\n// Modified: 2023-03-22\n// -----------------------------------\n// This program drives a unipolar or bipolar stepper motor.\n// The motor is attached to digital pins 8 - 11 of the Arduino.\n//\n// The stepper motor should revolve clockwise for 10 seconds, then stepper\n// motor should revolve counterclockwise for 10 seconds.\n// -----------------------------------\n// Library Required: Stepper.zip\n// https://github.com/arduino-libraries/Stepper\n// -----------------------------------\n// Components Used:\n// -----------------------------------\n// Arduino UNO R3 or Elegoo UNO R3\n// 28BYJ-48 Stepper Motor\n// 4 Phase ULN2003A Stepper Motor Driver PCB\n// MB-V2 Breadboard Power Supply Module\n// 830 Tie Point Solderless Plug-In Breadboard\n// 9V Battery\n// 9V Battery Snap-On Connector Clip\n// USB A to USB B connector Cable\n// (6) x F-M wires (Female to Male DuPont wires)\n// (1) x M-M wire (Male to Male jumper wire)\n// (1) x wire twist tie\n//\n// -----------------------------------\n// Wiring\n// -----------------------------------\n// Stepper Motor Driver PCB INT1 to 11\n// Stepper Motor Driver PCB INT2 to 10\n// Stepper Motor Driver PCB INT3 to 9\n// Stepper Motor Driver PCB INT4 to 8\n// Stepper Motor Driver PCB - to Breadboard -5V \n// Stepper Motor Driver PCB + to Breadboard +5V\n// Stepper Motor Driver PCB: Stepper moto plugs into stepper motor driver PCB\n// Arduino UNO R3 or Elegoo UNO R3 Power GND to Breadboard -3.3V\n//\n// -----------------------------------\n\n// libraries\n#include &lt;Stepper.h&gt;\n\n// constants won't change.\nconst int stepsPerRevolution = 2048;   // change this to fit the number of steps per revolution\nconst int revolutionsPerMinute = 6;    // Adjustable range of 28BYJ-48 stepper is 0~17 rpm\nconst long interval = 10000;           // interval at which to rotate (milliseconds)\n\n// variables will change:\nunsigned long previousMillis = 0;      // will store last time stepper motor was updated\nunsigned long rotationDirection = 0;   // Initialize rotation direction to zero\n\n// initialize the stepper library on pins 8 through 11:\nStepper myStepper(stepsPerRevolution, 8, 10, 9, 11);\n\nvoid setup() {\n  // set the stepper motor speed\n  myStepper.setSpeed(revolutionsPerMinute);\n  // initialize the serial port:\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  // will store the number of milliseconds passed since the program begain running\n  unsigned long currentMillis = millis();\n\n  if (currentMillis - previousMillis &gt;= interval) {\n    // save the last time you changed rotation direction in milliseconds\n    previousMillis = currentMillis;\n\n    // toggle rotation direction\n    rotationDirection = 1 - rotationDirection;\n  }\n\n  // if rotation direction = 1, move stepper motor clockwise\n  if (rotationDirection == 1) {\n    // print rotation direction\n    Serial.println(\"clockwise\");    \n    // step in clockwise direction\n    myStepper.step(stepsPerRevolution);\n  } \n\n  // if rotation direction = 0, move stepper motor counterclockwise\n  if (rotationDirection == 0) {\n    // print rotation direction\n    Serial.println(\"counterclockwise\");\n    // step in counterclockwise direction\n    myStepper.step(-stepsPerRevolution);\n  }\n\n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#upload-the-source-code-and-library-to-the-arduino","title":"Upload the source code and library to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#how-to-upload-a-sketch-with-the-arduino-ide-2","title":"How to upload a sketch with the Arduino IDE 2","text":"<p>Info</p> <ul> <li>Source: Arduino.cc How to upload a sketch with the Arduino IDE 2</li> </ul> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#requirements_1","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor. Results</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#how-to-add-library-files-to-the-arduino-ide","title":"How To Add Library Files To The Arduino IDE","text":"<p>Arduino IDE 2</p> <p>From within the Arduino IDE with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the Stepper.zip file downloaded from this page.</p> <ul> <li>Download Library File: Stepper-1.1.3.zip</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#how-to-add-library-files-to-the-arduino-ide-2","title":"How To Add Library Files To The Arduino IDE 2","text":"<p>From within the Arduino IDE, with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the Stepper.zip file downloaded from this page.</p> <p>Stepper.zip</p> <p></p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#how-to-install-a-library-with-the-arduino-ide-2","title":"How to install a library with the Arduino IDE 2","text":"<p>Note</p> <ul> <li>Source: Arduino.cc Installing libraries</li> </ul> <p>A large part of the Arduino programming experience is the use of libraries. There are thousands of libraries that can be found online, and the best documented ones can be found and installed directly through the editor.</p> <p>In this tutorial, we will go through how to install a library using the library manager in the Arduino IDE 2. We will also show how to access examples from a library that you have installed.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#requirements_2","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#why-use-libraries","title":"Why Use Libraries?","text":"<p>Libraries are incredibly useful when creating a project of any type. They make our development experience much smoother, and there almost an infinite amount out there. They are used to interface with many different sensors, RTCs, Wi-Fi modules, RGB matrices and of course with other components on your board.</p> <p>Arduino has many official libraries, but the real heroes are the Arduino community, who develop, maintain and improve their libraries on a regular basis.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#installing-a-library","title":"Installing a Library","text":"<p>Installing a library is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the left column. Here, we can see a couple of icons. Let's click the on the \"library\" icon.</p> </li> </ol> <p></p> <ol> <li>A list will now appear of all available libraries, where we can also search for the library we want to use. In this example, we are going to install the RTCZero library. Click on the \"INSTALL\" button to install the library.</li> </ol> <p></p> <ol> <li>This process should not take too long, but allow up to a minute to install it.</li> </ol> <p></p> <ol> <li>When it is finished, we can take a look at the library in the library manager column, where it should say \"INSTALLED\".</li> </ol> <p></p> <p>Congratulations! You have now successfully downloaded and installed a library on your machine.</p>","boost":1},{"location":"arduino/labs/lab-4-stepper-motor-control/#including-a-library","title":"Including a Library","text":"<p>To use a library, you first need to include the library at the top of the sketch.</p> <p></p> <p>Almost all libraries come with already made examples that you can use. These are accessible through File &gt; Examples &gt; {Library} &gt; {Example}. In this example, we are choosing the RTCZero &gt; SimpleRTC.</p> <p></p> <p>You can also access library examples directly in the library manager, by clicking the three dots next to the installed library, like this: </p> <p></p> <p>The chosen example will now open up in a new window, and you can start using it however you want to.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/","title":"Arduino Lab 5 - Simulation of Collision Avoidance System","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#overview","title":"Overview","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#requirements","title":"Requirements","text":"<ul> <li>Arduino IDE (Arduino 2 was used for this document)</li> <li>(1) x SG90 Servo Motor</li> <li>(1) x HC-SR04 Ultrasonic Sensor Module</li> <li>(1) x MB-V2 Breadboard Power Supply Module</li> <li>(1) x 5V Passive Buzzer</li> <li>(1) x 28BYJ-48 5V Stepper Motor</li> <li>(1) x 830 tie-points breadboard</li> <li>(1) x 9V 1A Battery Adapter</li> <li>(1) x 9V Battery</li> <li>(8) x F-M wires (Female to Male DuPont wires)</li> <li>(8) x M-M wire (Male to Male jumper wire)</li> <li>(1) x USB 2.0 Type A to USB 2.0 Type B Cable</li> <li>(Optional) (1) x USB-C to USB Adapter</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#datasheets","title":"Datasheets","text":"<ul> <li>Arduino UNO R3 Datasheet</li> <li>ELEGOO UNO R3</li> <li>830 tie-point plug -in Solderless Breadboard</li> <li>ULN2003 stepper motor driver module PCB</li> <li>28BYJ-48 \u2013 5V Stepper Motor Datasheet</li> <li>Servo Motor SG90 Datasheet</li> <li>HC-SR04 Ultrasonic Sensor Module Datasheet</li> <li>Passive Buzzer Datasheet</li> <li>9V battery</li> <li>MB-V2 Breadboard Power Supply Module</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#required-libraries","title":"Required Libraries","text":"<ul> <li>pitches.zip</li> <li>HC-SR04.zip</li> <li>Servo-1.2.1.zip</li> <li>Stepper.zip</li> </ul> <p>More information about the Servo library is located at https://www.arduino.cc/reference/en/libraries/servo/</p> <p>The GitHub repository for the Servo library is located at https://github.com/arduino-libraries/Servo</p> <p>More info about the Stepper library can be found at https://www.arduino.cc/reference/en/libraries/stepper/ </p> <p>The GitHub repository for the Stepper library is located at https://github.com/arduino-libraries/Stepper</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#28byj-48-5v-stepper-motor","title":"28BYJ-48 \u2013 5V Stepper Motor","text":"<p>A stepper motor is an electromechanical device which converts electrical pulses into discrete mechanical movements. The shaft or spindle of a stepper motor rotates in discrete step increments when electrical command pulses are applied to it in the proper sequence. The motors rotation has several direct relationships to these applied input pulses. The sequence of the applied pulses is directly related to the direction of motor shafts rotation. The speed of the motor shafts rotation is directly related to the frequency of the input pulses and the length of rotation is directly related to the number of input pulses applied. One of the most significant advantages of a stepper motor is its ability to be accurately controlled in an open loop system. Open loop control means no feedback information about position is needed. This type of control eliminates the need for expensive sensing and feedback devices such as optical encoders. Your position is known simply by keeping track of the input step pulses.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#stepper-motor-28byj-48-parameters","title":"Stepper Motor 28BYJ-48 Parameters","text":"<ul> <li>Model: 28BYJ-48</li> <li>Rated voltage: 5V DC</li> <li>Number of Phase: 4</li> <li>Speed Variation Ratio: 1 / 64</li> <li>Stride Angle: 5.625\u00b0 / 64</li> <li>Frequency: 100Hz</li> <li>DC resistance: 50\u03a9 \u00b17% (25\u00b0C)</li> <li>Idle In-traction Frequency: &gt; 600Hz</li> <li>Idle Out-traction Frequency: &gt; 1000Hz</li> <li>In-traction Torque &gt; 34.3mN.m (120Hz)</li> <li>Self-positioning Torque &gt; 34.3mN.m</li> <li>Friction torque: 600-1200 gf.cm</li> <li>Pull in torque: 300 gf.cm</li> <li>Insulated resistance &gt; 10M\u03a9 (500V)</li> <li>Insulated electricity power: 600VAC / 1mA / 1s</li> <li>Insulation grade: A</li> <li>Rise in Temperature &lt; 40K(120Hz)</li> <li>Noise &lt; 35dB (120Hz, No load, 10cm)</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#stepper-motor-wiring-diagram","title":"Stepper Motor Wiring Diagram","text":"<p>The bipolar stepper motor usually has four wires coming out of it. Unlike unipolar steppers, bipolar steppers have no common center connection. They have two independent sets of coils instead. You can distinguish them from unipolar steppers by measuring the resistance between the wires. You should find two pairs of wires with equal resistance. If you\u2019ve got the leads of your meter connected to two wires that are not connected (i.e. not attached to the same coil), you should see infinite resistance (or no continuity).</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#mb-v2-breadboard-power-supply-module","title":"MB-V2 Breadboard Power Supply Module","text":"<p>The small DC motor is likely to use more power than an UNO R3 board digital output can handle directly. If we tried to connect the motor straight to an UNO R3 board pin, there is a good chance that it could damage the UNO R3 board. So we use a power supply module provides power supply.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#product-specifications","title":"Product Specifications","text":"<ul> <li>Locking On/Off Switch</li> <li>LED Power Indicator</li> <li>Input voltage: 6.5-9v (DC) via 5.5mm x 2.1mm plug</li> <li>Output voltage: 3.3V/5v</li> <li>Maximum output current: 700 mA</li> <li>Independent control rail output. 0v, 3.3v, 5v to breadboard</li> <li>Output header pins for convenient external use</li> <li>Size: 2.1 in x 1.4 in</li> <li>USB device connector onboard to power external device</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#setting-up-output-voltage","title":"Setting up output voltage:","text":"<p>The left and right voltage output can be configured independently. To select the output voltage, move jumper to the corresponding pins.</p> <p>Note</p> <p>The power indicator LED and the breadboard power rails will not power on if both jumpers are in the \u201cOFF\u201d position.</p> <p></p> <p>Warning</p> <p>Make sure that you align the module correctly on the breadboard. The negative pin(-) on module lines up with the blue line(-) on breadboard and that the positive pin(+) lines up with the red line(+). Failure to do so could result in you accidentialy reversing the power to your project</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#uln2003-stepper-motor-driver-module-pcb","title":"ULN2003 Stepper Motor Driver Module PCB","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#product-description","title":"Product Description","text":"<ul> <li>Size: 42mmx30mm</li> <li>Use ULN2003 driver chip, 500mA</li> <li>A, B, C, and D LED lights indicating the four phase stepper motor working condition. </li> <li>White jack is the four phase stepper motor standard jack.</li> <li>Power pins are separated</li> <li>The rest pins of the ULN2003 chip for your further prototyping.</li> </ul> <p>The simplest way of interfacing a unipolar stepper to Arduino is to use a breakout for ULN2003A transistor array chip. The ULN2003A contains seven Darlington transistor drivers and is somewhat like having seven TIP120 transistors all in one package. The ULN2003A can pass up to 500 mA per channel and has an internal voltage drop of about 1V when on. It also contains internal clamp diodes to dissipate voltage spikes when driving inductive loads. To control the stepper, apply voltage to each of the coils in a specific sequence.</p> <p>The sequence would go like this</p> <p></p> <p>Here are schematics showing how to interface a unipolar stepper motor to four controller pins using a ULN2003A, and showing how to interface using four com</p> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#connection","title":"Connection","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#schematic","title":"Schematic","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#wiring-diagram","title":"Wiring Diagram","text":"<p>We are using 4 pins to control the Stepper.</p> <p>Pin 8-11 are controlling the Stepper motor.</p> <p>We connect the Ground from to UNO to the Stepper motor.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#example-photo","title":"Example Photo","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#servo-motor-sg90","title":"Servo Motor SG90","text":"<ul> <li>Universal for JR and FP connector</li> <li>Cable length: 25cm</li> <li>No load; Operating speed: 0.12 sec / 60 degree (4.8V), 0.10 sec / 60 degree (6.0V)</li> <li>Stall torque (4.8V): 1.6kg/cm</li> <li>Temperature : -30 ~ 60'C</li> <li>Dead band width: 5us</li> <li>Working voltage: 3.5~6V</li> <li>Dimension : 1.26 in x 1.18 in x 0.47 in (3.2 cm x 3 cm x 1.2 cm)</li> <li>Weight : 4.73 oz (134 g)</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#connection-schematic","title":"Connection Schematic","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#wiring-diagram_1","title":"Wiring Diagram","text":"<p>Note For Servo Motor SG90</p> <ul> <li>The BROWN wire from the servo motor connects to GND on the Uno R3 board with an M-M wire.</li> <li>The RED wire from the servo motor connects to 5V on the Uno R3 board with an M-M wire.</li> <li>The ORANGE wire from the servo motor connects to ~9 on the Uno R3 board with an M-M wire.</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#example-picture","title":"Example Picture","text":"<p>In the picture, the BROWN wire of servo is connected via the BLACK M-M wires, the RED one is connected via the RED M-M wires, and the ORANGE one is connected via the YELLOW M-M wires.</p> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#hc-sr04-ultrasonic-sensor-module","title":"HC-SR04 Ultrasonic Sensor Module","text":"<p>Ultrasonic sensor module HC-SR04 provides 2cm-400cm non-contact measurement function, the ranging accuracy can reach to 3mm. The modules includes ultrasonic transmitters, receiver and control circuit. The basic principle of work:</p> <ol> <li>Using IO trigger for at least 10us high level signal,</li> <li>The Module automatically sends eight 40 kHz and detect whether there is a pulse signal back.</li> <li>If the signal back, through high level , time of high output IO duration is the time from sending ultrasonic tore turning.</li> </ol> <p>Test distance = (high level time \u00d7 velocity of sound (340m/s) /2)</p> <p>The Timing diagram is shown below. You only need to supply a short 10us pulse to the trigger input to start the ranging, and then the module will send out an 8 cycle burst of ultrasound at 40 kHz and raise its echo. The Echo is a distance object that is pulse width and the range in proportion .You can calculate the range through the time interval between sending trigger signal and receiving echo signal. Formula: us / 58 = centimeters or us / 148 =inch; or: the range = high level time * velocity (340M/S) / 2; we suggest to use over 60ms measurement cycle, in order to prevent trigger signal to the echo signal.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#ultrasonic-sensor-module-timing-diagram","title":"Ultrasonic Sensor Module Timing Diagram","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#ultrasonic-sensor-module-connection","title":"Ultrasonic Sensor Module Connection","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#ultrasonic-sensor-schematic","title":"Ultrasonic Sensor Schematic","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#ultrasonic-sensor-wiring-diagram","title":"Ultrasonic Sensor Wiring Diagram","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#ultrasonic-sensor-example-picture","title":"Ultrasonic Sensor Example Picture","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#passive-buzzer","title":"Passive Buzzer","text":"<p>The working principle of passive buzzer is using PWM generating audio to make the air to vibrate. Appropriately changed as long as the vibration frequency, it can generate different sounds. For example, sending a pulse of 523Hz, it can generate Alto Do, pulse of 587Hz, it can generate mid-range Re, pulse of 659Hz, it can produce mid-range Mi. By the buzzer, you can play a song.</p> <p>We should be careful not to use the UNO R3 board analog <code>Write()</code> function to generate a pulse to the buzzer, because the pulse output of analog <code>Write()</code> is fixed (500Hz).</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#passive-buzzer-connection","title":"Passive Buzzer Connection","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#passive-buzzer-schematic","title":"Passive Buzzer Schematic","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#wiring-diagram_2","title":"Wiring Diagram","text":"<p>Wiring the buzzer connected to the UNO R3 board, the RED  Wire (positive) to the PIN 8, BLACK Wire (negative) to the GND.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#passive-buzzer-example-picture","title":"Passive Buzzer Example Picture","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#putting-it-all-together-breadboard-power-supply-stepper-motor-stepper-motor-driver-module-pcb-servo-motor-ultrasonic-sensor-and-the-passive-buzzer","title":"Putting it all together, Breadboard Power Supply, Stepper Motor, Stepper Motor Driver Module PCB, Servo Motor, Ultrasonic Sensor, and the Passive Buzzer","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#flow-chart","title":"Flow Chart","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#wiring-diagram_3","title":"Wiring Diagram","text":"","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#code","title":"Code","text":"<p>After wiring, please open the example program Lab05ArduinoCollisionAvoidance.ino in the Arduino IDE and click UPLOAD to upload the program from the Arduino IDE.</p> <p>Before you can run this, make sure that you have installed all of the the library files (Stepper-1.1.3.zip, HC-SR04.zip, pitches.zip, Servo-1.2.1.zip) or re-install it to the Arduino IDE, if necessary. Otherwise, your code will not work.</p> <p>For details about loading the library file, see How \"How To Add Library Files To The Arduino IDE\" at the bottom of this document.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#source-code-for-lab-5","title":"Source Code For Lab 5","text":"<ul> <li>Download Ardunio Source Code File: Lab05ArduinoCollisionAvoidance.ino</li> </ul> <p>Lab05ArduinoCollisionAvoidance.ino</p> Arduino <pre><code>// Lab05ArduinoCollisionAvoidance.ino\n//\n// Collision Avoidance System\n//\n// Author: Steve Ellermann\n// \n// Created:  2023-03-24\n// Modified: 2023-04-01\n//\n// Libraries Required:\n// Stepper.zip\n// HC-SR04.zip\n// pitches.zip\n// Servo.zip\n//\n//  Wiring:\n// -------------------------------------------------\n// Pin Digital GND | Breadboard 5V\n// Pin 13          | Echo - Ultrasonic Sensor\n// Pin 12          | Trig - Ultrasonic Sensor\n// Pin 11          | IN1 - ULN2003 Driver Board\n// Pin 10          | IN2 - ULN2003 Driver Board\n// Pin  9          | IN3 - ULN2003 Driver Board\n// Pin  8          | IN4 - ULN2003 Driver Board\n// Pin  7          | + on Passive Buzzer\n// Pin  6          | Orange Wire - SG90 Servo Motor\n// Power GND       | GND - Ultrasonic Sensor\n// Power 5V        | Breadboard 5V\n// -------------------------------------------------\n//\n// Supplies\n//\n// Software:\n// (1) x Arduino IDE (ver 2 was used)\n//\n// Hardware:\n// (1) x Elegoo UNO R3\n// (1) x SG90 Servo Motor\n// (1) x HC-SR04 Ultrasonic Sensor Module\n// (1) x MB-V2 Breadboard Power Supply Module\n// (1) x 5V Passive Buzzer\n// (1) x 28BYJ-48 5V Stepper Motor\n// (1) x 830 tie-points breadboard\n// (1) x 9V 1A Battery Adapter\n// (1) x 9V Battery\n// (8) x F-M wires (Female to Male DuPont wires)\n// (8) x M-M wire (Male to Male jumper wire)\n// (1) x USB 2.0 Type A to USB 2.0 Type B Cable\n// (Optional) (1) x USB-C to USB Adapter\n//\n\n// Libraries\n// #include \"Stepper.h\"         // library for stepper motor\n#include \"AccelStepper.h\"    // library for stepper motor\n#include \"SR04.h\"            // library for ultrasonic sensor\n#include \"pitches.h\"         // library for passive buzzer\n#include \"Servo.h\"           // library for servo motor\n\n// Definitions\n#define SERVO_PIN 6          // Pin for servo motor\n#define BUZZER_PIN 7         // Pin for passive buzzer\n#define STEPPER_PIN_1 8      // Pin for stepper motor\n#define STEPPER_PIN_2 9      // Pin for stepper motor\n#define STEPPER_PIN_3 10     // Pin for stepper motor\n#define STEPPER_PIN_4 11     // Pin for stepper motor\n#define ECHO_PIN 12          // Pin for ultrasonic sensor\n#define TRIG_PIN 13          // Pin for ultrasonic sensor\n#define STEPPER_STEPS 32     // Number of steps per revolution of stepper motor internal shaft\n#define MotorInterfaceType 8 // Define the AccelStepper interface type; 4 wire motor in half step mode:\n\n// Constants\nconst int STEPPER_STEPS_TO_TAKE = 30;               // 2048 = 1 Revolution of stepper motor\n// const int STEPPER_SPEED = 500;                      // Stepper motor speed max seems to be 500\nconst int STEPPER_SPEED = 500;                      // Stepper motor speed\nconst int STEPPER_MAX_SPEED = 1000;                 // Stepper motor speed max speed\nconst int THRESHOLD = 5;                            // Threshold distance in cm\nconst bool DEBUG = false;                           // Display debug information\n\n// Variables\nint servoPosition = 0;                              // variable to store the servo position\nunsigned long ultrasonicDistance;                   // initialize ultrasonic sensor variable for distance\nunsigned int toggleStepperRotation = 0;             // toggle stepper rotation\nbool hasRunOnce = 0;                                // has the program run once\n\n\n// Objects\n\n// Instantiate the stepper library\n// Setup of proper sequencing for Motor Driver Pins\n// In1, In2, In3, In4 in the sequence 1-3-2-4 for the 28BYJ-48 stepper motor\n//Stepper myStepper(STEPPER_STEPS, STEPPER_PIN_0, STEPPER_PIN_2, STEPPER_PIN_1, STEPPER_PIN_3);\n\n// Initialize with pin sequence IN1-IN3-IN2-IN4 for using the AccelStepper library with 28BYJ-48 stepper motor:\nAccelStepper  myStepper = AccelStepper(MotorInterfaceType, STEPPER_PIN_1, STEPPER_PIN_3, STEPPER_PIN_2, STEPPER_PIN_4);\n\n// Instantiate servo object to control a servo\nServo myServo;  \n\n// Instantiate the ultrasonic sensor\nSR04 myUltrasonic = SR04(ECHO_PIN,TRIG_PIN);\n\n// Run once\nvoid setup() {\n  Serial.begin(9600);\n  myServo.attach(SERVO_PIN);                        // attaches the servo on SERVO_PIN to the servo object\n\n  // Set the maximum steps per second:\n  myStepper.setMaxSpeed(STEPPER_MAX_SPEED);\n}\n\n// Run repeatedly\nvoid loop() {\n\n  if (hasRunOnce == 0) {\n\n    if (DEBUG) {                                                         // print information for debugging\n      Serial.println(\"hasRunOnce: No\");                                  // print if program has run once\n      Serial.println(\"Stepper Motor Rotation: clockwise\");               // print stepper motor rotation direction\n    }\n\n    hasRunOnce = 1;                                                   // update the variable\n\n    stepperRotateClockwise();                                            // rotate stepper motor clockwise\n\n  } else {\n\n    ultrasonicDistance = myUltrasonic.Distance();                        // update ultrasonic sensor variable\n\n    if (DEBUG) {                                                         // print information for debugging\n      Serial.print(\"Ultrasonic Sensor Distance: \");                      // print the distance from the ultrasonic sensor in cm\n      Serial.print(ultrasonicDistance);                                  // print the distance from the ultrasonic sensor in cm\n      Serial.println(\" cm\");                                             // print the distance from the ultrasonic sensor in cm\n    }\n\n    if (ultrasonicDistance &lt;= THRESHOLD) {                               // toggle the variable based on distance from ultrasonic sensor\n\n      toggleStepperRotation = 1;\n\n    } else {\n\n      toggleStepperRotation = 0;\n\n    }\n\n    /*\n    switch(toggleStepperRotation) {                                      // decision loop\n\n      case 0:\n        if (DEBUG) { \n          Serial.println(\"Stepper Motor Rotation: clockwise\");             // print stepper motor rotation direction\n        }\n        muteBuzzer();\n        servoRotateToZero();\n        stepperRotateClockwise();\n        break;\n\n      case 1:\n        if (DEBUG) {       \n          Serial.println(\"Stepper Motor Rotation: counterclockwise\");      // print stepper motor rotation direction\n        }\n        playBuzzer();\n        servoRotateToOneEighy();\n        stepperRotateCounterClockwise();\n        break;\n\n      default:\n        break;\n    }\n    */\n\n  }\n\n}\n\n// Rotate stepper motor clockwise\nvoid stepperRotateClockwise() {\n  myStepper.setSpeed(STEPPER_SPEED);                                     // stepper motor speed\n  //myStepper.step(STEPPER_STEPS_TO_TAKE);                                 // rotate clockwise\n  myStepper.runSpeed();                                                  // rotate clockwise\n}\n\n// Rotate stepper motor counter clockwise\nvoid stepperRotateCounterClockwise() {\n  myStepper.setSpeed(-STEPPER_SPEED);                                     // stepper motor speed\n  //myStepper.step(-STEPPER_STEPS_TO_TAKE);                                // rotate counterclockwise\n  myStepper.runSpeed();                                                  // rotate clockwise\n}\n\n// Play a tone\nvoid playBuzzer() {\n  tone(BUZZER_PIN, NOTE_G5, 100);                                        // play a tone on the passive buzzer\n}\n\n// Mute the tone\nvoid muteBuzzer() {\n  noTone(BUZZER_PIN);                                                    // turn the tone off\n}\n\n// Rotate servo motor to 0 degrees\nvoid servoRotateToZero() {                                               // rotate servo to 0 degree position\n  for (servoPosition = 180; servoPosition &gt;= 0; servoPosition -= 1) {    // goes from 180 degrees to 0 degrees in steps of 1 degree\n    myServo.write(servoPosition);                                        // tell servo to go to position in variable 'pos'\n  }\n}\n\n// Rotate servo motor to 180 degrees\nvoid servoRotateToOneEighy() {                                           // rotate servo to 180 degree position\n  for (servoPosition = 0; servoPosition &lt;= 180; servoPosition += 1) {    // goes from 0 degrees to 180 degrees in steps of 1 degree\n    myServo.write(servoPosition);                                        // tell servo to go to position in variable 'servoPosition'\n  }  \n}\n</code></pre>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#upload-the-source-code-and-library-to-the-arduino","title":"Upload the source code and library to the Arduino","text":"<ul> <li> <p>See How To Upload A Sketch</p> </li> <li> <p>See How To Insall A Library</p> </li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#how-to-upload-a-sketch-with-the-arduino-ide-2","title":"How To Upload A Sketch With The Arduino IDE 2","text":"<p>Note</p> <ul> <li>Source: Arduino.cc How to upload a sketch with the Arduino IDE 2</li> </ul> <p>In the Arduino environment, we write sketches that can be uploaded to Arduino boards. In this tutorial, we will go through how to select a board connected to your computer, and how to upload a sketch to that board, using the Arduino IDE 2.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#requirements_1","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#verify-vs-upload","title":"Verify vs Upload","text":"<p>There are two main tools when uploading a sketch to a board: verify and upload. The verify tool simply goes through your sketch, checks for errors and compiles it. The upload tool does the same, but when it finishes compiling the code, it also uploads it to the board.</p> <p>A good practice is to use the verifying tool before attempting to upload anything. This is a quick way of spotting any errors in your code, so you can fix them before actually uploading the code.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#uploading-a-sketch","title":"Uploading a Sketch","text":"<p>Uploading a sketch is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the toolbar at the top. At the very left, there is a checkmark and an arrow pointing right. The checkmark is used to verify, and the arrow is used to upload.</p> </li> </ol> <p></p> <p>Verifying and uploading buttons</p> <ol> <li>But before doing any of that, we should choose what board we are uploading to. Beside the verify and upload button you should see a a drop down menu, this will, in most cases, display Arduino boards that are connected to your computer. If your board is not automatically detected, you can either press \"Select other board and port...\" in the drop-down and follow the instructions, or go to Tools &gt; Board and Tools &gt; Port in the toolbar menu to select the board and port manually.</li> </ol> <p></p> <p>Selecting the board.</p> <p>So connect your board to the computer and select it from the drop down menu. You'll know that there is a connection to the board when the board name appears in bold.</p> <p></p> <p>Selecting the board.</p> <ol> <li>Click on the verify tool (checkmark). Since we are verifying an empty sketch, we can be sure it is going to compile. After a few seconds, we can see the result of the action in the console (black box in the bottom).</li> </ol> <p></p> <p>Successful compilation printed in the console.</p> <ol> <li> <p>With the board selected, we are good to go! Click on the upload button, and it will start uploading the sketch to the board.</p> </li> <li> <p>When it is finished, a notification pops up in the bottom right of your IDE window. Of course, sometimes there are some complications when uploading, and these errors will be listed here as well.</p> </li> </ol> <p></p> <p>Successful upload printed in the console.</p> <p>Congratulations, you have now uploaded a sketch to your Arduino board!</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#please-read-only-linux-users","title":"Please Read (Only Linux Users)","text":"<p>It might happen that when you upload a sketch - after you have selected your board and the serial port - you get an error such as \"... Permission denied\". If you get this error, you need to set serial port permission.</p> <p>To do this, open your Terminal and type:</p> <pre><code>ls -l /dev/ttyACM*\n</code></pre> <p>you will get something like:</p> <pre><code>crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0\n</code></pre> <p>The \"<code>0</code>\" at the end of ACM might be a different number, or multiple entries might be returned. The data we need is \"dialout\" (is the group owner of the file).</p> <p>Now we just need to add our user to the group:</p> <pre><code>sudo usermod -a -G dialout &lt;username&gt;\n</code></pre> <p>where <code>&lt;username&gt;</code> is your Linux user name. You will need to log out and log in again for this change to take effect.</p> <p></p> <p>Adding user to the group.</p> <p>After this procedure, you should be able to proceed normally and upload the sketch to your board or use the Serial Monitor. Results</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#how-to-add-library-files-to-the-arduino-ide","title":"How To Add Library Files To The Arduino IDE","text":"<p>Arduino IDE 2</p> <p>From within the Arduino IDE with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the Stepper.zip file downloaded from this page.</p> <ul> <li>Download Library File: Stepper-1.1.3.zip</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#how-to-add-library-files-to-the-arduino-ide-2","title":"How To Add Library Files To The Arduino IDE 2","text":"<p>From within the Arduino IDE, with source code sketch file for this lab open, from the Arduino IDE menu select Sketch &gt; Include Library &gt; Add .ZIP Library... then select the pitches.zip file downloaded from this page. Repeat for the additional library files.</p> <ul> <li>Download Library File: pitches.zip</li> <li>Download Library File: HC-SR04.zip</li> <li>Download Library File: Servo-1.2.1.zip</li> <li>Download Library File: Stepper.zip</li> </ul> <p></p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#how-to-install-a-library-with-the-arduino-ide-2","title":"How to install a library with the Arduino IDE 2","text":"<p>Note</p> <ul> <li>Source: Arduino.cc Installing libraries</li> </ul> <p>A large part of the Arduino programming experience is the use of libraries. There are thousands of libraries that can be found online, and the best documented ones can be found and installed directly through the editor.</p> <p>In this tutorial, we will go through how to install a library using the library manager in the Arduino IDE 2. We will also show how to access examples from a library that you have installed.</p> <p>You can easily download the editor from the Arduino Software page.</p> <p>You can also follow the downloading and installing the Arduino IDE 2 tutorial for more detailed guide on how to install the editor.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#requirements_2","title":"Requirements","text":"<ul> <li>Arduino IDE 2 installed.</li> </ul>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#why-use-libraries","title":"Why Use Libraries?","text":"<p>Libraries are incredibly useful when creating a project of any type. They make our development experience much smoother, and there almost an infinite amount out there. They are used to interface with many different sensors, RTCs, Wi-Fi modules, RGB matrices and of course with other components on your board.</p> <p>Arduino has many official libraries, but the real heroes are the Arduino community, who develop, maintain and improve their libraries on a regular basis.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#installing-a-library","title":"Installing a Library","text":"<p>Installing a library is quick and easy, but let's take a look at what we need to do.</p> <ol> <li> <p>Open the Arduino IDE 2.</p> </li> <li> <p>With the editor open, let's take a look at the left column. Here, we can see a couple of icons. Let's click the on the \"library\" icon.</p> </li> </ol> <p></p> <ol> <li>A list will now appear of all available libraries, where we can also search for the library we want to use. In this example, we are going to install the RTCZero library. Click on the \"INSTALL\" button to install the library.</li> </ol> <p></p> <ol> <li>This process should not take too long, but allow up to a minute to install it.</li> </ol> <p></p> <ol> <li>When it is finished, we can take a look at the library in the library manager column, where it should say \"INSTALLED\".</li> </ol> <p></p> <p>Congratulations! You have now successfully downloaded and installed a library on your machine.</p>","boost":1},{"location":"arduino/labs/lab-5-collision-avoidance/#including-a-library","title":"Including a Library","text":"<p>To use a library, you first need to include the library at the top of the sketch.</p> <p></p> <p>Almost all libraries come with already made examples that you can use. These are accessible through File &gt; Examples &gt; {Library} &gt; {Example}. In this example, we are choosing the RTCZero &gt; SimpleRTC.</p> <p></p> <p>You can also access library examples directly in the library manager, by clicking the three dots next to the installed library, like this: </p> <p></p> <p>The chosen example will now open up in a new window, and you can start using it however you want to.</p> <p></p>","boost":1},{"location":"csc205/","title":"CSC205 - Index","text":"","boost":1},{"location":"csc205/#modules","title":"Modules","text":"<ul> <li>Module 0 - Java Review</li> <li>Module 1 - Java Review - Encapsulation - Designing Classes - Testing </li> <li>Module 2 - Inheritance and Exceptions<ul> <li>Inheritance and Exceptions - Notes</li> <li>Inheritance and Exceptions - FAQ</li> </ul> </li> <li>Module 3 - Polymorphism and Interfaces</li> <li>Module 4 - Recursion and Analysis of Algorithms<ul> <li>Programming Exercise 4 - Recursion</li> </ul> </li> <li>Module 5 - Collections Generics and Iterators</li> </ul>","boost":1},{"location":"csc205/#wade-hubers-github-csc205codeexamples-repository","title":"Wade Huber's GitHub csc205codeexamples repository","text":"<ul> <li>GitHub: https://github.com/wadehuber/csc205codeexamples</li> </ul> <p>Note</p> <p>The csc205codeexamples is a private GitHub repository. You will need to contact Wade Huber to be added to the repository for access.</p>","boost":1},{"location":"csc205/#wade-hubers-github-codeexamples-repository","title":"Wade Huber's GitHub codeexamples repository","text":"<ul> <li>GitHub: https://github.com/wadehuber/codeexamples</li> </ul>","boost":1},{"location":"csc205/#wade-hubers-youtube-channel","title":"Wade Huber's Youtube Channel","text":"<ul> <li>YouTube: https://www.youtube.com/@logiclambda</li> </ul>","boost":1},{"location":"csc205/#textbooks","title":"Textbooks","text":"<ul> <li> <p>Java Foundations (Required)</p> <ul> <li>5<sup>th</sup> edition</li> <li>ISBN: 9780135205976</li> <li>Author: Lewis</li> </ul> </li> <li> <p>Algorithms (Optional)</p> <ul> <li>4<sup>th</sup> edition</li> <li>ISBN: 9780132762564</li> <li>Author: Sedgewick</li> </ul> </li> </ul>","boost":1},{"location":"csc205/#other-material","title":"Other Material","text":"<ul> <li> <p>Book: Programming Interviews Exposed: Coding Your Way Through the Interview</p> <ul> <li>4<sup>th</sup> Edition</li> <li>ISBN-10: 111941847X</li> <li>ISBN-13: 978-1119418474</li> <li>Author:  John Mongan, Noah Suojanen Kindler, Eric Gigu\u00e8re</li> </ul> </li> <li> <p>Book: Cracking the Coding Interview: 189 Programming Questions and Solutions</p> <ul> <li>6<sup>th</sup> Edition</li> <li>ISBN-10: 0984782869</li> <li>ISBN-13: 978-0984782864</li> <li>Author: Gayle Laakmann McDowell</li> </ul> </li> <li> <p>Book: Grokking Algorithms</p> <ul> <li>2<sup>nd</sup> Edition</li> <li>ISBN-10: 1633438538</li> <li>ISBN-13: 978-1633438538</li> <li>Author: Aditya Y Bhargava</li> </ul> </li> <li> <p>I also strongly recommend the Algorithms Illuminated series by Tim Roughgarden, which has corresponding YouTube playlists.</p> <ul> <li> <p>Website: https://www.algorithmsilluminated.org/</p> </li> <li> <p>Book: Algorithms Illuminated</p> <ul> <li>Omnibus Edition</li> <li>ISBN-10: 0999282980</li> <li>ISBN-13: 978-0999282984</li> <li>Author: Tim Roughgarden</li> </ul> </li> <li> <p>YouTube: Algorithms 1 YouTube Playlist</p> </li> <li> <p>YouTube: Algorithms 2 Youtube Playlist</p> </li> <li> <p>YouTube: All YouTube Videos by Tim Roughgarden</p> </li> </ul> </li> </ul>","boost":1},{"location":"csc205/module-0/","title":"Java Review - Index","text":"","boost":1},{"location":"csc205/module-0/#csc-205-module-0","title":"CSC 205 Module 0","text":"","boost":1},{"location":"csc205/module-1/","title":"Java Review - Encapsulation - Designing Classes - Testing - Index","text":"","boost":1},{"location":"csc205/module-1/#csc205-module-1-index","title":"CSC205 Module 1 - Index","text":"","boost":1},{"location":"csc205/module-2/","title":"Inheritance and Exceptions - Index","text":"","boost":1},{"location":"csc205/module-2/#csc205-module-2","title":"CSC205 - Module 2","text":"<ul> <li>Inheritance and Exceptions - Notes</li> <li>Inheritance and Exceptions - FAQ</li> </ul>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/","title":"Inheritance and Exceptions - FAQ","text":"","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#csc205-module-2","title":"CSC205 - Module 2","text":"","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-the-three-visibility-modifiers","title":"Question: What is the difference between the three visibility modifiers?","text":"<p>Public data and methods are accessible to any other class. The methods can be called and the data member changed without any control by the object itself. Private data and methods are only visible within the class. Protected members are public to subclasses and private to the rest of the world. (Note that this discussion omits what happens within packages - we will discuss that later.)</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-would-i-use-a-protected-member","title":"Question: When would I use a protected member?","text":"<p>Protected members allow child classes to treat members of a parent class as if they were members of the child class. While private members of the parent class are inherited by the child class, the child class cannot access them directly. This makes it easier to write the child class since you don't have to use accessor/mutator methods to modify parent class members. However, this does break encapsulation, though only a little bit since only child classes can access protected members - protected members are private to everyone else.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-are-protected-members-different-from-private-members","title":"Question: How are <code>protected</code> members different from <code>private</code> members?","text":"<p>The difference depends on who is trying to access the member. There is no difference between <code>protected</code> &amp; <code>private</code> members if you are accessing the <code>protected</code> member from a non-child class. However, child classes have full access to <code>protected</code> members, so if a child class is trying to access a member, then <code>protected</code> members are essentially the same as <code>public</code> members. <code>Protected</code> members are <code>public</code> to child classes and <code>private</code> to all other classes. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-do-protected-members-affect-the-parent-class","title":"Question: Do protected members affect the parent class?","text":"<p>Protected members are fully visible to any instance of the parent class (parent class object) or any child class (child object). Each object has its own copy, so they do not affect each other. In both cases, the protected member is treated like any other member of that class.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-if-two-child-objects-use-the-same-protected-member-of-the-parent-class","title":"Question: What if two child objects use the same protected member of the parent class?","text":"<p>This is not a problem, since each object gets its own copy of the protected members of the parent class. This is also true of the private and public members, though the child class cannot directly access the private members it inherits from the parent class. </p> <p>Note however that static members are in fact shared by all instances of a class, so in that case a modification to a static member in one object will update that member in all instances of that class, however this is irrespective of the visibility modifier of that member.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-a-public-class-and-a-private-class","title":"Question: What is the difference between a public class and a private class?","text":"<p>Public classes are the classes you are already familiar with. Public classes can also contain private classes which are simply classes defined inside the public class which are only available to the class in which they are contained. This is done when the private class is something useful to the public class, but which does not have any use outside that public class. We will see an example of this when we cover Linked Lists - we will create a private node class in the linked list class since the node objects are not useful outside a linked list.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-can-i-use-existing-classes-to-create-new-classes","title":"Question: How can I use existing classes to create new classes?","text":"<p>There are two primary ways to use existing classes to create new classes. The first is one you have likely seen before where one class contains a reference to an object of a different class as a data member. That is called composition, or containment. The second way is inheritance where a child class extends a parent class, including all the members of the parent class as part of itself. That is the focus of this module.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-meant-by-containment-or-composition","title":"Question: What is meant by containment (or composition)?","text":"<p>Containment (also called composition or aggregation) is when one class includes references to other objects as members. Those objects can be objects of a different class or even the current class. For example, an Account class could contain a reference to a Person to indicate who the owner of the account is. Furthermore, the Person object might contain a reference to an Address object. A Building object may also hold a reference to an Address object. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-is-containment-similar-to-how-an-object-can-have-private-members","title":"Question: Is containment similar to how an object can have private members?","text":"<p>Not exactly. Containment is when one object contains another object as a member. You can also think of it as being when an object is built using another object (or several objects). Whether those \"contained\" members are public or private is not relevant in this context, though in general any data member / attribute should be private. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-the-this-and-super-references","title":"Question: What is the difference between the \"this\" and \"super\" references?","text":"<p>The \"this\" reference refers to the current object. The \"super\" reference refers to the parent class. Suppose we have a constructor defined as below:</p> <pre><code>public MyClass(int a, String s) {\n    super(a);\n    this.s = s;\n}\n</code></pre> <p>The \"super\" reference is calling the parent class constructor (with a as a parameter) and the \"this\" reference is being used to differentiate between the member os of the current class and the parameter \"s\" of the constructor. If both the parent and child class define a variable with the same name (say for example myVar), then you can use super.myVar and this.myVar to differentiate between them while you wait for someone to come to their senses and stop with all the creation of the shadow variables. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-point-of-the-super-reference","title":"Question: What is the point of the super reference?","text":"<p>The super reference refers to the data members and methods of the parent class. So if a data member has the same name as a parent data member, you can still access the parent's data member through the super reference. The most common use of the super reference is to call the constructor of the parent class, which allows the parent class to still have control over how its data is initialized. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-should-you-use-super","title":"Question: When should you use super?","text":"<p>The <code>super</code> reference refers to the parts of the class inherited from the parent class. The main place you would use the <code>super</code> reference is in the constructor where you could call the parent class constructor like this; <code>super()</code>. You might want to call it with some additional parameters to set up the members inherited from the parent, such as <code>super(1, 9348)</code>. Without the parenthesis, <code>super</code> allows you to specify that you are referring to members inherited from the parent class, but that is only necessary in cases where you have shadowed a name from the parent class (meaning defined something with the same name both in the parent and child). Since you should try to avoid doing that, you should not usually have to use the <code>super</code> reference except to call the parent constructor. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-why-do-you-call-super-the-parent-class-constructor","title":"Question: Why do you call <code>super()</code> - the parent class  constructor?","text":"<p>Calling <code>super()</code> invokes the parent class constructor. The intention of the <code>super()</code> call is to allow the parent to use its own constructor to set up its own attributes. That way the child class does not have to set up those attributes. Since all classes you write are child classes (if no parent is specified then the class is a child of the Object class), you should generally include a call to the <code>super()</code> constructor in your </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-does-a-call-to-super-in-a-child-method-call-the-parents-version-of-the-same-method","title":"Question: Does a call to <code>super()</code> in a child method call the parent's version of the same method?","text":"<p>No - <code>super</code> itself is a reference to the parent class.  A call to <code>super()</code> only will call the constructor of the parent class. You can only call <code>super()</code> in the first line of the child's constructor.  If you are overriding a method called <code>doSomeStuff()</code> in the child class, then you would need to call <code>super.doSomeStuff()</code> in that method if you want to call the parent's version.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-point-of-the-object-class","title":"Question: What is the point of the Object class?","text":"<p>The <code>Object</code> class serves as the parent class for all classes that do not directly inherit from another class. This ensures that every Java class has a minimum common set of methods. It also becomes useful when we discuss polymorphism as we can treat any object as type <code>Object</code>.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-doesnt-inheritance-just-make-the-program-more-complicated","title":"Question: Doesn't inheritance just make the program more complicated?","text":"<p>It certainly can. But imagine a case where we have several different classes which only differ by a small amount. In that case, we can use inheritance to gather the common data &amp; methods together and share them between all the child classes. So understanding a certain class may be a bit more difficult since you need to also examine its parent class, but the program as a whole is much simpler since the common code is gathered in one place. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-often-is-inheritance-used","title":"Question: How often is inheritance used?","text":"<p>Inheritance is fairly common with any object-oriented programming language and Java is no exception. It can be used any time you are creating a class that is based on another class. Currently in industry it is probably used a bit too much in that for some projects the initial design step is to create a class hierarchy whether or not one is warranted. In an ideal design, inheritance is only used if the application calls for it - if you are doing something (such as characters in a game, different types of accounts, etc) where there is a clear inheritance relationship. It is important to keep in mind that inheritance is just a tool. You do not always have to use it - using aggregation (containment) is often a better choice. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-does-it-mean-that-for-any-problem-there-is-not-always-a-single-correct-class-hierarchy","title":"Question: What does it mean that for any problem there is not always a single correct class hierarchy?","text":"<p>Say you are writing a game and there are multiple types of vehicles available - cars, airplanes, boats, motorcycles, walking, rockets, canoes, etc. You could create a class hierarchy based on the size or capacity of the vehicles, whether the vehicles float, have wheels, or fly, or even based on what level the player has to be to operate the vehicles. So it depends on what your main goal is for using the class hierarchy. And in some cases interfaces may be the better choice (for example, wheeled/winged/floating are often better represented with interfaces). </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-can-you-differentiate-the-parent-class-from-the-child-class","title":"Question: How can you differentiate the parent class from the child class?","text":"<p>All classes are child classes since when they do not have an <code>extends</code> clause then they implicitly extend the <code>Object</code> class.  The easiest way to tell them apart is that the class child will have an <code>extends</code> statement in its class header, explicitly stating that it is a child of its parent class.  For example, suppose we have the following class declarations:</p> <pre><code>public CollegeStudent extends Student {\n    ...// we don't care how this class is implemented for this example\n}\npublic PartTimeStudent extends CollegeStudent {\n    ...// we don't care how this class is implemented for this example\n}\n</code></pre> <p>These two classes, <code>CollegeStudent</code> &amp; <code>PartTimeStudent</code>, are related by inheritance with <code>CollegeStudent</code> being the parent class and <code>PartTimeStudent</code> being the child class. The fact that <code>CollegeStudent</code> also extends <code>Student</code> indicates that <code>Student</code> means that <code>CollegeStudent</code> is a child class (of student) in addition to a parent class (of <code>PartTimeStudent</code>).</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-is-inheritance-different-from-defining-a-private-class-inside-another-class","title":"Question: How is inheritance different from defining a private class inside another class?","text":"<p>From the standpoint of the class there is not a whole lot of difference other than the visibility modifiers, but through inheritance multiple classes can inherit the attributes and methods of a class. If that same class is defined as a private class it only can be included inside a single class.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-does-a-class-inherit-the-attributes-methods-of-its-parent-if-the-parent-is-a-child-class","title":"Question: Does a class inherit the attributes &amp; methods of its parent if the parent is a child class?","text":"<p>The child class inherits all the attributes and methods of its parent class, including any that are inherited by the parent class.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-with-a-narrowing-conversion-what-data-does-the-child-reference-have-access-to","title":"Question: With a narrowing conversion, what data does the child reference have access to?","text":"<p>A narrowing conversion refers to a situation where you have a child class object reference that is referring to a parent class object. In this case, the child reference thinks it knows about the child references, but in actuality only the public members of the parent object are available to it. So, a call to a child method would be allowed by the compiler, but would cause a run-time error since that method would not exist in the object being referenced.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-extending-a-class-by-inheritance-does-that-make-a-single-class-or-are-there-two-classes","title":"Question: When extending a class by inheritance does that make a single class or are there two classes?","text":"<p>Think of extending a class by inheritance as similar to purchasing a premium version of a game that includes an expansion pack. The parent is the original game and the child includes the original game and an expansion pack. So there are two separate options (the parent and the child) but if you choose the child you get both. So, inheritance results in two classes (the parent and child) but there is part of both classes that is identical.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-does-shadowing-mean","title":"Question: What does shadowing mean?","text":"<p>Shadowing occurs when a child class declares a variable with the same name as a variable in the parent class. So there are two copies of the variable with the same name - one declared in the child, one declared in the parent. The parent copy is essentially invisible to the child (even if it is public or protected) since any time the variable name is used it will refer to the child variable. To access the parent variable, the super reference would need to be used, for example <code>super.myShadow</code>.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-do-shadowed-members-relate-to-parentchild-members","title":"Question: How do shadowed members relate to parent/child members?","text":"<p>A shadowed member is one where both the child and the parent have an attribute with the same name. You should avoid shadow members. Shadowed members \"collide\" in their naming. Suppose you have a <code>Parent</code> &amp; <code>Child</code> class that both define a data member called <code>sidewalk</code>. If you have a  variable called <code>joe</code>, then <code>joe.sidewalk</code> will refer to the child class's <code>sidewalk</code> variable - there is no way for variable <code>joe</code> to reference the parent class's <code>sidewalk</code> variable, even if it is public because it is hidden by the child class member.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-is-there-a-limit-to-inheritance-is-there-a-maximum-number-of-classes-in-a-class-hierarchy","title":"Question: Is there a limit to inheritance?  Is there a maximum number of classes in a class hierarchy?","text":"<p>A class can inherit from at most one other class. However, the class hierarchy can be as deep as you want it to be - in that case the bottommost child class inherits everything from its parent, grandparent, and so on. Also there is no technical limit to how many classes inherit from a parent class, though sometimes having inheritance too deep can result in code that is difficult to understand.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-if-the-class-hierarchy-goes-on-for-multiple-levels-isnt-that-the-same-as-multiple-inheritance-since-a-class-inherits-more-than-one-other-class","title":"Question: If the class hierarchy goes on for multiple levels, isn't that the same as multiple inheritance since a class inherits more than one other class?","text":"<p>No. Each class can inherit from a single other class. The parent class may inherit from other classes, but the inherited methods and attributes are still a part of the child class.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-can-an-overridden-function-deal-with-data-that-has-been-added-to-the-child-class","title":"Question: How can an overridden function deal with data that has been added to the child class?","text":"<p>You would work with the additional member data in the overridden function the same way you would with any other data in the class. In addition, you could use the super reference to call the parent's function to allow it to deal with any inherited data as long as the parent is doing something you also want the child to be doing. For example, we usually call the super class constructor to allow the parent class to handle the data members it provides. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-overloading-and-overriding","title":"Question: What is the difference between overloading and overriding?","text":"<p>With overloading, the methods are usually in the same class and must have a different signature. Overloading is used when the same method will work with different types or a different number of parameters.</p> <p>With overriding, the methods are in a different class and must have the same signature. Overriding is used when the child class wants to implement a method differently from the parent.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-do-we-always-have-to-override-equals-and-tostring","title":"Question: Do we always have to override <code>equals()</code> and <code>toString()</code>?","text":"<p>In most cases, you will want to override toString() so you are able to print out a string representation of your class. You would override equals() when you want to be able to check equality between two objects of the same type. For example, if you have a student record class you could check that the student ID's are equal. However, you don't always have to override either of the methods - the application will dictate whether it is useful or not. But if you don't override them then you get the default implementation which is typically not what you want.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-purpose-of-the-override-tag","title":"Question: What is the purpose of the <code>@Override</code> tag?","text":"<p>The <code>@Override</code> tag is an optional tag that indicates that a method is overriding a method in the parent class or interface. It has two main purposes. First, it is a way for the programmer to document their intent. Second, and most helpfully, it indicates to the compiler that the method is intended to override a method in the parent class or interface. The compiler will then try to find a corresponding method in the parent class or interface and will throw an error if no method with a matching signature is required.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-is-the-override-tag-required","title":"Question: Is the <code>@Override</code> tag required?","text":"<p>The <code>@Override</code> tag is not required, but it is a good idea to use it anytime you override a method. If you accidentally change the method signature (so that it no longer has the same signature as a parent method) you will get a compiler warning. It is always best to use the compiler to help you find your errors!</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-are-inheritance-and-composition-different","title":"Question: How are inheritance and composition different?","text":"<p>In both cases the new classes share data and methods with the original class. With inheritance (\"is-a\"), the methods and data of the parent class become methods and data of the child class. This allows the child class to be treated like the parent type. With composition (\"has-a\"), the original class is a data member of the new class and only the new class has access to the (public) data members and methods of the original class. This allows the new class to limit access to the original class, so even if the \"is-a\" relationship holds it may be best to use composition.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-is-a-inheritance-and-has-a-containment","title":"Question: What is the difference between \"is-a\" (inheritance) and \"has-a\" (containment)?","text":"<p>Suppose you have a class hierarchy of Trucks. A Ford F-150 \"is-a\" truck as is a Dodge Ram. So the F-150 &amp; Ram have a \"is-a\" relationship with Trucks. May parts go into the creation of a truck, such as a steering wheel, an engine, seats, etc. So, any truck will have a \"has-a\" relationship with the steering wheel object, the seat object, and so forth since the truck will contain those things inside it. To summarize, a Ford F-150 \"is-a\" truck and \"has-a\" steering wheel.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-would-you-want-to-use-inheritance-if-you-dont-have-an-is-a-relation","title":"Question: When would you want to use inheritance if you don't have an \"is-a\" relation?","text":"<p>If the parent class implements all the methods you want then using inheritance lets the child class have all the parent methods by default. If you use containment in this case you need to have a method in the child class that calls the parent method for each method you want to use. This is a bit of a misuse of object-oriented principles, but it is possible.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-do-you-have-to-use-inheritance-when-would-you-not-use-inheritance","title":"Question: Do you have to use inheritance?  When would you not use inheritance?","text":"<p>You don't have to use inheritance at all. You should only use it when there is a well-defined class hierarchy that makes sense for the problem you are trying to solve. Inheritance is just one tool in your programming toolkit. Use it when it makes sense, but you shouldn't feel like you have to use it. There are billions of lines of code in use today that don't use inheritance at all.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-an-abstract-class","title":"Question: What is an abstract class?","text":"<p>An abstract class serves as a placeholder in the class hierarchy. It cannot be instantiated, but other classes can inherit from it. It can have data members and implemented methods that would be passed on to child classes, but it can also have abstract methods that are not implemented but that must instead be implemented in a child class.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-an-abstract-class-have-variables-implemented-methods","title":"Question: Can an abstract class have variables &amp; implemented methods?","text":"<p>Yes.  An abstract class can contain variables, constants, and fully implemented methods. There is no requirement for it to have any abstract methods, though of course those can be included as well. Note that the <code>abstract</code> keyword in the class header is what indicates that the class is abstract, not the presence of abstract methods.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-purpose-does-an-abstract-class-serve-when-we-just-have-a-regular-class","title":"Question: What purpose does an abstract class serve when we just have a regular class?","text":"<p>You don't have to make any class abstract - that is up to you. However, since an abstract class is intended as a placeholder and not something that you would instantiate objects of, making a class abstract prevents it from being instantiated accidentally. It is also an indicator to someone looking at your code that the class is not intended to be final - it should be extended before it is used. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-you-use-a-regular-class-instead-of-an-abstract-class","title":"Question: Can you use a regular class instead of an abstract class?","text":"<p>Yes, but then the abstract class cannot have any abstract methods, and that is one of the benefits of an abstract class. The point of abstract methods is to force child classes to define certain methods, but it leaves the specific implementation up to the child class. With a regular class, the child class can override a method, but there is no requirement that they do so unlike with an abstract class. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-benefit-of-not-allowing-an-abstract-class-to-be-instantiated","title":"Question: What is the benefit of not allowing an abstract class to be instantiated?","text":"<p>An abstract class represents an <code>abstract</code> concept, so there is no reason to instantiate one. You are not allowed to instantiate one because there would never be a reason to - the assumption is that any attempt to do so would be a bug. For example, suppose you were writing a game and you had an abstract GameCharacter class. You would never want to instantiate a GameCharacter - how would you know what skills they should have or what power they should have?  Instead, you could have Archer and Wizard classes that extend GameCharacter. They would have to implement all the abstract methods of GameCharacter and you would know what sort of skills each class would have.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-is-an-abstract-method-useful","title":"Question: When is an abstract method useful?","text":"<p>An abstract method is useful any time you want to force a child class to implement a method. For example, suppose you are writing a game and you have several classes of characters. Each character needs to be able to move and act. You could have a parent GameCharacter class that had two abstract methods - move() and act(). Then each character would have its own class that was a child class of GameCharacter. Each character could have whatever methods it needed, but they would all be forced to implement move() and act(). This makes it easier to work with characters in a general way (we will see examples of this when we talk about polymorphism).</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-do-i-have-to-use-abstract-classes","title":"Question: Do I have to use abstract classes?","text":"<p>No. You don't have to do anything. Abstract classes are just a tool - use them when they make sense, and don't use them when they don't provide any value. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-does-the-root-class-of-a-class-hierarchy-have-to-be-abstract","title":"Question: Does the root class of a class hierarchy have to be abstract?","text":"<p>No. Suppose you have a class you use that you later decide to extend. You may still want the existing (parent) class even after you create child classes that inherit from it. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-one-abstract-class-extend-another","title":"Question: Can one abstract class extend another?","text":"<p>Yes. It often makes sense for one abstract class to extend another if it represents a more specific, yet still abstract, concept in the class hierarchy. For example, Animal -&gt; Reptile -&gt; Rattlesnake. Here Animal and Reptile should both be abstract classes. In addition, abstract classes can implement interfaces.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-are-some-real-world-examples-of-when-you-would-want-to-have-an-abstract-class","title":"Question: What are some real world examples of when you would want to have an abstract class?","text":"<p>In addition to the game character example above, here are some other real-world examples:</p> Abstract Class Child Classes <code>Account</code> <code>CheckingAccount</code>, <code>SavingsAccount</code>, <code>InvestmentAccount</code> <code>Window</code> (in a GUI) <code>AlertWindow</code>, <code>TerminalWindow</code>, <code>TextWindow</code> <code>Event</code> (in an operating system or application) <code>MouseClick</code>, <code>SwipeUp</code>, <code>AudioInput</code> <code>Fruit</code> <code>Apple</code>, <code>Banana</code>, <code>Mango</code>, <code>Pineapple</code>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-are-some-examples-of-abstract-methods","title":"Question: What are some examples of abstract methods?","text":"<p>Suppose we had an <code>Account</code> class. The different types of account would need deposit &amp; withdrawal methods. Since the specifics of the method would be dependent on what the child class is implementing, those methods could be abstract methods in the <code>Account</code> class. Or for a <code>Window</code>  class, there could be abstract methods called resize and close so that any class derived from Window  would have to implement those methods. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-point-of-exceptions","title":"Question: What is the point of exceptions?","text":"<p>Exceptions allow the programmer to handle extraordinary cases without the program crashing. In a lot of cases, the same result could be achieved by checking that everything is ok before we execute code. But exceptions allow us to handle cases we don't foresee after they happen. They also can lead to cleaner code since one try block can handle multiple exceptions. It is sometimes easier to ask forgiveness (exceptions) than permission (pre-checking). One example would be if you prompt the user for a filename to read. If the file doesn't exist an exception is thrown. Handling that exception lets you prompt the user for better input instead of having the program crash.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-why-wouldnt-we-use-if-statements-instead-of-exceptions","title":"Question: Why wouldn't we use if statements instead of exceptions?","text":"<p>For many error handling situations, if statements are fine and are more efficient than using an exception. For example, if you want to check that an entered number is in a certain range, or that a method returned successfully then using an if statement or some other mechanism other than an exception will work fine. However, for cases where the problem is more fundamental than a bad value, such as a character being entered instead of a number, or something else catastrophic happening that prevented a method from executing then exception handling will help you recover.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-is-there-a-case-where-we-would-not-want-to-catch-an-exception","title":"Question: Is there a case where we would not want to catch an exception?","text":"<p>Yes - anytime you want your program to crash if something unexpected happens. For example, suppose you are writing software to control a dangerous piece of hardware (such as a chainsaw, a bulldozer, or a self-chopping ax). There may be exceptions you can catch and handle, but if an unexpected exception occurs that you have not anticipated then you likely want to stop (crash) immediately to prevent possible real-world damage. Again in those cases the best thing to do is likely to catch the exception then gracefully exit (think in a case for an amusement park ride where riders are suspended upside down during the ride), but there are situations where immediately crashing is the best outcome. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-do-i-need-to-create-my-own-exceptions","title":"Question: When do I need to create my own exceptions?","text":"<p>If the built-in exceptions work for you, then just use those. Otherwise, create exceptions for any out-of-the-ordinary situation you want client code to handle.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-do-i-need-to-memorize-the-exception-hierarchy","title":"Question: Do I need to memorize the exception hierarchy?","text":"<p>No - you will just want to review it and be aware of what is there and know some of the most common ones (stack overflow, arithmetic exceptions, etc). </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-does-a-try-catch-finally-block-look-like","title":"Question: What does a try-catch-finally block look like?","text":"<pre><code>try {\n    //code that could throw an exception\n}\ncatch (ArithmeticException e) {\n    // Handle exception if it is an ArithmeticException\n}\ncatch (Exception e) {\n    // Handle any other exception\n}\nfinally {\n    // This code gets executed whether or not an exception\n    //   is thrown or if the try block succeeds \n}\n</code></pre>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-use-for-the-e-variable-in-the-catch-statement","title":"Question: What is the use for the \"e\" variable in the catch statement.","text":"<p><code>e</code> is the Exception object. There are multiple methods and attributes that you can get from that method to provide more information when that exception is caught.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-do-i-have-to-catch-a-specific-exception-what-if-i-want-to-handle-all-exceptions-in-one-catch","title":"Question: Do I have to catch a specific exception?  What if I want to handle all exceptions in one catch?","text":"<p>In general, you should catch as specific an exception as possible to ensure you handle it properly. For example, you would want to handle a divide-by-0 exception (<code>ArithmeticException</code>) differently from an exception thrown because the user entered the wrong type of input (an <code>InputMismatchException</code>) perhaps. But, you can write a catch for any exception by catching an <code>Exception</code> object. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-should-go-in-a-try-block-and-catch-statement","title":"Question: What should go in a try block and catch statement?","text":"<p>Any code that might throw an exception. Or any code that you don't know whether or not it will throw an exception. You can catch any exception you know might be thrown. If you aren't sure, you can throw a more general exception higher up on the exception hierarchy. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-point-of-the-finally-block","title":"Question: What is the point of the finally block?","text":"<p>The finally block allows the programmer to specify code that will be executed whether or not there is an exception. This is helpful to allow the programmer to do any clean up required such as closing system resources like files or close database connections. The only time the finally block would not get executed is if a fatal exception happened at the runtime level or if there was a system exit call in the catch block.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-is-the-finally-block-different-from-just-having-code-at-the-end-of-the-try-catch-block","title":"Question: How is the finally block different from just having code at the end of the try-catch block?","text":"<p>The finally block will always execute after the try-catch block executes. If there is a <code>return</code> or <code>continue</code> statement in the catch block then any code after the <code>try-catch</code> block will not execute if an exception is caught. Adding the code to a <code>finally</code> block guarantees that it will execute even in cases when the control flow would mean that any code after the <code>try-catch</code> was not executed. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-is-the-finally-block-required","title":"Question: Is the finally block required?","text":"<p>No, the finally block is optional.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-is-there-an-error-that-any-exception-cannot-catch","title":"Question: Is there an error that any exception cannot catch?","text":"<p>Certain catastrophic errors cannot be caught, such as a situation where the Java Virtual Machine (JVM) crashes or anything that causes physical damage to the computer. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-point-of-checked-exceptions","title":"Question: What is the point of checked exceptions?","text":"<p>Checked exceptions are checked at compile time so the compiler forces you to handle them. If you write code that includes code that could throw a checked exception then you must either handle the exception with a try-catch block or specify in the method signature that the method throws that checked exception. Checked exceptions are used for cases where the code using your method/class can be reasonably expected to recover from whatever caused the exception. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-does-it-mean-to-rethrow-an-exception","title":"Question: What does it mean to rethrow an exception?","text":"<p>It means that you throw an exception after you catch it. Sometimes you want the caller to know what exception was thrown, but you need to do some cleanup yourself. In that case, you wouldn't want to let the exception propagate, as that would prevent you from doing your cleanup, so you could catch the exception, do what you need to do, then (re)throw the exception.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-purpose-of-a-throws-clause-in-a-method","title":"Question: What is the purpose of a throws clause in a method?","text":"<p>A <code>throws</code> clause looks like this:</p> <pre><code>public void myMethod() throws NullPointerException\n</code></pre> <p>and indicates to anyone calling <code>myMethod()</code> that <code>myMethod()</code> may throw a <code>NullPointerException</code>. In the case of checked exceptions, a <code>throws</code> clause is required if the method may throw an checked exception that is not handled within the method.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-checked-unchecked-exceptions","title":"Question: What is the difference between checked &amp; unchecked exceptions?","text":"<p>The compiler will verify that all checked exceptions are handled somehow - either with a <code>try..catch</code> block or by including a <code>throws</code> clause in the method signature. If a method includes a <code>throws</code> clause that lets callers know that an exception may occur which they must handle (or include their own <code>throws</code> clause). Unchecked exceptions are not verified by the compiler.  The intention of checked exceptions is to ensure that exceptions are properly handled by the programmer. Once the program is executing there is no difference between checked &amp; unchecked exceptions. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-when-would-we-throw-an-exception","title":"Question: When would we throw an exception?","text":"<p>You can throw an exception any time some extraordinary problem occurs. For example, suppose we have a \"bag of things\" class with a \"put\" method. If the bag is full, then we can't \"put\" anything in it, so in that case we could choose to throw an exception. We can either throw an existing exception or create a new exception and throw that. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-should-i-use-exceptions-to-validate-input","title":"Question: Should I use exceptions to validate input?","text":"<p>It is a good idea to catch any exceptions when getting input. For example, a user may enter an input of the wrong type, say a character instead of an integer.</p> <p>You could also use an exception to catch invalid values that are input - say a phone number that has too many digits, though in that case you would need to define your own exception to throw. </p> <p>It is usually simpler to just validate the value and re-prompt until you get a valid input.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-we-create-our-own-exception-how-would-you-do-that","title":"Question: Can we create our own exception?  How would you do that?","text":"<p>You can create a new exception by extending an existing exception. You can add checks in your code for whatever the exception is then throw the exception when it happens.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-meant-by-exception-propagation-how-does-exception-propagation-work","title":"Question: What is meant by exception propagation?  /  How does exception propagation work?","text":"<p>If an exception is not caught, then the current method exists and the exception is propagated to the calling method. This process repeats until the exception is caught or, if the exception reaches the main method and it is not caught there, the program exits.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-do-i-know-where-to-catch-an-exception","title":"Question: How do I know where to catch an exception?","text":"<p>It is a design decision whether to handle an exception in a particular method or force any caller to handle.. You can indicate that a method does not catch an exception by adding a throws clause to the method declaration. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-try-catch-blocks-be-nested","title":"Question: Can try-catch blocks be nested?","text":"<p>Yes. For example, suppose you have a program that needs to keep running no matter what. You might have a try-catch around your entire program logic that catches a general Exception to ensure that it keeps running. Inside that outer try block you may have other exceptions you want to catch and recover from, for example a resource is unavailable or you get bad input. You can nest a try-catch statement so that you deal with those where they happen.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-you-catch-exceptions-outside-the-main-method","title":"Question: Can you catch exceptions outside the main() method?","text":"<p>You can catch exceptions anywhere in your code. Though keep in mind that <code>main()</code> is the entry point of your program so technically all of your code is part of <code>main()</code>.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-how-do-we-know-what-exception-to-catch","title":"Question: How do we know what exception to catch?","text":"<p>You can look at the Java exception hierarchy to see which ones are already defined and which ones might be thrown. You can also give your program input which you think might cause an exception and take note of what exception gets thrown when you run your program. You can catch an <code>Exception</code> object, which will handle any exception that is thrown, though you should be careful doing that since it may squash important information about bugs in your program. Also keep in mind that you can catch multiple types of exceptions by using multiple catch blocks. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-the-difference-between-a-run-time-error-and-runtimeexceptions","title":"Question: What is the difference between a run time error and <code>RuntimeExceptions</code>?","text":"<p>A run time error is any error that happens during run time due to a bug in the program. Many run time errors, such as using an invalid array index or division by zero, will result in a <code>RuntimeException</code> being thrown. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-can-exceptions-be-caught-outside-of-the-main-method","title":"Question: Can exceptions be caught outside of the <code>main()</code> method?","text":"<p>Exceptions can be caught where they are thrown. If they are not caught when they occur then the exception propagates to the calling function.  </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-what-is-autocloseable","title":"Question: What is <code>AutoCloseable</code>?","text":"<p><code>AutoCloseable</code> is an interface that allows an object to be handled by a try-with-resources block. It contains a single method:</p> <pre><code>void close();\n</code></pre> <p>to ensure that the try-with-resources block is able to call the close method for the object when the block is complete.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-faq/#question-why-would-i-want-to-create-a-class-that-implements-autocloseable","title":"Question: Why would I want to create a class that implements <code>AutoCloseable</code>?","text":"<p>You would want to implement a the <code>AutoCloseable</code> interface anytime you have a class that uses resources (eg. a <code>Scanner</code> or network sockets) you want to be usable with a try-with-resources block.  When objects of classes that implement the <code>AutoCloseable</code> interface are used in a try-with-resources block, the <code>close()</code> method is called when the object goes out of scope.  This means the object is able to clean up after itself (freeing/closing resources) without the client explicitly having to close it.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/","title":"Inheritance and Exceptions - Notes","text":"","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#csc205-module-2","title":"CSC205 - Module 2","text":"","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#containment","title":"Containment","text":"<p>One of the powerful features of object-oriented programming is how you can reuse existing objects. Up to this point,  you have created classes through aggregation - your classes have contained members of other classes or primitive types. If <code>Object A</code> contains an object reference variable of type <code>Object B</code> then we say that <code>A</code> contains <code>B</code>. We use containment when a \"has-a\" relationship exists between two classes. For example, a book has an author, a city has a mayor, a person has a name, and so on. In the code below, we define a class that we can use to manage characters in a game. Each character has a name, strength, and health. We would then add methods to update the characters strength and health as the game was played.</p> <pre><code>public class GameCharacter {\n    private String name;\n    private int strength;\n    private int health;\n\n    // methods go here\n}\n</code></pre>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#inheritance","title":"Inheritance","text":"<p>In addition to containment, object-oriented programming languages allow us to associate classes together using inheritance where one class inherits the methods and data of another class. Inheritance allows a programmer to reuse an existing class (the parent / super / base class). The new class is called the child / sub / derived class. The child can then define changes to the parent class. Inheritance is used when an \"is-a\" relationship exists between two classes.</p> <p>The following diagram has 3 examples of inheritance. Notice how, for each of these, you could say the child class \"is-a\" parent class.</p> <pre><code>flowchart BT\n    Airplane --&gt; Vehicle\n    GasGiant --&gt; Planet\n    Platypus --&gt; Mammal</code></pre> <p>We could instantiate an instance of each child class as follows:</p> <pre><code>Airplane flight = new Airplane(\"Boeing\", 747, \"VH-OJL\");\nGasGiant destination = new GasGiant(\"Saturn\");\nPlatypus secrentAgent = new Platypus(\"Perry\");\n</code></pre> <p>Note that the child class is not a proper noun, but the instantiation includes a proper noun. Also, in each case, the variable name refers to how the object will be used in the program.</p> <p>The derived class can do any or all of the following: - Add new variables - Add new methods - Change existing methods by overriding - Have a new name and otherwise be identical to the parent class</p> <p>Java uses the extends keyword to indicate one class is inheriting from another. Java permits a class to inherit from only one other class. Recall that the super reference refers to the parent class. The most common use is to call the parent's constructor from the child class - <code>super()</code>. Java requires the call to the parent\u2019s constructor (if there is one) to be the first line of the constructor.</p> <p>In the code below, we define a class that inherits from the GameCharacter class we saw above. The Wizard class extends GameCharacter, so it has name, health, and strength members that it inherits. It also adds an array of spells.</p> <p><pre><code>public class Wizard extends GameCharacter {\n\n    private Spell spells[];\n\n    // methods go here\n}\n</code></pre> Notice that the Wizard class is associated to GameCharacter through inheritance (a Wizard \"is-a\" GameCharacter) and to Spell through containment (a Wizard \"has-a\" array of spells)</p> <p>Inheritance provides many benefits. It eliminates the need to re-implement the same methods multiple times. Any changes to a parent class are instantly propagated to the child classes. Abstract classes (which we will cover next) can serve as a blueprint for child classes to reduce development time.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#inheritance-vs-containment","title":"Inheritance vs. Containment","text":"<p>Use inheritance when there is an \"is-a\" relationship between the two classes and you want to reuse a lot of the parent class\u2019s members. Use containment when there is a \"has-a\" relationship. Think of a <code>Car</code> class which could inherit from <code>Vehicle</code> and use its <code>start</code>, <code>steer</code>, and <code>brake</code> methods. It could also contain <code>Tire</code> (hopefully 4!), <code>Engine</code>, and <code>SteeringWheel</code> classes, among others.</p> Object Relationship Object Computer has-a CPU Rocket has-a Engine Song has-a Title Old MacDonald has-a Farm House has-a Den Square is-a Shape Kitchen is-a Room MacBook is-a Computer Zilog Z8000 is-a CPU Grasshopper is-a Insect <p>Suppose we want to create a <code>Sedan</code> class. A sedan \"is-a\" car, so it would extend a <code>Car</code> class. A sedan has 4 doors and a trunk, so it would contain those as members (in addition to elements like 4 wheels, a transmission, and other members it would get from <code>Car</code>). So the (partial) class definition would look something like this:</p> <pre><code>public class Sedan extends Car // Sedan \"is-a\" car {\n\n    private int trunk;       // Sedan \"has-a\" trunk\n    private Door doors[4];   // Sedan \"has-a\" set of 4 doors\n}\n</code></pre> <p>To summarize, the Sedan class would inherit from Car since a sedan is-a car, and it would contain 4 doors and a trunk since a sedan has-a trunk and has-a set of 4 doors.</p> <p>Note that there are exceptions to the is-a and has-a rules. Even if there is not a clear is-a relationship you may want to use inheritance if the child class needs most of the parent class's methods. You may want to use containment even if there is not a has-a relationship if you want to change access to a parent class's members. For example, suppose you have a <code>Backpack</code> class with a <code>public open()</code> method - maybe you want to use containment so that you can create your own <code>private open()</code> method that calls the <code>Backpack.open()</code> method.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#special-references-this-and-super","title":"Special References - <code>this</code> and <code>super</code>","text":"<p>Java objects contain two special references. The \"this\" reference refers to the object itself. It allows an object to refer to itself, such as calling another overloaded constructor or referring to its members when they have been shadowed by a local variable name or parameter. This reference can be useful to make methods more clear, especially when another object of the same type is involved, such as when a class has a method that takes an object of that same class as a parameter (as with <code>compareTo</code>).</p> <p>The \"super\" reference refers to the parent class of an object. The super reference can be used to call the parent class's constructor (always a good idea!). For example, in the example below, from the last module's notes, we call the <code>Account</code> class parent constructor:</p> <pre><code>public Account(String name, int credits) {\n        super();\n        this.name = name;\n        this.level = credits;\n        this.accountNumber = generateAccountNumber();\n}\n</code></pre> <p>The super constructor must be called in the first line of code in the constructor or else not at all.</p> <p>It can also be used if both the parent class and the child class have a member with the same name (which is not good class design). </p> <p>Note that neither this nor super can be used in a static method since they refer to a specific instance. </p> <p>The diagram below demonstrates how these special references work. The <code>super</code> reference can be used to access (public or protected) members of the parent class. The <code>this</code> reference can be used to access all members of the child class except for private members and shadowed members of the parent class. If we have shadowed members, for example if both the parent and child classes declare a variable called <code>MyNumber</code>, then there are two copies of the <code>MyNumber</code> in every object of the child class - one from the parent class and one from the child class. You can see how this can only reference the <code>MyNumber</code> from the child class, but we can use super to refer to the <code>MyNumber</code> from the parent class. </p> \"this\" Members \"super\"  Yes Parent Class Members  Yes  Yes Shadowed Members  Yes  Yes Child Class Members   No <p>However, to reiterate - shadowed members are a bad thing and should be avoided unless absolutely necessary. And it probably isn\u2019t absolutely necessary, so do not do it.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#visibility-modifiers","title":"Visibility Modifiers","text":"<p>In Java, class members are private by default. Private data and methods in the parent class cannot be accessed (directly) by the child class. The protected modifier makes class members \"public\" to derived classes and \"private\" to everything else. Object-oriented purists will argue (correctly) that the protected modifier breaks encapsulation, but others will argue (also correctly) that it only breaks encapsulation a little bit and using protected members results in cleaner code syntax than calling accessors and mutators on parent class data. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#overriding-methods","title":"Overriding Methods","text":"<p>A child can override (redefine) the parent class's methods. This can be useful when the parent method doesn't work for the child or if the child needs to do additional work. To override a method, the method signature in the child class must be the same. The type of the object executing the method determines which version is invoked. Parent methods can still be invoked using the super reference. Members which are modified with the final modifier cannot be overwritten.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#the-override-annotation","title":"The <code>@Override</code> Annotation","text":"<p>When overriding a method, it is good practice to use the <code>@Override</code> annotation to indicate to the compiler that the method is intended to override a method in a parent class (or in an interface, which we will cover in the next module). For example, the <code>toString</code> should always be intended to override the <code>Object.toString</code> method (since every class inherits from the O`bject class) so we add the annotation as follows:</p> <pre><code>@Override\npublic String toString() {\n    return \"Task [priority=\" + priority + \", name=\" + name + \"]\";\n}\n</code></pre> <p>The annotation simply tells the compiler that <code>toString</code> is overriding a method. Eclipse adds the <code>@Override</code> annotation when you have it automatically generate inherited abstract methods. The annotation has no impact on how the program runs. However, it does help the programmer avoid bugs by indicating when a method that is intended to override another method is not actually overriding anything. For example, if we added a parameter to the toString method above we would get a compiler error.</p> <p></p> <p>This can prevent hard-to-find bugs where the wrong method is being called. </p> <p>To reiterate, you can override a method with or without using the <code>@Override</code> annotation. We would be overriding the <code>toString</code> in the example above whether we used the annotation or not. The annotation is just there to let the compiler help you ensure that methods that are intended to be overriding other methods actually do so. You should always get in the practice of using the <code>@Override</code> annotation when you are overriding methods.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#overloading-vs-overriding","title":"Overloading vs Overriding","text":"<p>We saw in the previous module how overloading works. Overloading and overriding are often confused. Keep in mind the following:</p> <ul> <li>Overloading<ul> <li>Deals with members in the same class</li> <li>The methods have the same name, but different signatures</li> <li>Used when methods have a similar operation but different parameters</li> </ul> </li> <li>Overriding<ul> <li>Deals with members in different classes</li> <li>The methods have the same name and same signature</li> <li>Used when methods have a similar operation with different object types</li> </ul> </li> </ul> <p>As an example, suppose we have a parent classed defined as below:</p> <pre><code>public class Base {\n\n    protected int a;\n\n    public void change(int x) {\n        a = x;\n    }\n\n    public void print() {\n        System.out.println(\"BASE: a=\" + a);\n    }\n\n}\n</code></pre> <p>And suppose we have a child class defined as below:</p> <pre><code>public class Derived extends Base{\n\n    private String s;\n\n    public void change(String y) {\n        s = y;\n    }\n\n    public void change(int x, String y) {\n        a = x;\n        s = y;\n    }\n\n    public void print() {\n        System.out.println(\"DERIVED: a=\" + a + \" and s=\" + s);\n    }\n\n}\n</code></pre> <p>Here, the Derived class overrides the print method since the signature is the same as in the <code>Base</code> class. The change method is overloaded. In fact, there are 3 versions of change in the <code>Derived</code> class:</p> <p><pre><code>    public void change(int x)\n</code></pre> which <code>Derived</code> inherits from the <code>Base</code> class and</p> <pre><code>    public void change(String y)\n    public void change(int x, String y)\n</code></pre> <p>which <code>Derived</code> overloads. So - <code>print()</code> is overridden, and <code>change()</code> is overloaded in this example.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#class-hierarchies","title":"Class Hierarchies","text":"<p>Classes related by inheritance can be arranged into class hierarchies. For example, here is an example class hierarchy of animals:</p> <pre><code>flowchart TD\n    B[Animal]\n    B--&gt;C[Reptile]\n    B--&gt;D[Mammal]\n    B--&gt;E[Insect]\n    C--&gt;F[Snake]\n    C--&gt;G[FlyingDragon]\n    D--&gt;H[Horse]\n    D--&gt;I[Bat]\n    E--&gt;J[Ant]\n    E--&gt;K[DragonFly]</code></pre> <p>Each child inherits from all its ancestor classes. Common features should be placed as high in the hierarchy as possible (but no higher!). So things that apply to all animals (breath oxygen, reproduce sexually, able to move, etc) should go in the <code>Animal</code> class, while things related more specifically to mammals (such as warm-blooded, bear live young, hair) should go in the <code>Mammal</code> class. Then additional child classes could be more specific. Anything in the <code>Animal</code> class should apply to any child class and anything in the <code>Insect</code> class should pertain to all Insect child classes. You would not want to put something such as \"has 6 legs\" in the <code>Animal</code> class since not all <code>Animals</code> have 6 legs, but such an attribute would be appropriate for the <code>Insect</code> class, but you If there are exceptions (such as penguins are birds but don\u2019t fly) they can be dealt with in the child class (for example Penguin could have an empty fly method), but your class hierarchy design should minimize the number of exceptions required. </p> <p>There can be (and often is) more than one \"correct\" hierarchy. For example, suppose you want to create a class hierarchy that contains the same classes as the example above. Then the following class hierarchy is also perfectly reasonable:</p> <pre><code>flowchart TD\n    B[Animal]\n    B--&gt;C[FlyingAnimal]\n    B--&gt;D[LandBased]\n    C--&gt;E[Bat]\n    C--&gt;F[FlyingDragon]\n    C--&gt;G[DragonFly]\n    D--&gt;H[Snake]\n    D--&gt;I[Horse]\n    D--&gt;J[Ant]</code></pre> <p>It is up to the program designer to determine the class hierarchy that best fits the problem domain. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#the-java-object-class","title":"The Java Object Class","text":"<p>All Java classes are derived from the <code>Object</code> class. A class without the <code>extends</code> keyword by default will extend the Object class. (I\u2019m not a huge fan of that name - it means that every class \"is-a\" Object. If you come across a reasonable explanation for that name please let me know.)  </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#the-object-class-includes-a-few-useful-methods","title":"The Object class includes a few useful methods","text":"<ul> <li>toString</li> <li>equals</li> <li>clone</li> </ul> <p>Nearly every class you implement should override the <code>toString()</code> method and many should also override <code>equals()</code> so that you can check equality of two objects. Keep in mind that the <code>==</code> operator in Java checks that two references are equal, not two objects!</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#abstract-classes","title":"Abstract Classes","text":"<p>An abstract class is a placeholder that represents a generic concept in the class hierarchy. An abstract class cannot be instantiated, but you can instantiate their non-abstract child classes. Abstract classes are declared with the <code>abstract</code> modifier as below:</p> <pre><code>public abstract class Animal {\n    // contents\n}\n</code></pre> <p>An abstract class can (but is not required to) contain abstract methods - methods with no definition. Non-abstract children must override these methods or else they will themselves be abstract. Abstract methods cannot be defined as final (think about why not). Abstract classes can also contain fully implemented methods and data members. </p> <p>Carefully consider where to put abstract classes in the class hierarchy. In our Animal class hierarchy above, the Animal, Insect, Mammal, and Reptile classes could be abstract since we would never instantiate an object of any of those classes. </p> <p>Abstract classes can be a difficult concept to wrap your mind around, especially without seeing an example. So be sure to review the video and code examples of abstract classes.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#designing-classes-in-a-hierarchy","title":"Designing Classes In a Hierarchy","text":"<p>Every child class should usually have an is-a relationship with the parent class</p> <ul> <li>Think about reuse</li> <li>Push common characteristics as high as possible</li> <li>Override methods to tailor or change child functionality as needed</li> <li>Add new variables in the child classes</li> <li>Be careful of shadowing inherited variables (creating a child class member with the same name as a parent class member)</li> <li>Allow each class to manage its own data</li> <li>Override general methods (toString, equal) with appropriate definitions</li> <li>Use abstract classes to represent general concepts</li> <li>Use visibility modifiers carefully to provide access while maintaining encapsulation </li> <li>Use the final modifier to curtail inheritance</li> </ul>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#exceptions","title":"Exceptions","text":"<p>An exception is an object that describes an unusual or erroneous situation. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#a-program-can-deal-with-an-exception-in-three-ways","title":"A program can deal with an exception in three ways:","text":"<ul> <li>Handle it where it occurs</li> <li>Allow it to propagate to another place in the program where it will be handled</li> <li>Ignore it (only for unchecked exceptions - checked exceptions must be handled)</li> </ul>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#verification-vs-exceptions","title":"Verification vs. Exceptions","text":"<p>There are two ways to find out something is not OK</p> <ul> <li>Verifying input/state is correct before execution<ul> <li>\"Is it OK to continue?\"</li> <li>\"Are we sure we are ready?\"</li> <li>\"Is everything set up correctly?\"</li> </ul> </li> <li>Checking for exceptions after execution<ul> <li>\"Did anything bad happen?\"</li> <li>\"Did everything work?\"</li> </ul> </li> </ul> <p>Which is better depends on the situation. Usually programs combine the two.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#exception-handling-in-java","title":"Exception Handling in Java","text":"<p>Java has a predefined set of exceptions. In Java, exceptions are objects with their own class hierarchy. Classes that define exceptions are related by inheritance. All error and exception classes are descendants of the <code>Throwable</code> class. We can create new exceptions by extending the <code>Exception</code> class or one of its descendants. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#some-common-java-exceptions-are","title":"Some common Java exceptions are:","text":"<ul> <li><code>NullPointerException</code> when you try to use an object reference that is null</li> <li><code>ArithmeticException</code> when you try to divide by 0</li> <li><code>ArrayIndexOutOfBoundsException</code> when you try to access an invalid array index</li> <li><code>FileNotFoundException</code> when you try to open a file that does not exist</li> <li><code>NumberFormatException</code> when you try to convert a string to a number in an invalid format</li> <li><code>IllegalArgumentException</code> when you call a method with a parameter of an invalid type</li> </ul> <p>If an exception is ignored (an uncaught exception), the program will terminate abnormally and produce an appropriate message. A call stack trace will be displayed indicating the line where the exception occurred and the method call trail that leads to execution.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#the-try-catch-finally-statement","title":"The <code>try-catch-finally</code> Statement","text":"<p>Code that may trigger an exception should be placed in a try block. The try block can be followed by one or more catch clauses (exception handlers). The first handler that matches the exception is executed. A finally block following the try-catch will always be executed (Ok, this is not strictly true if the computer is destroyed due to the exception, but the statement is close enough to being true for our purposes.)  </p> <pre><code>try {\n    // Code that may throw an exception\n} catch (Exception e) {\n    // Handle exception\n}\nfinally {\n    // This code executes no matter what\n}\n</code></pre> <p>The programmer can throw an exception using the throw statement. Usually this is done after checking a condition and detecting something is wrong.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#the-try-with-resources-construct","title":"The <code>try-with-resources</code> Construct","text":"<p>It is very common in Java to have code that opens resources (files, Scanner, database, network) that need to be closed when you are done. If an exception occurs, you still need to close the resource. One way is to close the resource in the finally block, but the programmer still has to remember to do this and you may need a separate set of exception handlers inside the finally block!  Closing the resource inside the finally block also means it has to be declared before the try block so that it is scope for the finally block.</p> <p>The try-with-resources construct allows the programmer to open a resource that will be automatically closed when the try-catch block is complete The resource class must implement the <code>AutoClosable</code> interface</p> <pre><code>try(ResourceClass res = new ResourceClass()) {\n    // code\n}\ncatch (Exception e) {\n    // Handle exception\n}\n// res will be automatically closed\n</code></pre>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#exception-propagation","title":"Exception Propagation","text":"<p>If an exception is not handled where it occurs it is passed to the calling method. Exceptions propagate up through the method call hierarchy until they are caught and handled or until they reach the main method. A try block will catch any exception thrown by a method inside it. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#checked-vs-unchecked-exceptions","title":"Checked vs Unchecked Exceptions","text":"<p>An exception can be either checked or unchecked. Checked exceptions must be either caught or listed in the throws clause of any method that may throw or propagate it. The compiler will complain if neither of these happens. For example, the method below expects the caller to handle the <code>EmptyCollectionException</code></p> <pre><code>public T getRootElement() throws EmptyCollectionException {\n\n}\n</code></pre> <p>An unchecked exception does not require explicit handling. Objects of type <code>RuntimeException</code> are the only unchecked exceptions in Java. Errors are similar to RuntimeExceptions and should not be caught and do not require a throws clause. </p> <p>Unchecked exceptions extend the <code>RuntimeException</code> class, while checked exceptions extend the <code>Exception</code> class.</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#exception-handling-summary","title":"Exception Handling Summary","text":"<ul> <li>try to execute statements within a block of code</li> <li><code>throw</code> an exception if you detect a problem</li> <li><code>catch</code> and process the exception</li> <li><code>finally</code> execute code that will run even if an exception is thrown</li> </ul> <p>You should always handle exceptions appropriately!</p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#java-io","title":"Java I/O","text":"<p>A stream is a sequence of bytes. Our programs can read from an input string and write to an output stream. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#there-are-three-standard-io-streams","title":"There are three standard I/O streams:","text":"<ul> <li><code>System.in</code> - standard input</li> <li><code>System.out</code> - standard output</li> <li><code>System.err</code> - standard error</li> </ul> <p><code>System.in</code> and <code>System.err</code> will both display on the cursor, with <code>System.err</code> in red. </p>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#ioexception-class","title":"IOException Class","text":"<p>An <code>IOException</code> is a checked exception. It is thrown any time there is an issue with I/O, such as</p> <ul> <li>A file does not exist</li> <li>Program cannot open a file</li> <li>Data is in incorrect format</li> </ul>","boost":1},{"location":"csc205/module-2/inheritance-and-exceptions-notes/#writing-text-files","title":"Writing Text Files","text":"<p>The <code>FileWriter</code> class represents a text output file. It provides minimal support for manipulating data. A <code>PrintWriter</code> gives us methods to print. Output streams should be closed, either by calling <code>close()</code> explicitly or using try-with-resources.</p>","boost":1},{"location":"csc205/module-3/","title":"Polymorphism and Interfaces - Index","text":"","boost":1},{"location":"csc205/module-3/#csc205-module-3","title":"CSC205 - Module 3","text":"","boost":1},{"location":"csc205/module-4/","title":"Recursion and Analysis of Algorithms - Index","text":"","boost":1},{"location":"csc205/module-4/#csc205-module-4","title":"CSC205 - Module 4","text":"<ul> <li>Programming Exercise 4 - Recursion</li> </ul>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/","title":"Module 4 - Programming Exercise - Recursion","text":"<p>The purpose of these exercises is to give you additional practice writing recursive methods.</p> <p>For the sample output, the input is given in [brackets].</p> <p>Feel free to use additional helper methods if you would like, but the function signature for the calling method should match the function signature given.</p> <p>Check your answers against the provided solutions. Solutions written in C, C++, or Java should be similar to each other.</p> <p>These would also make good practice for Scheme and Prolog (though Prolog will require additional parameters).</p> <p>For questions that ask you to print a sequence you can alternatively add the sequence to a list.</p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#1-write-a-recursive-method-func1n-that-calculates-the-following-function","title":"1. Write a recursive method <code>func1(n)</code> that calculates the following function:","text":"\\[ \\begin{align*} &amp;f(1) = 10 \\\\ &amp;f(n) = f(n-1) + 3 \\\\ \\end{align*}  \\] <p>Sample output: <code>[1]: 10   [5]: 22   [10]: 37   [20]: 67</code></p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#2-write-a-recursive-method-func2n-that-calculates-the-following-function","title":"2. Write a recursive method <code>func2(n)</code> that calculates the following function:","text":"\\[ \\begin{align*} &amp;f(1) = 1 \\\\ &amp;f(n) = n^2\\times f(n-1) \\\\ \\end{align*}  \\] <p>Sample output:  <code>[1]: 1   [5]: 14400  [10]: 13168189440000</code></p> <p>Your code may not calculate f(10) correctly depending on the type/language you use.</p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#3-write-a-recursive-method-func3n-that-calculates-the-sum-of-the-series-1-2-3-4-5-6-n","title":"3. Write a recursive method <code>func3(n)</code> that calculates the sum of the series <code>-1 + 2 - 3 + 4 - 5 + 6 ... n</code>.","text":"<p>Sample output: <code>[1]: -1   [5]: -3   [10]: 5   [20]: 10</code></p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#4-write-a-recursive-method-tribonaccin-that-returns-the-nth-tribonacci-number-defined-as","title":"4. Write a recursive method <code>tribonacci(n)</code> that returns the <code>nth</code> Tribonacci number defined as:","text":"\\[ \\begin{align*} &amp;f(1) = 1 \\\\ &amp;f(2) = 1 \\\\ &amp;f(3) = 2 \\\\ &amp;f(n) = f(n-1) + f(n-2) + f(n-3) \\\\ \\end{align*}  \\] <p>Sample output:<code>[1]: 1   [5]: 7   [10]: 149   [20]: 66012</code></p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#5-write-a-recursive-method-addx-y-that-recursively-computes-the-sum-of-x-and-y-you-can-assume-that-x-and-y-are-both-positive","title":"5. Write a recursive method <code>add(x, y)</code> that recursively computes the sum of <code>x</code> and <code>y</code>.  You can assume that <code>x</code> and <code>y</code> are both positive.","text":"<p>Sample output: <code>[1 + 1] = 2     [3 + 2] = 5     [7 + 8] = 15</code></p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#6-write-a-recursive-method-printdownfromn-that-prints-the-numbers-from-n-down-to-1","title":"6. Write a recursive method <code>printDownFrom(n)</code> that prints the numbers from <code>n</code> down to <code>1</code>.","text":"<p>Sample output:</p> <pre><code>[1]: 1\n[5]: 5 4 3 2 1\n[10]: 10 9 8 7 6 5 4 3 2 1\n[20]: 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n</code></pre>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#7-write-a-recursive-method-printupton-that-prints-the-numbers-1-to-n","title":"7. Write a recursive method <code>printUpTo(n)</code> that prints the numbers <code>1</code> to <code>n</code>.","text":"<p>Sample output:</p> <pre><code>[1]: 1\n[5]: 1 2 3 4 5\n[10]: 1 2 3 4 5 6 7 8 9 10\n[20]: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n</code></pre>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#8-write-a-recursive-method-gcdx-y-that-calculates-greatest-common-divisor-of-two-numbers-using-the-following-method","title":"8. Write a recursive method <code>gcd(x, y)</code> that calculates greatest common divisor of two numbers using the following method:","text":"<pre><code>gcd(x, y) = y if y &lt;= x and y divides x\n\ngcd(x, y) is gcd(y, x) if x \\&lt; y\n\ngcd(x, y) is gcd(y, x % y) otherwise\n</code></pre> <p>Sample output: <code>[96 and 60] 12    [30 and 10] 10    [96 and 120] 24</code> </p>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#9-write-a-recursive-method-ispalindromes-that-returns-true-if-s-is-a-palindrome-and-false-otherwise","title":"9. Write a recursive method isPalindrome(s) that returns true if s is a palindrome and false otherwise.","text":"<p>Sample output:</p> <pre><code>[abcd] = false\n[abccba] = true\n[aabcbaa] = true\n</code></pre>","boost":1},{"location":"csc205/module-4/module-4-programming-exercise-4-recursion/#10-a-recursive-method-called-collatzn-that-prints-the-numbers-in-the-collatz-sequence-in-which-each-successive-value-is-obtained-using-the-following-function","title":"10. A recursive method called <code>collatz(n)</code> that prints the numbers in the Collatz sequence in which each successive value is obtained using the following function:","text":"\\[ f(n) = \\Bigg \\{ \\begin{align*} \\frac{n}{2} &amp; \\text{} n \\equiv 0 \\pmod{2} \\\\ 3n+1        &amp; \\text{} n \\equiv 1 \\pmod{2} \\\\ \\end{align*} \\Bigg . \\] <p>Sample output:</p> <pre><code>[1] : 1  \n[5] : 5, 16, 8, 4, 2, 1  \n[19] : 19, 58, 29, 88, 44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1\n</code></pre>","boost":1},{"location":"csc205/module-5/","title":"Collections Generics and Iterators - Index","text":"","boost":1},{"location":"csc205/module-5/#csc205-module-5","title":"CSC205 - Module 5","text":"","boost":1},{"location":"howtos/","title":"How-Tos - Index","text":"<ul> <li>How-Tos - CSC110</li> <li>How-Tos - CSC205</li> <li>How-Tos - CSC240</li> </ul>","boost":1},{"location":"howtos/howtos-csc110/","title":"How-Tos - CSC110","text":"","boost":1},{"location":"howtos/howtos-csc110/#wade-hubers-github-codeexamples-csc110examples-and-youtube","title":"Wade Huber's GitHub CodeExamples, csc110examples, and Youtube","text":"<p>https://github.com/wadehuber/codeexamples</p> <p>https://github.com/wadehuber/csc110examples</p> <p>https://www.youtube.com/@logiclambda</p>","boost":1},{"location":"howtos/howtos-csc205/","title":"How-Tos - CSC205","text":"","boost":1},{"location":"howtos/howtos-csc205/#wade-hubers-github-codeexamples-csc205codeexamples-and-youtube","title":"Wade Huber's GitHub CodeExamples, csc205codeexamples, and Youtube","text":"<p>https://www.youtube.com/@logiclambda</p> <p>https://github.com/wadehuber/codeexamples</p> <p>https://github.com/wadehuber/csc205codeexamples</p> <p>Note</p> <p>The csc205codeexamples is a private GitHub repository. You will need to contact Wade Huber to be added to the repository for access.</p>","boost":1},{"location":"howtos/howtos-csc240/","title":"How-Tos - CSC240","text":"","boost":1},{"location":"howtos/howtos-csc240/#wade-hubers-github-codeexamples-csc240classexamples-and-youtube","title":"Wade Huber's GitHub CodeExamples, csc240classexamples, and Youtube","text":"<p>https://github.com/wadehuber/codeexamples</p> <p>https://github.com/CGCC-CS/csc240classexamples</p> <p>https://www.youtube.com/@logiclambda</p>","boost":1},{"location":"howtos/howtos-csc240/#install-gcc-g-and-make-on-ubuntu-wsl","title":"Install GCC, G++ and Make on Ubuntu (WSL)","text":"<pre><code>$ sudo apt update\n$ sudo apt upgrade -y\n$ sudo apt install build-essential\n</code></pre> <p>Note</p> <p>build-essential installs gcc, g++, and make.</p> <p>Source of info:</p> <p>https://help.ubuntu.com/community/InstallingCompilers</p>","boost":1},{"location":"howtos/howtos-csc240/#to-verfiy-the-versions-of-gcc-g-and-make-that-was-installed-on-ubuntu-wsl","title":"To verfiy the versions of gcc, g++ and make that was installed on Ubuntu (WSL)","text":"<pre><code>$ gcc -v\n$ g++ -v\n$ make -v\n</code></pre> <p>build-essential installs gcc, g++, and make.</p> <p>Source of info:</p> <p>https://help.ubuntu.com/community/InstallingCompilers</p>","boost":1},{"location":"howtos/howtos-csc240/#change-directory-into-a-windows-directory-from-linux-command-line","title":"Change directory into a windows directory from linux command line:","text":"<pre><code>$ cd /mnt/drive_letter/directory/directory/\n</code></pre>","boost":1},{"location":"howtos/howtos-csc240/#list-directory-contents","title":"List directory contents:","text":"<pre><code>$ ls -al\n</code></pre>","boost":1},{"location":"howtos/howtos-csc240/#compiling-c-with-gcc","title":"Compiling C with gcc","text":"<p>Always compile your code using the following command line options to ensure you are writing standard C code:</p> <pre><code>$ gcc --std=c11 -pedantic -Wall filename.c\n</code></pre> <p>then to run the code in Ubuntu, other Linux distros, WSL, or MacOS</p> <pre><code>$ ./a.out\n</code></pre> <p>Source of info:</p> <p>https://github.com/wadehuber/codeexamples/blob/master/programming/c_information.md</p>","boost":1},{"location":"howtos/howtos-csc240/#c-compiler-flags-g","title":"C++ Compiler Flags (g++)","text":"<p>You should compile your programs with the following command to ensure you are using the correct C++ standard.</p> <pre><code>$ g++ --std=c++17 -pedantic -Wall filename.cpp\n</code></pre> <p>then to run the code in Ubuntu, other Linux distros, WSL, or MacOS</p> <pre><code>$ ./a.out\n</code></pre> <p>Source of info:</p> <p>https://github.com/wadehuber/codeexamples/blob/master/programming/cpp_information.md</p>","boost":1},{"location":"howtos/howtos-csc240/#start-vscode-in-your-current-directory-while-in-wsl-ubuntu","title":"Start VSCode in your current directory while in WSL Ubuntu","text":"<pre><code>$ code .\n</code></pre>","boost":1},{"location":"programming/","title":"Programming - Index","text":"<ul> <li> <p>Arrays</p> <ul> <li>One-Dimensional Arrays</li> <li>Two-Dimensional Arrays</li> <li>Initializing an Array with Random Unique Values</li> <li>Key Array Skills</li> </ul> </li> <li> <p>Conditionals and Loops</p> <ul> <li>Conditionals</li> <li>Boolean</li> <li>Logical Operators</li> <li>Relational Operators</li> <li>Basic Truth Tables Using Boolean Values Of True and False</li> <li>The getYorN() Method</li> <li>Loops - Three Types of Loops - The Do-While Loop, The While Loop, And The For Loop</li> <li>Counting Pre-Test Loop (While Loop) And Counting Post-Test Loop (Do-While Loop)</li> <li>For-Loop (Pre-Test Loop)</li> <li>While-Loop (Pre-Test Loop)</li> <li>Do-While Loop (Post-Test Loop)</li> <li>Game Loop</li> <li>Input While-Loop (Pre-Test Loop) With A Sentinel Value And A Priming Read</li> <li>Standard Input-Sentinel Loop</li> <li>wantsToContinue Loop</li> <li>Nested Loops</li> <li>While Loop General Format In Pseudocode</li> <li>While-Loop Example</li> <li>Which Loop To Use</li> <li>Loops Terminology</li> </ul> </li> <li> <p>Input Validation</p> <ul> <li>getValidNumber() Template Input Validation</li> <li>isInvalid() Template Input Validation</li> <li>One-Function Input Validation Model</li> <li>Two-function Input Validation Model</li> <li>Validating String Data</li> <li>Examples of Common String Library Functions</li> <li>Common Input Values To Test For</li> </ul> </li> <li> <p>Menus</p> <ul> <li>Practice Menu</li> </ul> </li> <li> <p>Methods</p> <ul> <li>The getString() Method</li> <li>The getInteger() Method</li> <li>The getDouble() Method</li> <li>The getYorN() Method</li> <li>The closeScanner() Method</li> <li>The getRandomNumber() Method</li> <li>Generalized Input Functions</li> <li>Methods Terminology</li> </ul> </li> <li> <p>Obejct Oriented Programming</p> <ul> <li>Object-Oriented Programming</li> <li>Object-Oriented Programming Terminology</li> <li>Object-Oriented Programming Review Questions</li> </ul> </li> <li> <p>Resources</p> <ul> <li>Java<ul> <li>Java Programming Resources</li> <li>Installing The Java Development Kit JDK</li> <li>Glossary</li> </ul> </li> <li>Eclipse IDE<ul> <li>Eclipse IDE: How To Find Matching Brackets and Missing Brackets</li> </ul> </li> <li>Writing<ul> <li>Di\u00e1taxis: A systematic approach to technical documentation authoring</li> </ul> </li> </ul> </li> <li> <p>Ternary</p> <ul> <li>Enhanced For Loops</li> <li>Enhanced If Statements</li> </ul> </li> </ul>","boost":1},{"location":"programming/factorial/","title":"Factorial Interview Question","text":"","boost":1},{"location":"programming/factorial/#problem-statement","title":"Problem Statement","text":"CSC110AB Factorial (Loops) - Interview Question - CGCC<pre><code>Write a program in pseudocode that prompts the user to enter a number. \nCalculate factorial for the given number and display the result to the user. \nKeep prompting the user for a number until the user enters a `0`.\n</code></pre> Example Output Provided<pre><code>Enter a number between 1 and 10 (Enter 0 to exit): 4\n24\n\nEnter a number between 1 and 10  (Enter 0 to exit): 7 \n5040\n\nEnter a number between 1 and 10  (Enter 0 to exit): 23\n\nThe number you entered was not between 1 and 10. \nRe-enter a number between 1 and 10 (Enter 0 to exit): 0\nGoodbye!\n</code></pre>","boost":1},{"location":"programming/factorial/#some-background-information","title":"Some Background Information","text":"<p>This question is for a CSC110<sup>1</sup> level class. CSC110<sup>1</sup>  is the first required computer programming class for students majoring computer science in the Maricopa County Community College District System. The programming language used in this class is Java.</p> <p>The student would be into Chapter 4 (Conditionals and Loops) of the textbook Java Foundations, Fifth Edition based on the current syllabus. This chapter is taught over two weeks, as opposed to one week, as the concepts are one of the first topics in the course that many students whom are new to programming struggle with. This corresponds to Week 4 and Week 5 of a sixteen week course.</p> <p>The minimum mathematics requirements for this course is MAT095<sup>2</sup>: Introductory Algebra/College Algebra Prep.</p> <p>More information about CSC110<sup>1</sup> and MAT095<sup>2</sup> are towards the end of this document.</p>","boost":1},{"location":"programming/factorial/#what-is-factorial","title":"What is Factorial","text":"","boost":1},{"location":"programming/factorial/#factorial-briefly-explained","title":"Factorial Briefly Explained","text":"<p>Since the topic of factorial is not usually covered in an IMAT095<sup>2</sup>: Introductory Algebra/College Algebra Prep. class, lets review it briefly.</p> <p>In mathematics, the factorial of a non-negative integer <code>n</code>, denoted by <code>n!</code>,  is the product of all positive integers less than or equal to <code>n</code>. </p> <p>For example: <code>4! = 4 * 3 * 2 * 1 = 24</code>.</p> <p>By convention the value of <code>0!</code> is <code>1</code>.</p> <p>We can find more basic information at:</p> <ul> <li>Math Is Fun</li> <li>Wikipedia</li> </ul>","boost":1},{"location":"programming/factorial/#breaking-the-problem-down","title":"Breaking The Problem Down","text":"<p>Let break this problem down into smaller pieces.</p> CSC110AB Factorial (Loops) - Interview Question - CGCC<pre><code>Write a program in pseudocode that prompts the user to enter a number. \nCalculate factorial for the given number and display the result to the user. \nKeep prompting the user for a number until the user enters a `0`.\n</code></pre>","boost":1},{"location":"programming/factorial/#based-on-the-problem-statement-we-know-that-we-need-to-do-the-following","title":"Based on the problem statement, we know that we need to do the following","text":"<ul> <li>We need to display a message to the user and have the user enter a number.</li> <li>Calculate the factorial of the valid number the user entered, or exit the program if the user entered a <code>0</code>.</li> <li>Display the result of the factorial calculation to the user.<ul> <li>The displayed result will just be the calculation.</li> </ul> </li> <li>Prompt the user for another number until the user enters <code>0</code></li> <li>Quit the program if the user enters a <code>0</code></li> </ul> <p>There is more...</p> <p>Some example output from the program was given to us...</p> Example Output<pre><code>Enter a number between 1 and 10 (Enter 0 to exit): 4\n24\n\nEnter a number between 1 and 10  (Enter 0 to exit): 7 \n5040\n\nEnter a number between 1 and 10  (Enter 0 to exit): 23\n\nThe number you entered was not between 1 and 10. \nRe-enter a number between 1 and 10 (Enter 0 to exit): 0\nGoodbye!\n</code></pre>","boost":1},{"location":"programming/factorial/#based-on-the-example-output-given-to-us","title":"Based on the example output given to us","text":"<ul> <li>We need to verify the user's number to be in a range.</li> <li>The range is between <code>1</code> and <code>10</code>.</li> <li>We need to verify the user's number is or is not <code>0</code>.</li> <li>We are going to infer that the range is inclusive of <code>1</code> and <code>10</code>.</li> <li>We are going to infer we are using integers.<ul> <li>The largest factorial will be <code>10!</code> and the result of <code>10!</code> is <code>362880</code>.</li> <li>The largest positive integer of type <code>int</code> in java is <code>2147483647</code>.</li> <li>If we increase the range greater than <code>16</code>, then we will need to change the data type to something that will hold a larger number.<ul> <li>In that case we can use the data type in java such as <code>double</code> up to a range maximum of <code>20</code></li> <li>The <code>BigInteger</code> class in Java is another option as it is designed to deal with really large numbers.</li> </ul> </li> </ul> </li> <li>We need to display an error message to the user if the user enters a number outside of the range of 1 and 10 inclusive of 1 and 10.<ul> <li>The wording of the error message is <code>The number you entered was not between 1 and 10.</code></li> </ul> </li> <li>We need to prompt the user with a message, after an error message, to enter a number or enter 0 to quit.</li> <li>The wording of this user prompt after the error message is different than the original starting prompt.<ul> <li>The wording is: <code>Re-enter a number between 1 and 10 (Enter 0 to exit):</code></li> </ul> </li> <li>The program must exit if the user enters <code>0</code> </li> <li>We need to display an exit message when the user quits the game.<ul> <li>The wording is: <code>Goodbye!</code></li> </ul> </li> </ul>","boost":1},{"location":"programming/factorial/#factorial-using-loops","title":"Factorial Using Loops","text":"<p>Below (in the tabs) is both the java code from the in person mini tutoring session as well as pseudocode written afterwards based on that in person mini tutoring session.</p> <p>This was a whiteboard session and code was not able to be compiled and tested. All verbal discussion during the mini session has been omited. Let's see what happens when we run the code. Try the in person mini tutoring session FactorialUsingLoops.java Java program in the Online Playground IDE</p> PseudocodeJava Factorial (Loops) - Pesudeocode<pre><code>// Factorial (Loops) - Pesudeocode - In Person Session\n// Date: 2024-06-06\n// Author: Steve Ellermann\n// Note: This would result in incorrect output, however the student would figure out \n// after testing it and come back with more questions or hopefully learned enough to \n// move forward on their own\nMain\n\n    Declare Integer factorial = 1\n    Declare Integer input = 0\n\n    Scanner scan = new Scanner\n\n    Display \"Enter a number between 1 and 10 (Enter 0 to exit): \"\n    input = scan\n\n    While (input != 0)  \n\n        If input &gt;= 1 AND input &lt;= 10\n\n                For Integer ii = factorial to input Step -1\n\n                    factorial = factorial * ii\n\n                End For\n\n            Display factorial\n\n            Display \"Enter a number between 1 and 10 (Enter 0 to exit): \"\n            input = scan  \n\n        Else\n\n            Display \"The number you entered was not between 1 and 10.\"\n            Display \"Re-enter a number between 1 and 10(Enter 0 to exit): \"\n            input = scan\n\n        End If\n\n    End While\n\n    Display \"Goodbye!\"\n\nEnd Main\n</code></pre> Factorial (Loops) - Java<pre><code>// Factorial (Loops) - Java- In Person Session\n// Date: 2024-06-06\n// Author: Steve Ellermann\n// Note: This would result in incorrect output, however the student would figure out \n// after testing it and come back with more questions or hopefully learned enough to \n// move forward on their own\n\nimport java.util.Scanner;\n\npublic class FactorialUsingLoops {\n\n    public static void main(String[] args) {\n\n        Scanner scan = new Scanner(System.in);\n\n        final int MIN = 1;\n        final int MAX = 10;\n        final int SENTINEL = 0;\n        int factorial = 1;\n        int input = 0;\n\n        System.out.print(\"Enter an integer between \" + MIN + \" and \" + MAX + \" inclusive \" + \"(Enter \" + SENTINEL + \" to exit): \");\n        input = scan.nextInt();\n\n        while (input != 0) {\n\n            if (input &gt;= MIN &amp;&amp; input &lt;= MAX) {\n\n                for (int ii = factorial; ii &lt;= input; ii--) {\n                    factorial *= ii;\n                }\n\n                System.out.println(\"\\n\" + input + \"! = \" + factorial);\n\n                System.out.print(\"\\nEnter an integer between \" + MIN + \" and \" + MAX + \" inclusive \" + \"(Enter \" + SENTINEL + \" to exit): \");\n                input = scan.nextInt();\n\n            } else {\n                System.out.println(\"\\nThe integer you entered was not between \" + MIN + \" and \" + MAX + \" inclusive.\");\n                System.out.print(\"Re-enter an integer between \" + MIN + \" and \" + MAX + \" inclusive \" + \"(Enter \" + SENTINEL + \" to exit): \");\n                input = scan.nextInt();\n            }\n\n        }\n\n        System.out.println(\"\\nGoodbye!\");\n\n    }\n\n}\n\n// Program Output\n// \n// Enter an integer between 1 and 10 inclusive (Enter 0 to exit): 4\n//\n// 4! = 0\n//\n// Enter an integer between 1 and 10 inclusive (Enter 0 to exit): 7\n//\n// 7! = 0\n// \n// Enter an integer between 1 and 10 inclusive (Enter 0 to exit): 23\n// \n// The integer you entered was not between 1 and 10 inclusive.\n// Re-enter an integer between 1 and 10 inclusive (Enter 0 to exit): 0\n// \n// Goodbye!\n// \n</code></pre> <p>Note</p> <ul> <li>Try the in person mini tutoring session FactorialUsingLoops.java Java program in the Online Playground IDE</li> </ul>","boost":1},{"location":"programming/factorial/#the-results-of-running-the-program-created-during-the-in-person-session","title":"The results of running the program created during the in person session","text":"Program Output<pre><code>Enter an integer between 1 and 10 inclusive (Enter 0 to exit): 4\n\n4! = 0\n\nEnter an integer between 1 and 10 inclusive (Enter 0 to exit): 7\n\n7! = 0\n\nEnter an integer between 1 and 10 inclusive (Enter 0 to exit): 23\n\nThe integer you entered was not between 1 and 10 inclusive.\nRe-enter an integer between 1 and 10 inclusive (Enter 0 to exit): 0\n\nGoodbye!\n</code></pre> <p>Not the results we were looking for</p> <ul> <li><code>4!</code> should be <code>24</code> not <code>0</code></li> <li><code>7!</code> should be  <code>5040</code> not <code>0</code></li> </ul> <p>What is working in our code</p> <ul> <li>The <code>while</code> loop with priming read seems to work.</li> <li>The <code>if</code> statement testing for the range 1 inclusive to 10 inclusive seems to work.</li> <li>The <code>if</code> statement displaying the correct error message upon an error seems to work.</li> <li>The <code>if</code> statement displaying the correct user prompt message upon an error seems to work.</li> <li>The <code>while</code> loop quits when the user enters a <code>0</code> seem to work.</li> <li>The exit message <code>Goodbye!</code> seems to work when the program exits.</li> <li>The formatting of the output of messages to the user appears correct.</li> </ul> <p>The Issues</p> <ul> <li>The for loop calculating the factorial has some errors.<ul> <li>We need to reset <code>factorial</code> to <code>1</code> after each calculation.</li> </ul> </li> <li>We need to close the <code>Scanner</code> object before we exit the program.</li> </ul>","boost":1},{"location":"programming/factorial/#lets-correct-the-issues","title":"Let's Correct The Issues","text":"Pseudocode - Factorial (Loops)Java - Factorial (Loops) Pseudocode - Factorial (Loops)<pre><code>// Factorial (Loops) - Pesudeocode\n// Date: 2024-06-06\n// Author: Steve Ellermann\n// Note: Corrected version\n\nImport Scanner\n\nMain\n\n    Declare Integer factorial = 1\n    Declare Integer input = 0\n\n    Scanner scan = new Scanner\n\n    Display \"Enter a number between 1 and 10 (Enter 0 to exit): \"\n    input = scan\n\n    While (input != 0)  \n\n        If input &gt;= 1 AND input &lt;= 10\n\n                For Integer ii = factorial to input Step -1\n\n                    factorial = factorial * ii\n\n                End For\n\n            Display factorial\n\n            factorial = 1\n\n            Display \"Enter a number between 1 and 10 (Enter 0 to exit): \"   \n            input = scan  \n\n        Else\n\n            Display \"The number you entered was not between 1 and 10.\"\n            Display \"Re-enter a number between 1 and 10(Enter 0 to exit): \"\n            input = scan\n\n        End If\n\n    End While\n\n    Close Scanner\n\n    Display \"Goodbye!\"\n\nEnd Main\n</code></pre> Java - Factorial (Loops)<pre><code>// Factorial (Loops) - Java- In Person Session\n// Date: 2024-06-06\n// Author: Steve Ellermann\n// Note: Corrected version\n\nimport java.util.Scanner;\n\npublic class FactorialUsingLoops {\n\n    public static void main(String[] args) {\n\n        Scanner scan = new Scanner(System.in);\n\n        int factorial = 1;\n        int input = 0;\n\n        System.out.print(\"Enter a number between 1 and 10 (Enter 0 to exit): \");\n        input = scan.nextInt();\n\n        while (input != 0) {\n\n            if (input &gt;= 1 &amp;&amp; input &lt;= 10) {\n\n                for (int ii = factorial; ii &lt;= input; ii++) { // for loop - fixed - changed code\n                    factorial *= ii;\n                }\n\n                System.out.println(\"\\n\" + input + \"! = \" + factorial);\n\n                factorial = 1; // reset factorial to 1 - fixed - added code\n\n                System.out.print(\"\\nEnter a number between 1 and 10 (Enter 0 to exit): \");\n                input = scan.nextInt();\n            } else {\n                System.out.print(\"\\nThe number you entered was not between 1 and 10.\");\n                System.out.print(\"\\nRe-enter a number between 1 and 10 (Enter 0 to exit): \");\n                input = scan.nextInt();\n            }\n        }\n        scan.close(); // close the scanner object - fixed - added code\n        System.out.println(\"\\nGoodbye!\");\n    }\n\n}\n</code></pre> <p>Let's see what happens when we run corrected the code. Try the corrected FactorialUsingLoops.java Java program in the Online Playground IDE</p> <p>Note</p> <ul> <li>Try the corrected FactorialUsingLoops.java Java program in the Online Playground IDE</li> </ul>","boost":1},{"location":"programming/factorial/#the-results-of-running-the-corrected-program","title":"The results of running the corrected program","text":"Program Output<pre><code>Enter a number between 1 and 10 (Enter 0 to exit): 1\n\n1! = 1\n\nEnter a number between 1 and 10 (Enter 0 to exit): 2\n\n2! = 2\n\nEnter a number between 1 and 10 (Enter 0 to exit): 3\n\n3! = 6\n\nEnter a number between 1 and 10 (Enter 0 to exit): 4\n\n4! = 24\n\nEnter a number between 1 and 10 (Enter 0 to exit): 5\n\n5! = 120\n\nEnter a number between 1 and 10 (Enter 0 to exit): 6\n\n6! = 720\n\nEnter a number between 1 and 10 (Enter 0 to exit): 7\n\n7! = 5040\n\nEnter a number between 1 and 10 (Enter 0 to exit): 8\n\n8! = 40320\n\nEnter a number between 1 and 10 (Enter 0 to exit): 9\n\n9! = 362880\n\nEnter a number between 1 and 10 (Enter 0 to exit): 10\n\n10! = 3628800\n\nEnter a number between 1 and 10 (Enter 0 to exit): 11\n\nThe number you entered was not between 1 and 10.\nRe-enter a number between 1 and 10 (Enter 0 to exit): 0\n\nGoodbye!\n</code></pre> <p>Verify your output with a calculator<sup>3</sup>. After verifying it with a TI-84 CE Calculator, it looks like we have corrected the issues.</p> <ol> <li> <p>CSC110</p> <p>CSC110 is the first required computer programming class for students majoring computer science at CGCC. The programming language used in this class is Java.</p> <p>The CSC110 college catalogue course description reads:</p> CSC110: Introduction to Computer Science (Java) \u2013 3 credits<pre><code>Concepts of problem-solving, structured and object-oriented programming in Java, fundamental \nalgorithms and techniques and computer system concepts. Social and ethical responsibilities. \nIntended for Computer Science and Computer Systems Engineering majors. Prerequisites: A grade \nof C or better in MAT095, or MAT096, or MAT114, or MAT115, or MAT12+, or an appropriate District \nplacement for MAT15+ or higher, or permission of Instructor or Department/Division Chair.\n</code></pre> <p>CSC110: Introduction to Computer Science (Java) \u2013 3 credits</p> <p>Concepts of problem-solving, structured and object-oriented programming in Java, fundamental  algorithms and techniques and computer system concepts. Social and ethical responsibilities.  Intended for Computer Science and Computer Systems Engineering majors. Prerequisites: A grade  of C or better in MAT095, or MAT096, or MAT114, or MAT115, or MAT12+, or an appropriate District  placement for MAT15+ or higher, or permission of Instructor or Department/Division Chair.</p> <ul> <li>Source*</li> </ul> <p>Based on this description, no prior programming experience is expected and you are expected to have a working knowledge of Introductory Algebra/College Algebra Prep (MAT095). \u21a9\u21a9\u21a9</p> </li> <li> <p>MAT095</p> <p>The MAT095 college catalogue course description reads:</p> <p>MAT095: Introductory Algebra/College Algebra Prep - 5 credits</p> <p>Emphasis on meanings related to variable, equality, inequality, equivalence. The use of additive and multiplicative reasoning in solving linear equations and inequalities in one variable. Validation of solution(s) through a reasonable mathematical defense. Transfer and apply knowledge through a process of sense making and reasonableness in mathematical problems and practical application situations. Recognize patterns and organize data to represent situations where output is related to input. Understand the concept of function and be able to represent functions in multiple ways, including tables, algebraic rules, graphs and contextual situations, and make connections among these representations. Read, represent, and interpret linear function relationships numerically, analytically, graphically and verbally and connect the different representations. Model and solve real world problems involving constant rate of change.</p> <ul> <li>Source</li> </ul> <p>\u21a9\u21a9\u21a9</p> </li> <li> <p>Verify your output using a TI-84 Plus CE Calculator</p> <p>To perform <code>5</code> factorial using a TI-84 Plus CE calculator...</p> <ol> <li>Press the <code>5</code> key on the calculator keyboard.</li> <li>Press the <code>math</code> button.</li> <li>Press the right arrow  key on the calculator keyboard 3 times so that <code>PROB</code> is highlighted in the top menu selection of the calculator screen.</li> <li>Press the <code>4</code> key then the <code>enter</code> key or press the down arrow  key 3 time so that <code>4:!</code> is highlighted then press the <code>enter</code> key on the calculator keyboard.</li> <li>Press the <code>enter</code> key on the calculator keyboard again.</li> <li>Answer: <code>5! = 120</code></li> </ol> <p>\u21a9</p> </li> </ol>","boost":1},{"location":"programming/arrays/","title":"Arrays - Index","text":"<p>One-Dimensional Arrays</p> <p>Two-Dimensional Arrays</p> <p>Initializing an Array with Random Unique Values</p> <p>Key Array Skills</p>","boost":1},{"location":"programming/arrays/initializing-array-with-random-unique-values/","title":"Initializing an Array with Random Unique Values","text":"<p>How to initialize an array with unique random values should be already clear to you the program should use the standard input validation model to validate the input BEFORE the random number is added to the array. Study this code:</p> PseudocodeJava <pre><code>Main\n    Declare Global Constant Integer LOW = 10\n    Declare Global Constant Integer HIGH = 99\n\n    Declare Integer [][] theArray = New Integer [5][7]\n    initializeArrayWithUniqueRandomValues(theArray)\n\n    //Other code not shown\n\nEnd Main\n\nModule initializeArrayWithUniqueRandomValues(Integer [][] myArray)\n    Declare Integer row\n    Declare Integer column\n\n    For row = 0 to myArray.length - 1 Step 1\n        For column = 0 to myArray[row].length - 1 Step 1\n            myArray[row][column] = getValidNumber(myArray)\n        End For\n    End For\nEnd Module\n\nFunction Integer getValidNumber (Integer [][] myArray)\n    Declare Integer newValue\n\n    newValue = getRandomNumber(LOW, HIGH) //priming read!\n\n    // loop while the function isInvalid(\u2026) returns true\n    While isInvalid(myArray, newValue)\n        newValue = getRandomNumber(LOW, HIGH)\n    End While\n    Return newValue\nEnd Function\n\nFunction Boolean isInvalid (Integer [][] myArray, Integer valueToCheck)\n    Declare Integer row\n    Declare Integer column\n\n    For row = 0 to myArray.length \u2013 1 Step 1\n        For column = 0 to myArray[row].length \u2013 1 Step 1\n            If valueToCheck == myArray[row][column] Then\n                Return true //it exists so it is invalid\n        End For\n    End For\n    Return false //it was NOT found in the array\nEnd Function\n</code></pre> <pre><code>public class InitializingArrayWithUniqueRandomValues {\n\n    final static int LOW = 10;\n    final static int HIGH = 99;\n\n    public static void main(String[] args) {\n\n        int[][] theArray = new int[5][7];\n\n        initializeArrayWithUniqueRandomValues(theArray);\n\n        // Other code not shown\n    }\n\n    public static void initializeArrayWithUniqueRandomValues(int[][] myArray) {\n        int row;\n        int ccolumn;\n\n        for (row = 0; row &lt;= myArray.length - 1; row++) {\n            for (column = 0; column &lt;= myArray[row].length - 1; column++) {\n                myArray[row][column] = getValidNumber(myArray);\n            }\n        }\n    }\n\n    public static int getValidNumber(int[][] myArray) {\n        int newValue;\n\n        newValue = getRandomNumber(LOW, HIGH); // priming read!\n\n        // loop while the function isInvalid(\u2026) returns true\n        while (isInvalid(myArray, newValue)) {\n            newValue = getRandomNumber(LOW, HIGH);\n        }\n        return newValue;\n    }\n\n    public static int getRandomNumber(int low, int high) {\n        return (int) (Math.random() * ((high + 1) - low)) + low;\n    }\n\n    public static Boolean isInvalid(int[][] myArray, int valueToCheck) {\n        int row;\n        int column;\n\n        for (row = 0; row &lt;= myArray.length - 1; row++) {\n            for (column = 0; column &lt;= myArray[row].length - 1; column++) {\n                if (valueToCheck == myArray[row][column]) {\n                    return true; // it exists so it is invalid\n                }\n            }\n        }\n        return false; // it was NOT found in the array\n    }\n}\n</code></pre>","boost":1},{"location":"programming/arrays/key-array-skills/","title":"Key Array Skills","text":"<p>Being able to process arrays quickly is a key skill all software developers must have. You must know how to do all the following for both one and two-dimensional arrays:</p> <ul> <li>Initialize the array with values<ul> <li>With random numbers</li> <li>With input from the user</li> <li>Use Two-Function Input Validation to prevent duplicate values by searching the array and rejecting duplicate values</li> </ul> </li> <li>Print the array<ul> <li>One-Dim vertically</li> <li>One-Dim horizontally separated with spaces or commas</li> <li>Two-Dim as a rectangle of rows and columns</li> </ul> </li> <li>Sum the values in an array<ul> <li>Add up all the array values</li> </ul> </li> <li>Find the average value in the array<ul> <li>Get the sum of the array and divide by the number of elements</li> </ul> </li> <li>Find the highest value in the array<ul> <li>Set the high value to the first element</li> </ul> </li> <li>Find the lowest value in the array<ul> <li>Set the low value to the first element</li> </ul> </li> <li>Count the number of even and odd numbers in an array<ul> <li>Either create 2 functions or use one and subtract from the count of all</li> </ul> </li> <li>Search the array for a value<ul> <li>Does the value exist?</li> <li>How many times does the value exist?</li> </ul> </li> <li>Return the index value for a searched value<ul> <li>Return the first value found</li> </ul> </li> </ul> <p>The good news is all the above functions are similar and, once you learn to do one, the others will become much easier and you will be able to tackle more complicated and interesting problems.</p>","boost":1},{"location":"programming/arrays/one-dimensional-arrays/","title":"One-Dimensional Arrays","text":"<p>A particularly useful function is to find out if a value is in an array by sequentially searching the array using a for loop and returning true if the value is found. </p> <p>The below code which populates the array with random numbers between a low and high value and uses the searchArray(...) function to search the array also.</p> PseudocodeJava <pre><code>Main\n    Declare Integer myArray [9] // created the array\n    Declare Constant Integer low = 10\n    Declare Constant Integer = 99\n\n    initializeArray(myArray, low, high)\n\n    Declare Boolean valueFound\n    Declare Integer nbrToSearchFor\n\n    nbrToSearchFor = getInteger(\"Number to search for?\") //Input\n\n    valueFound = searchArray(myArray, nbrToSearchFor) // Processing\n\n    displayResult(valueFound) // Output\nEnd Main\n</code></pre> <pre><code>import java.util.Scanner;\n\npublic class OneDimensionalArrayExample {\n\n    static Scanner keyboard = new Scanner(System.in);\n\n    public static void main(String[] args) {\n\n        int[] myArray = new int[9]; // declaring and allocating memory to the array\n        final int LOW = 10;\n        final int HIGH = 99;\n\n        initializeArray(myArray, LOW, HIGH);\n\n        boolean valueFound;\n        int nbrToSearchFor;\n\n        nbrToSearchFor = getInteger(\"Number to search for?\"); // Input\n\n        valueFound = searchArray(myArray, nbrToSearchFor); // Processing\n\n        displayResult(valueFound); // Output\n\n    }\n\n    public static void initializeArray(int[] myArray, int low, int high) {\n        for (int ii = 0; ii &lt; myArray.length; ii++) {\n        myArray[ii] = getRandomNumber(low, high);\n        }\n    }\n\n    public static boolean searchArray(int[] myArray, int nbrToSearchFor) {\n        boolean result = false;\n        for (int ii = 0; ii &lt; myArray.length; ii++) {\n            if (myArray[ii] == nbrToSearchFor) {\n                result = true;\n                break;\n            }\n        }\n        return result;\n    }\n\n    public static void displayResult(boolean valueFound) {\n        if (valueFound) {\n        System.out.println(\"The number was found.\");\n        } else {\n        System.out.println(\"The number was not found.\");\n        }\n    }\n\n    public static int getInteger(String msg) {\n        System.out.println(msg);\n        while (!keyboard.hasNextInt()) {\n        keyboard.nextLine();\n        System.err.println(\"Invalid integer. Try again.\");\n        }\n        int number = keyboard.nextInt();\n        keyboard.nextLine(); // flushes the buffer\n        return number;\n    }\n\n    public static int getRandomNumber(int low, int high) {\n        return (int) (Math.random() * ((high + 1) - low)) + low;\n    }\n}\n</code></pre> <p>In pseudocode, and in languages such as Java, arrays are passed by reference so this program does not have to return the array. When the values of the array elements are changed in the module or function, the original array\u2019s elements are also changed.</p> PseudocodeJava <pre><code>// Initialize the array with random numbers from low to high\nModule initializeArray (Integer [ ] theArray, Integer low, Integer high)\nDeclare Integer x\nFor x = 0 to theArray.length \u2013 1 Step 1\n    theArray [x] = getRandomNumber(low, high)\nEnd For\nEnd Module\n\n// Search the array for a value. Return true if found.\nFunction Boolean searchArray (Integer [ ] theArray, Integer numToSearchFor)\nDeclare Integer x\nFor x = 0 to theArray.length \u2013 1 Step 1\n    If theArray [x] == numToSearchFor\n    Return true //The value was found!\n    End If\nEnd For\nReturn False //The value was not in the array\nEnd Function\n\n// Display the result of the search\nModule displayResult (Boolean valueFound)\nIf valueFound\n    Display \"The value was found\"\nElse\n    Display \"The value was NOT found\"\nEnd If\nEnd Module\n\n// getInteger() method in pesudocode\nMethod Integer getInteger (String msg)\n    Declare Integer newValue\n\n    Display msg\n    Input newValue\n\n    While newValue is not an Integer\n        Display \"Invalid number.\"\n        Display msg\n        Input newValue\n    End While\n\n    Return newValue\nEnd Method\n\n// Get a random number from low to high\nFunction Integer getRandomNumber(Integer low, Integer high)\nDeclare Integer randomNbr\nrandomNbr = (Math.random() * ((high + 1) - low)) + low; \nReturn randomNbr\nEnd Function\n\n// Or write getRandomNumber() this way:\nFunction Integer getRandomNumber(Integer low, Integer high)\nReturn (Math.random() * ((high + 1) - low)) + low;\nEnd Function\n</code></pre> <pre><code>// Initialize the array with random numbers from low to high\npublic static void initializeArray(int[] myArray, int low, int high) {\n        for (int ii = 0; ii &lt; myArray.length; ii++) {\n        myArray[ii] = getRandomNumber(low, high);\n        }\n    }\n\n// Search the array for a value. Return true if found.\npublic static boolean searchArray(int[] myArray, int nbrToSearchFor) {\n    boolean result = false;\n    for (int ii = 0; ii &lt; myArray.length; ii++) {\n        if (myArray[ii] == nbrToSearchFor) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\n// Display the result of the search\npublic static void displayResult(boolean valueFound) {\n    if (valueFound) {\n    System.out.println(\"The number was found.\");\n    } else {\n    System.out.println(\"The number was not found.\");\n    }\n}\n\n// Get an integer\npublic static int getInteger(String msg) {\n    System.out.println(msg);\n    while (!keyboard.hasNextInt()) {\n    keyboard.nextLine();\n    System.err.println(\"Invalid integer. Try again.\");\n    }\n    int number = keyboard.nextInt();\n    keyboard.nextLine(); // flushes the buffer\n    return number;\n}\n\n// Get a random number from low to high\npublic static int getRandomNumber(int low, int high) {\n    return (int) (Math.random() * ((high + 1) - low)) + low;\n}\n</code></pre>","boost":1},{"location":"programming/arrays/two-dimensional-arrays/","title":"Two-Dimensional Arrays","text":"<p>A two-dimensional array is a list of items arranged by rows and columns. Look at a spreadsheet at how the data is arranged: by rows and columns.</p> <p>When looping through two-dimensional arrays, it is useful to name the variables \"r\" and \"c\" for rows and columns.</p> <p>Check out this pseudocode which uses nested loops to display the subscripts of a two-dimensional array:</p> PseudocodeJava <pre><code>Module print2DimensionalSubscripts ()\n    Declare Integer row\n    Declare Integer column\n\n    For row = 0 to 3 Step 1\n        For column = 0 to 4 Step 1\n            Display row, \",\", column, \" \"\n        End For\n        Display \"\\n\" //print a new line\n    End For\nEnd Module\n</code></pre> <pre><code>public static void print2DimensionalSubscripts () {\n    int row;\n    int column;\n\n    for (row = 0; row &lt;= 3; row++) {\n        for (column = 0; column &lt;=4; column++) {\n            System.out.print(row + \",\" + column + \" \");\n        }\n        System.out.println();\n    }\n}\n</code></pre> <p>The subscripts for a two-dimensional array will be printed like this: (row , column)</p> <pre><code>0,0 0,1 0,2 0,3 0,4 \n1,0 1,1 1,2 1,3 1,4 \n2,0 2,1 2,2 2,3 2,4 \n3,0 3,1 3,2 3,3 3,4\n</code></pre> <p>The above values show the row and column subscripts: The first item <code>0,0</code> is <code>row 0</code> and <code>column 0</code>. The last item is <code>3,4</code> which is <code>row 3</code> and <code>column 4</code>. The patterns of these subscripts should be in your mind whenever you are coding a two-dimensional array.</p> <p>Two dimensional arrays are printed as a rectangle or square of values\u2014like a multiplication table.</p> <p>You should recognize this code from printing shapes looping exercises you have seen!</p> <p>Note</p> <p>In for-loops use the (array.length - 1) value to end the outer-loop of rows. This enables you to change the array length without having to change code related to array size.</p> <p>For the inner-loop, the columns, use the length of the row being processed: array[r].length - 1</p> <p>Here is code that initializes a 2-D array with random values, sums the values, prints the array, and prints the sum.</p> PseudocodeJava <pre><code>Main\n    Declare Integer myArray [9][9]\n    Declare Constant Integer low = 10\n    Declare Constant Integer high = 99\n\n    initializeArray(myArray, low, high) //Input\n\n    Declare Integer total\n    total = sumArray(myArray) //Processing\n\n    print2DimensionalArray(myArray) //Output\n\n    Display \"The total of all elements is \", total //Output\nEnd Main\n\nModule initializeArray (Integer [ ][ ] theArray,\n                        Integer low, Integer high)\n    Declare Integer row\n    Declare Integer column\n\n    For row = 0 to theArray.length \u2013 1 Step 1\n        For column = 0 to theArray[r].length \u2013 1 Step 1\n            theArray[row][column] = getRandomNumber(low, high)\n        End For\n    End For\nEnd Module\n\nFunction Boolean sumArray (Integer [ ][ ] theArray)\n    Declare Integer row\n    Declare Integer column\n    Declare Integer total = 0 //initialize the total\n\n    For row = 0 to theArray.length \u2013 1 Step 1\n        For column = 0 to theArray[row].length \u2013 1 Step 1\n            total = total + theArray [row][column]\n        End For\n    End For\n\n    Return total\nEnd Function\n\nModule print2DimensionalArray (Integer [ ][ ] theArray)\n    Declare Integer row\n    Declare Integer column\n\n    For row = 0 to theArray.length \u2013 1 Step 1\n        For column = 0 to theArray[row].length \u2013 1 Step 1\n            //print the below with no new line\n            Display theArray [row][column], \" \"\n        End For\n        Display \"\\n\" //print a new line\n    End For\nEnd Module\n</code></pre> <pre><code>public class OneDimensionalArrayExample {\n\n    public static void main(String[] args) {\n\n        int[][] myArray = new int[9][9];\n        final int LOW = 10;\n        final int HIGH = 99;\n\n        initializeArray(myArray, low, high); //Input\n\n        int total;\n        total = sumArray(myArray); //Processing\n\n        print2DimArray(myArray); //Output\n\n        System.out.println(\"The total of all elements is \" + total); //Output\n    }\n\n    public static void initializeArray(int[ ][ ] theArray, int low, int high) {\n        int row;\n        int column;\n\n        for (row = 0; row &lt;= theArray.length \u2013 1; row++) {\n            for (column = 0; column &lt;= theArray[row].length \u2013 1; column++) {\n                theArray[row][column] = getRandomNumber(low, high)\n            }\n        }\n    }\n\n    public static Boolean sumArray(int[ ][ ] theArray) {\n        int row;\n        int column;\n        int total = 0; //initialize the total\n\n        for (row = 0; row &lt;= theArray.length \u2013 1; row++) {\n            for (column = 0; column &lt;= theArray[row].length \u2013 1; column++) {\n                total = total + theArray [row][column];\n            }\n        }\n        return total;\n    }\n\n    public static void print2DimensionalArray (int[ ][ ] theArray) {\n        int row;\n        int column;\n\n        for (row = 0; row &lt;= theArray.length \u2013 1; row++) {\n            for (column = 0; column &lt;= theArray[r].length \u2013 1; column++) {\n                //print the below with no new line\n                System.out.print(theArray[row][column] + \" \");\n            }\n            System.out.println(); //print a new line\n        }\n    }\n\n    public static int getRandomNumber(int low, int high) {\n        return (int) (Math.random() * ((high + 1) - low)) + low;\n    }\n}\n</code></pre> <p>Note</p> <p>Note that you don\u2019t have to waste a lot of time here. All the code you need to initialize an array and to search a two-dimensional array already exists. You just should study it and understand it well enough to be able to write it for yourself quickly and efficiently.</p>","boost":1},{"location":"programming/conditionals-and-loops/","title":"Conditionals and Loops - Index","text":"<ul> <li>Conditionals</li> <li>Boolean</li> <li>Logical Operators</li> <li>Relational Operators</li> <li>Basic Truth Tables Using Boolean Values Of True and False</li> <li>The getYorN() Method</li> <li>Loops - Three Types of Loops - The Do-While Loop, The While Loop, And The For Loop</li> <li>Counting Pre-Test Loop (While Loop) And Counting Post-Test Loop (Do-While Loop)</li> <li>For-Loop (Pre-Test Loop)</li> <li>While-Loop (Pre-Test Loop)</li> <li>Do-While Loop (Post-Test Loop)</li> <li>Game Loop</li> <li>Input While-Loop (Pre-Test Loop) With A Sentinel Value And A Priming Read</li> <li>Standard Input-Sentinel Loop</li> <li>wantsToContinue Loop</li> <li>Nested Loops</li> <li>While Loop General Format In Pseudocode</li> <li>While-Loop Example</li> <li>Which Loop To Use</li> <li>Loops Terminology</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/boolean/","title":"Boolean","text":"<p>Decision structures use relational operators to make comparisons that result in a Boolean value of True or False.</p> Operator Means == Equal to &gt; Greater than &lt; Less than &gt;= Greater than or Equal to &lt;= Less then or Equal to != Not Equal to <p>The result of a comparison is either true or false. Here are some coding examples and what they mean:</p> Operator Means If a == b Is a is equal to b? If so, the result is true. If a &gt; b If a &gt; b If a &lt; b Is a is less than b? If a &gt;= b Is a is greater than or equal to b? If a &lt;= b Is a is less than or equal to b? If a != b Is a is not equal to b? <p>Note the difference between == and =. The single = is an assignment operator in formulas. The double == is a comparison operator. If-statements use the == operator.</p> <p>Here is the basic structure of a simple if-statement:</p> Pseudocode <pre><code>If (this condition is true)\n    //execute these lines of code\nEnd If\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/conditionals/","title":"Conditionals","text":"","boost":1},{"location":"programming/conditionals-and-loops/conditionals/#boolean-expressions","title":"Boolean Expressions","text":"<p>A conditional statement, sometimes called a selection statement, uses conditions that are boolean expressions to allow us to choose which statement will be executed next.</p> <p>The conditional statements are:</p> <ul> <li><code>if</code> statement</li> <li><code>if-else</code> statement</li> <li><code>switch</code> statement</li> </ul> <p>Conditional statements give us the ability to choose under which conditions a block of code is executed.</p> <p>A boolean expression is an expression, also called a condition, that evaluates to a boolean value of either true or false.</p>","boost":1},{"location":"programming/conditionals-and-loops/counting-pre-test-loop-and-counting-post-test-loop/","title":"Counting Pre-Test Loop (While Loop) And Counting Post-Test Loop (Do-While Loop)","text":"","boost":1},{"location":"programming/conditionals-and-loops/counting-pre-test-loop-and-counting-post-test-loop/#counting-pre-test-loop-while-loop","title":"Counting Pre-Test Loop (While Loop)","text":"<p>Do you need to do something a number of times? Below is a counting pre-test loop:</p> PseudocodeJava <pre><code>// Pre-test Loop with a counter\nDeclare Integer last\nDeclare Integer counter\nlast = 99\ncounter = 0\n\nWhile (counter &lt;= last)     // keeps looping while this is true\n    // code inside loop goes here. May never be executed.\n    counter = counter + 1   // or use counter++\nEnd While\n\nDisplay \"The loop ran \", counter, \" times.\"\n</code></pre> <pre><code>public class PreTestLoopWithACounter {\n\n  public static void main(String[] args) {\n\n    // Pre-test Loop with a counter\n      int last = 99;\n      int counter = 0;\n\n      while(counter &lt;= last) {    // keeps looping while this is true\n          // code inside loop goes here. May never be executed.\n          counter = counter + 1;  // or use counter++\n      }\n\n      System.out.println(\"The loop ran \" + counter + \" times.\");\n\n  }\n\n// Output:\n//\n// The loop ran 100 times.\n\n}\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/counting-pre-test-loop-and-counting-post-test-loop/#counting-post-test-loop-do-while-loop","title":"Counting Post-Test Loop (Do-While Loop)","text":"<p>Here is another way to count using a counting post-test loop:</p> PseudocodeJava <pre><code>//Post-test Loop with a counter\nDeclare Integer last\nDeclare Integer counter\nlast = 99\ncounter = 0\n\nDo\n    //code inside loop goes here. Always executed at least once.\n    counter = counter + 1       //or use counter++\nWhile (counter &lt;= last)     //keeps looping while this is true\n\nDisplay \"The loop ran \", counter, \" times.\"\n</code></pre> <pre><code>public class PostTestLoopWithACounter {\n\n  public static void main(String[] args) {\n\n    // Post-test Loop with a counter\n    int last = 99;\n    int counter = 0;\n\n    do {\n        //code inside loop goes here. Always executed at least once.\n        counter = counter + 1;  //or use counter++\n    } while(counter &lt;= last);   //keeps looping while this is true\n\n    System.out.println(\"The loop ran \" + counter + \" times.\");\n\n  }\n\n// Output:\n//\n// The loop ran 100 times.\n\n}\n</code></pre> <p>Which type of loop should you use? That depends on what the problem requires. As a programmer, you have to figure that kind of thing out. Nobody is going to tell you which loop to use. Through experience and testing, you will know which type of loop to use.</p> <p>Here are two questions that will help you decide:</p> <ul> <li>Will the code in the loop be executed at least once? (that's a post-test loop)</li> <li>Can the code in the loop be skipped entirely? (that's a pre-test loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/do-while-loop-post-test-loop/","title":"Do-While Loop (Post-Test Loop)","text":"<pre><code>// the do-while loop in pseudocode\n// this loop continues while the condition is true\nDo                          // starts a do-while loop (a post-test loop)\n    // your code goes here  // code inside the loop goes here\nWhile (x &lt;= 10)             // ends the do-while loop.\n</code></pre> <p>Note</p> <ul> <li>Will the code in the loop be executed at least once? (that's a post-test loop)</li> <li>Can the code in the loop be skipped entirely? (that's a pre-test loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/for-loop-pre-test-loop/","title":"For-Loop (Pre-Test Loop)","text":"PseudocodeJava <pre><code>// the for-loop in pseudocode\nFor x = 1 to 10   //starts the for-loop (a pre-test loop)\n    // your code goes here\n    // code inside the loop goes here\nEnd For  //ends the for-loop\n</code></pre> <pre><code>// the for-loop in java\nfor(int ii = 1; ii &lt;= 10; ii++) { //starts the for-loop (a pre-test loop)\n    // your code goes here\n    // code inside the loop goes here\n}  // ends the for-loop\n</code></pre> <p>Software developers use for-loops all the time. You MUST be so comfortable with for-loops that you can write them without having to think about how to do it.</p>","boost":1},{"location":"programming/conditionals-and-loops/for-loop-pre-test-loop/#format-of-the-for-loop","title":"Format Of The For-Loop","text":"<ul> <li>In Pseudocode it is <code>For variableName = startingValue to endingValue Step stepValue</code></li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/for-loop-pre-test-loop/#3-parts-of-a-for-loop","title":"3 Parts Of A For-Loop","text":"<ul> <li>Initialize the counter (shown above as <code>variableName</code>) to the starting value</li> <li>A condition to continue looping while true, shown above as <code>startingValue to endingValue</code>, keep looping until the ending value <code>endingValue</code> is reached.</li> <li>The amount to increment, shown above as <code>Step stepValue</code> usually by adding 1 (<code>+ 1</code>) to the step value <code>stepValue</code>, or the amount to decrement, shown above as <code>Step stepValue</code>, usually by subtracting 1 (<code>- 1</code>) to the step value <code>stepValue</code>.</li> </ul> <p>The <code>Step</code> value can be any increment or decrement. The default <code>Step</code> in pseudocode is <code>Step + 1</code> if it is not shown.</p> <p>Here are some examples of how for-loops look in pseudocode and in a software language such as Java:</p> <pre><code>// In Pseudocode\nFor month = 1 to 12 Step 1\n\n// In Java\nfor (int month = 1; month &lt;= 12; month++)\n\n//-------------------------------------------\n\n// In Pseudocode        \nFor day = 1 to DAYS_IN_YEAR\n\n// In Java\nfor (int day = 1; day &lt;= DAYS_IN_YEAR; day++){\n\n}\n\n//-------------------------------------------\n\n// In Pseudocode       \nFor eNbr = 0 to nbrOfEmps\n\n// In Java\nfor (int eNbr = 0; eNbr &lt; nbrOfEmps ; eNbr++){\n\n}\n\n//-------------------------------------------\n\n// In Pseudocode        \nFor orcs = nbrOfOrcs to 1 Step -1\n\n// In Java\nfor (int orcs = nbrOfOrcs ; orcs &gt; 0; orcs--){\n\n}\n</code></pre> <p>Note</p> <ul> <li>Always use integers to loop, never real or decimal numbers.</li> <li>Will the code in the loop be executed at least once? (that's a post-test loop)</li> <li>Can the code in the loop be skipped entirely? (that's a pre-test loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/game-loop/","title":"Game Loop","text":"<p>The below game loop can be modified to play any game that plays any number of rounds. Notice the pattern of the code and how the data moves through each function.</p> PseduocodeJava <pre><code>Declare Global Constant Integer NBR_OF_ROUNDS = 5\nDeclare Global Constant Integer NBR_OF_GAMES = 3\n\nMain\n    Do\n        Declare String username\n        Declare Boolean playerWins\n\n        username = getString(\"What is your name?\")\n\n        playerWins = playMatch(userName)\n\n        displayFinalResults(playerWins, username)\n\n    While (getYesOrNo(\"Play again? y/n\"))\n\nEnd Main\n\nFunction Boolean playMatch (String uName)\n\n    Declare Integer roundNbr\n    Declare Boolean playerWinsRound\n\n    For roundNbr = 1 to NBR_OF_ROUNDS\n        playerWinsRound = playRound(username)\n\n        If playerWinsRound\n            displayPlayerWonThisRound()\n        Else\n            displayPlayerLostThisRound()\n        End If\n\n        If (insert criteria for player to win match)\n            Return True //The player won the match\n        End If\n\n        If (insert criteria for player to lose match)\n            Return False //The player lost the match\n        End If\n    End For\n    Return False //No more rounds to play\nEnd Function\n</code></pre> <pre><code>// Finishing the code is an exercise left up to the reader\nimport java.util.Scanner;\n\npublic class GameLoop {\n\n    // Putting the Scanner object here makes it global so it does\n    // not have to be passed to modules.\n    static Scanner keyboard = new Scanner(System.in);\n\n    final static int NBR_OF_ROUNDS = 5;\n    final static int NBR_OF_GAMES = 3;\n\n    public static void main(String[] args) {\n\n        Scanner keyboard = new Scanner(System.in);\n\n        do {\n            String userName;\n            boolean playerWins;\n\n            userName = getString(\"What is your name?\");\n\n            playerWins = playMatch(userName);\n\n            displayFinalResults(playerWins, userName);\n\n        } while (getYorN(\"Play again? y/n\"));\n\n        keyboard.close();\n    }\n}\n</code></pre> <p>Note</p> <ul> <li>Notice how similar <code>playMatch(...)</code> above and <code>playRound(...)</code> below are. This is how great programmers write code so quickly\u2014they are not reinventing code, they are reusing code structures that have already been written.</li> </ul> PseduocodeJava <pre><code>Function Boolean playRound (String userName)\n\n    Declare Integer gameNbr\n    Declare Boolean playerWinsGame\n\n    For gameNbr = 1 to NBR_OF_GAMES\n        playerWinsGame = playGame(userName)\n\n        If playerWinsGame\n            displayPlayerWonThisGame()\n        Else\n            displayPlayerLostThisGame()\n        End If\n\n        If (insert criteria for player to win round)\n            Return True //The player won the round\n        End If\n\n        If (insert criteria for player to lose round)\n            Return False //The player lost the round\n        End If\n    End For\n    Return False //No more games to play\nEnd Function\n</code></pre> <pre><code>public static boolean playRound(String userName) {\n    int gameNbr;\n    boolean playerWinsGame;\n\n    for (int ii = 1; ii &lt;= NBR_OF_GAMES; ii++) {\n        playerWinsGame = playGame(userName);\n\n        if (playerWinsGame) {\n            displayPlayerWonThisGame();\n        } else {\n            displayPlayerLostThisGame();\n        }\n\n        if (insert criteria for player to win round) {\n            return true; // The player won the round\n        }\n\n        if (insert criteria for player to lose round) {\n            return false; // The player lost the round\n        }\n    }\n    return false; // No more games to play\n}\n</code></pre> <p>The result of a game is displayed in the <code>playRound(...)</code> function which is one level higher than the <code>playGame(...)</code> function. And, similarly, the result of a round is displayed in the <code>playMatch(...)</code> function.</p> <p>At some point, the player has to actually play the game. That point is at the lowest level of the gaming structure: <code>playGame(...)</code> in the above example. If you wanted to add more levels to the game, you would keep adding levels of code very similar to the above between <code>playMatch(...)</code> and <code>playGame(...)</code>.</p> <p>The details of the above example will change based on the design of the game, but the gaming structure will stay the same. For example, your game may not display anything when the player wins or loses a game or a round.</p> <p>Note</p> <ul> <li>This is how to quickly create complicated, layered, programs using coding structures that have already been developed and used by thousands of programmers. Don\u2019t try to reinvent the wheel!</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/input-while-loop-pre-test-loop-with-a-sentinel-value-and-a-priming-read/","title":"Input While-Loop (Pre-Test Loop) With A Sentinel Value And A Priming Read","text":"<p>A common task for a program is to ask the user to enter a series of numbers or strings such as city names.</p> <p>The program below uses a priming read and then a pre-test loop to add numbers together. A priming read is a statement that gets input before the loop begins.</p> <p>The program reports the sum of the numbers after the sentinel value is entered. Understanding this loop and being able to reproduce it will save you lots of time. This is a coding tool that MUST be in your toolbox.</p> PseudocodeJava <pre><code>// Pre-test Loop with input and a sentinel value\n\nDeclare Real newValue, sum\nDeclare Constant Integer SENTINEL = 0\n\nsum = 0                                 // Initialize the sum to 0\n\n// The below line is the priming read before the loop\n// 0 is the sentinel value that will exit the loop\n\nnewValue = getReal (\"Enter a number. \", SENTINEL, \" to exit.\")\n\nWhile (newValue != SENTINEL)            //Continue to loop while true\n    sum = sum + newValue\n\n    //other code inside the loop goes here\n\n    newValue = getReal (\"Enter a number. \", SENTINEL, \" to exit.\")\n\nEnd While\n\nDisplay \"The sum of the numbers is \", sum\n</code></pre> <pre><code>import java.util.Scanner;\n\npublic class InputWhileLoopPreTestLoopWithASentinelValueAndAPrimingRead {\n\n  public static void main(String[] args) {\n\n    // Pre-test Loop with input and a sentinel value\n\n    Scanner keyboard = new Scanner(System.in);\n\n      double newValue;\n      double sum;\n      final int SENTINEL = 0;\n\n      sum = 0;  // Initialize the sum to 0\n\n      // The below line is the priming read before the loop\n      // 0 is the sentinel value that will exit the loop\n\n      System.out.println(\"Enter a number. \" + SENTINEL + \" to exit.\");\n      newValue = keyboard.nextDouble();\n\n      while(newValue != SENTINEL) {  //Continue to loop while true\n          sum = sum + newValue;\n\n          //other code inside the loop goes here\n\n          System.out.println(\"Enter a number. \" + SENTINEL + \" to exit.\");\n        newValue = keyboard.nextDouble();\n      }\n\n      System.out.println(\"The sum of the numbers is \" + sum);\n\n      // close the scanner object\n      keyboard.close();\n\n  }\n\n}\n</code></pre> <p>A key design point is the <code>SENTINEL</code> is a constant and you should write the code so that the <code>SENTINEL</code> value can be changed to anything and the program will still work. This is a constraint that will make you write better code.</p> <p>Notice the above loop uses a priming read before entering the loop. This enables the user to enter a sentinel value to end the loop before it even begins. Ending a loop before starting it should be a test case in your test plan.</p> <p>Why would a user do that? As programmers, we must cover all the possibilities even if they are remote. In this case, perhaps the user realized they were in the wrong program and wanted to exit. Or maybe it was just time for lunch.</p>","boost":1},{"location":"programming/conditionals-and-loops/logic-basic-truth-tables-using-boolean-values-of-true-or-false/","title":"Basic Truth Tables Using Boolean Values Of True and False","text":"","boost":1},{"location":"programming/conditionals-and-loops/logic-basic-truth-tables-using-boolean-values-of-true-or-false/#and","title":"AND","text":"A B A AND B T T T T F F F F F","boost":1},{"location":"programming/conditionals-and-loops/logic-basic-truth-tables-using-boolean-values-of-true-or-false/#or","title":"OR","text":"A B A OR B T T T F T T F F F","boost":1},{"location":"programming/conditionals-and-loops/logic-getyorn/","title":"The getYorN() Method","text":"","boost":1},{"location":"programming/conditionals-and-loops/logic-getyorn/#the-getyorn-method-in-pseudocode","title":"The getYorN() Method In Pseudocode","text":"<p>The below method asks the user to enter <code>Y</code> or <code>N</code> using the generalized <code>getString()</code> method</p> PseudocodeJava <pre><code>Method Boolean getYesOrNo (String msg)\n    Declare String newValue\n\n    Display msg\n    newValue = getString(msg)\n\n    While uppercase(newValue) is not \"Y\"\n    AND uppercase(newValue) is not \"N\"\n\n        Display \"Invalid entry. Should be Y or N\"\n        newValue = getString(msg)\n\n    End While\n\n    If newValue is \"Y\" Then\n        Return true\n    End If\n    Return false // newVaLUE IS \"N\"\nEnd Method\n</code></pre> <pre><code>/** Gets a Yes or No answer from the keyboard. Calls getString\n * to rejects null input and spaces.\n * @param msg is the text that will be displayed the user.\n * @return Returns a boolean value. True = yes; False = no. \n*/ \n\npublic static boolean getYorN(String msg) {\nString answer = getString(msg);\n\nwhile (answer.compareToIgnoreCase(\"y\")   != 0 \n    &amp;&amp; answer.compareToIgnoreCase(\"yes\") != 0 \n    &amp;&amp; answer.compareToIgnoreCase(\"n\")   != 0 \n    &amp;&amp; answer.compareToIgnoreCase(\"no\")  != 0) {\n\n    if (answer.replace(\" \", \"\").equals(\"\")) {\n        System.err.println(\"Error: Missing y/n input.\");\n    } else {\n        if (answer.compareToIgnoreCase(\"y\")   != 0 \n        &amp;&amp; answer.compareToIgnoreCase(\"yes\") != 0 \n        &amp;&amp; answer.compareToIgnoreCase(\"n\")   != 0 \n        &amp;&amp; answer.compareToIgnoreCase(\"no\")  != 0) {\n            System.err.println(\"Error: Unexpected input.\");\n            }\n        }\n        answer = getString(msg);\n    } \n\n    if  (answer.compareToIgnoreCase(\"y\")   == 0  \n        || answer.compareToIgnoreCase(\"yes\") == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n</code></pre> <p>Notice that <code>getYesOrNo()</code> uses <code>getString()</code>. Why is that? Because <code>getString()</code> is a generalized input method that can return any kind of string such as <code>Y</code> or <code>N</code>.</p>","boost":1},{"location":"programming/conditionals-and-loops/logic-getyorn/#the-getstring-method-in-used-in-the-getyorn-method","title":"The getString() Method in used in The getYorN() Method","text":"PseudocodeJava <pre><code>Method String getString (String msg)\n    Declare String newValue\n\n    Display msg\n    Input newValue\n\n    While newValue is null or spaces\n        Display \"Error: Missing input.\"\n        Display msg\n        Input newValue\n    End While\n\n    Return newValue\nEnd Method\n</code></pre> <pre><code>/** Gets a String from the keyboard. Rejects null entry or any \n * number of spaces.\n * @param msg is the text that will be displayed the user to\n * ask them to enter a value.\n * @return Returns a String from the keyboard. \n*/ \n\npublic static String getString(String msg) {\n    String answer = \"\";\n    System.out.println(msg);\n    try {\n        answer = keyboard.nextLine(); \n    } catch (Exception e) {\n        System.err.println(\"Error reading input from user. \" \n            + Ending program.\");\n        System.exit(-1);\n    } \n\n    while (answer.replace(\" \", \"\").equals(\"\")) {\n        System.err.println(\"Error: Missing input.\");\n        try {\n            System.out.println(msg);\n            answer = keyboard.nextLine(); \n        } catch (Exception e) {\n            System.err.println(\"Error reading input from user. \"\n                + Ending program.\");\n            System.exit(-1);\n        } \n    }\n    return answer;            \n}\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/logic-logical-operators/","title":"Logical Operators","text":"","boost":1},{"location":"programming/conditionals-and-loops/logic-logical-operators/#logical-operators-you-must-know","title":"Logical operators you must know","text":"<ul> <li>AND \u2013 Both conditions must be true</li> <li>OR \u2013 Either condition must be true</li> <li>NOT \u2013 Reverses the truth of an expression</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/logic-logical-operators/#basic-truth-tables-using-boolean-values-of-true-and-false","title":"Basic Truth Tables Using Boolean Values Of True and False","text":"","boost":1},{"location":"programming/conditionals-and-loops/logic-logical-operators/#and","title":"AND","text":"A B A AND B T T T T F F F F F","boost":1},{"location":"programming/conditionals-and-loops/logic-logical-operators/#or","title":"OR","text":"A B A OR B T T T F T T F F F","boost":1},{"location":"programming/conditionals-and-loops/logic-relational-operators-decision-structures-and-boolean-logic/","title":"Relational Operators","text":"<p>Decision structures use relational operators to make comparisons that result in a Boolean value of <code>True</code> or <code>False</code>.</p> Operator Means <code>==</code> Equal to <code>&gt;</code> Greater than <code>&lt;</code> Less than <code>&gt;=</code> Greater than or Equal to <code>&lt;=</code> Less then or Equal to <code>!=</code> Not Equal to <p>The result of a comparison is either <code>true</code> or <code>false</code>. Here are some coding examples and what they mean:</p> Operator Means If <code>a == b</code> Is a is equal to b? If so, the result is true. If <code>a &gt; b</code> If a &gt; b If <code>a &lt; b</code> Is a is less than b? If <code>a &gt;= b</code> Is a is greater than or equal to b? If <code>a &lt;= b</code> Is a is less than or equal to b? If <code>a != b</code> Is a is not equal to b? <p>Note</p> <ul> <li>Note the difference between <code>==</code> and <code>=</code>. The single <code>=</code> is an assignment operator in formulas. The double <code>==</code> is a comparison operator. If-statements use the <code>==</code> operator.</li> </ul> <p>Here is the basic structure of a simple if-statement:</p> <pre><code>If (this condition is true)\n  //execute these lines of code\nEnd If\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/loops/","title":"Loops - Three Types of Loops - The Do-While Loop, The While Loop, And The For Loop","text":"","boost":1},{"location":"programming/conditionals-and-loops/loops/#three-types-of-loops-the-do-while-loop-the-while-loop-and-the-for-loop","title":"Three Types of Loops - The Do-While Loop, The While Loop, And The For Loop","text":"<p>The three types of loops:</p> <ul> <li>Do-While Loop (Post-Test Loop)</li> <li>While-loop (Pre-Test Loop)</li> <li>For-loop (Pre-Test Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/loops/#do-while-loop-post-test-loop","title":"Do-While Loop (Post-Test Loop)","text":"PseudocodeJava Do-While Loop (Post-Test Loop) in Pseudocode<pre><code>// The Do-While Loop (Post-Test Loop) in pseudocode\n// this loop continues while the condition is true\n    Do                          // starts a do-while loop (a post-test loop)\n        // your code goes here  // code inside the loop goes here\n    While (x &lt;= 10)             // ends the do-while loop.\n</code></pre> Do-While Loop (Post-Test Loop) in Java<pre><code>// The Do-While Loop (Post-Test Loop) in Java\n// this loop continues while the condition is true\npublic class DoWhileLoop {\n\n    public static void main(String[] args) {\n\n        int x = 0;\n\n        do {                        // starts a do-while loop (a post-test loop)\n            // your code goes here    // code inside the loop goes here\n            System.out.println(x);\n            x++;\n        } while (x &lt;= 10);          // ends the do-while loop.\n    }\n}\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/loops/#while-loop-pre-test-loop","title":"While-loop (Pre-Test Loop)","text":"PseudocodeJava While-Loop (Pre-Test Loop) in Pseudocode<pre><code>// While-Loop (Pre-Test Loop) in Pseudocode\n// this loop continues while the condition is true\nWhile (x &lt;= 10)                 // starts the while-loop (a pre-test loop)\n    // your code goes here      // code inside the while-loop goes here\nEnd While                       // ends the while-loop\n</code></pre> While-Loop (Pre-Test Loop) in Java<pre><code>// The While Loop (Pre-Test Loop) in Java\n// this loop continues while the condition is true\npublic class WhileLoop {\n\n    public static void main(String[] args) {\n\n        int x = 0;\n\n        while(x &lt;= 10) {                // starts the while-loop (a pre-test loop)\n            // your code goes here      // code inside the while-loop goes here\n            System.out.println(x);  \n            x++;                    \n        }                               // ends the while-loop\n\n    }\n\n}\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/loops/#for-loop-pre-test-loop","title":"For-loop (Pre-Test Loop)","text":"PseudocodeJava The For-loop (Pre-Test Loop) in Pseudocode<pre><code>// The For-loop (Pre-Test Loop) in Pseudocode\n// continues while the condition is true\nFor x = 1 to 10 Step 1          // starts the for-loop (a pre-test loop), increments by 1\n    // your code goes here      // code inside the for-loop goes here\nEnd For                         // ends the for-loop\n</code></pre> The For-loop (Pre-Test Loop) in Java<pre><code>// The For-loop (Pre-Test Loop) in Java\n// continues while the condition is true\npublic class ForLoop {\n\n    public static void main(String[] args) {\n\n        for(int ii = 1; ii &lt;=10; ii++) {    // starts the for-loop (a pre-test loop), increments by 1\n            // your code goes here          // code inside the for-loop goes here\n            System.out.print(ii + \" \");\n        }                                   // ends the for-loop\n    }\n}\n</code></pre> <p>Note</p> <ul> <li>Will the code in the loop be executed at least once? (that's a post-test loop)</li> <li>Can the code in the loop be skipped entirely? (that's a pre-test loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/nested-loops/","title":"Nested Loops","text":"<p>Loops of all kinds can be nested inside each other. A very common nested loop is the nested for-loop.</p> <p>How many times does this code display \"Hello\"?</p> Pseduocode <pre><code>Declare Integer month, year\nFor year = 2019 to 2028\n    For month = 1 to 12\n        Display \"Hello\"\n    End For\nEnd For\n</code></pre> <p>To determine how many times nested loops will execute the code, multiply the number of times each for-loop is executed. The above code will loop through the inner-most code 12 * 10 which is 120 times.</p> <p>The below code will simulate a clock by moving the various hands.</p> Pseduocode <pre><code>Declare Integer seconds, minutes, hours\nFor hours = 0 to 23 Step 1\n    For minutes = 0 to 59 Step 1\n        For seconds = 0 to 59 Step 1\n        // move second hand\n        End For\n        // move minute hand\n    End For\n    // move hour hand\nEnd For\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/standard-input-sentinel-loop/","title":"Standard Input-Sentinel Loop","text":"Pseduocode <pre><code>// standard input-sentinel loop in pseudocode\nMain\n\n    // other code\n\n    newValue = getReal (\"Enter a number. \", SENTINEL_VALUE, \" to exit.\")\n\n    While (newValue != SENTINEL_VALUE)  \n\n        // other code inside the loop goes here\n\n        newValue = getReal (\"Enter a number. \", SENTINEL_VALUE, \" to exit.\")    \n\n    End While\n\n    //other code\n\nEnd Main\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/","title":"Terminology - Loops","text":"","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#do-while-loop","title":"do-while-loop","text":"<ul> <li>A Do-while-loop is a post-test loop. Do these-lines-of-code while this-is-true. Do-While Loop (Post-Test Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#while-loop","title":"while-loop","text":"<ul> <li>A While-loop is a pre-test loop. The contents of the loop may not be executed if the condition is initially false. While-Loop (Pre-Test Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#for-loop","title":"for-loop","text":"<ul> <li>A For-loop is a pre-test loop consisting of 3 parts: initialize the counter; test the counter; increment the counter. For-Loop (Pre-Test Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#nested-loops","title":"nested loops","text":"<ul> <li>Nested loops are loops that can be nested inside each other. Commonly used with two-dimensional arrays. Nested Loops</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#pre-test-loop","title":"pre-test loop","text":"<ul> <li>A loop where the test occurs before the code to be executed. The code inside the loop may not be executed at all. While-Loop (Pre-Test Loop) For-Loop (Pre-Test Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#post-test-loop","title":"post-test loop","text":"<ul> <li>A post-test loop is a loop where the code inside the loop is always executed at least once because the test occurs after the code in the loop is excuted. Do-While Loop (Post-Test Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#sentinel","title":"sentinel","text":"<ul> <li>A sentinel is an inputted value that tells the program to stop and do something else.</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#infinite-loop","title":"infinite loop","text":"<ul> <li>An infinite loop is a loop that never ends. This is not good.</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#initialization","title":"initialization","text":"<ul> <li>Initialization is setting a variable or the elements of an array to a value.</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#counter","title":"counter","text":"<ul> <li>A counter is a variable used to count the number of occurrences of an item. Example: <code>counter++</code></li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#increment","title":"increment","text":"<ul> <li>Increment is to increase the value of a variable. Example: <code>x++</code></li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#decrement","title":"decrement","text":"<ul> <li>Decrement is to reduce. Example of x minus one: <code>x--</code></li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#wantstocontinue-loop","title":"wantsToContinue Loop","text":"<ul> <li>A wantsToContinue loop is a standard loop that asks the user if they want to continue. Commonly wants a <code>Y</code> or <code>N</code> response. Also called a do-it-again-loop. wantsToContinue Loop</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#game-loop","title":"game loop","text":"<ul> <li>A game loop is a loop frequently used in games. Game Loop</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/terminology-loops/#counting-loop","title":"counting loop","text":"<ul> <li>A counting loop is a loop used to count the number of items either being entered or already in an array. Counting Pre-Test Loop (While Loop) And Counting Post-Test Loop (Do-While Loop)</li> </ul>","boost":1},{"location":"programming/conditionals-and-loops/wantstocontinue-loop/","title":"wantsToContinue Loop","text":"<p>A common programming task is to ask the user if they want to play again, or if they want to enter another value, or if they want to do it all again. </p> <p>Note</p> <ul> <li>This loop uses the <code>getYesOrNo(...)</code> input routine.</li> </ul> Pseudocode <pre><code>Do                                                        // starts a do-while-loop (a post-test loop)\n    // your code goes here                                // code inside the do-while-loop goes here\nWhile (getYesOrNo(\"Do you want to play again? (y/n)\"))    // ends the do-while-loop using the getYesorNo() input routine.\n</code></pre> <p>Of course, sometimes using a <code>wantsToContinue()</code> loop is not appropriate and you should use a loop with a <code>sentinel</code> value instead. Think very hard about using a <code>wantsToContinue()</code> loop and consider the user\u2019s experience. Consider the <code>wantsToContinue()</code> loop as a process that stops the program and restarts it again.</p>","boost":1},{"location":"programming/conditionals-and-loops/which-loop-to-use/","title":"Which Loop To Use","text":"<p>There is usually a best loop to use to solve the problem.</p> Requirement for the program Try using this type of loop: Looping through a defined number of times for-loop Reading data or getting input while-loop with a priming read At the end, ask if they want to try again do-while loop (wantsToContinue) Don\u2019t know how many times to loop do-while loop or while-loop with a sentinel","boost":1},{"location":"programming/conditionals-and-loops/while-loop-example/","title":"While-Loop Example","text":"<p>This program shows how we might use a while-loop to write a commission calculating program that was described elsewhere.</p> Pseduocode <pre><code>// Pseudocode\n// Repetition Structures\n// Condition-Controlled Loops: While, Do-While, and Do-Until\n// Program shows how we might use a While loop to write the\n// commission calculating program that was described\n// elsewhere.\n\n// Variable declarations\nDeclare Real sales, commission\nDeclare String keepGoing = \"y\"\n\n// Constant for the commission rate\nConstant Real COMMISSION_RATE = 0.10\n\nWhile keepGoing == \"y\"\n    // Get the amount of sales.\n    Display \"Enter the amount of sales.\"\n    Input sales\n\n    // Calculate the commission.\n    Set commission = sales * COMMISSION_RATE\n\n    // Display the commission\n    Display \"The commission is $\", commission\n\n    Display \"Do you want to calculate another\"\n    Display \"commission? (Enter y for yes.)\"\n    Input keepGoing\nEnd While\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/while-loop-example/#program-output-with-input-shown-in-bold","title":"Program Output (with Input Shown in Bold)","text":"<pre><code>``` Java linenums=\"1\"\nEnter the amount of sales.\n\n10000.00 [Enter]\n\nThe commission is $1000\n\nDo you want to calculate another\ncommission? (Enter y for yes.)\n\ny [Enter]\n\nEnter the amount of sales.\n5000.00 [Enter]\n\nThe commission is $500\n\nDo you want to calculate another\ncommission? (Enter y for yes.)\n\ny [Enter]\n\nEnter the amount of sales.\n\n12000.00 [Enter]\n\nThe commission is $1200\n\nDo you want to calculate another\ncommission? (Enter y for yes.)\n\nn [Enter]\n```\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/while-loop-general-format-in-pseudocode/","title":"While Loop General Format In Pseudocode","text":"Pseudocode <pre><code>// This is the general format of the While statement in pseudocode\n\nWhile condition\n    statement\n    statement\n    etc...\nEnd While\n</code></pre>","boost":1},{"location":"programming/conditionals-and-loops/while-loop-pre-test-loop/","title":"While-Loop (Pre-Test Loop)","text":"PseudocodeJava <pre><code>// the while-loop (pre-test loop) in pseudocode\n// this loop continues while the condition is true\nWhile (x &lt;= 10)             //starts the do-while loop (a pre-test loop)\n\n    // your code goes here  //code inside the loop goes here\n\nEnd While                   //ends the while-loop\n</code></pre> <pre><code>// the while-loop (pre-test loop) in java\n// this loop continues while the condition is true\nwhile (x &lt;= 10) {           //starts the do-while loop (a pre-test loop)\n    // your code goes here  //code inside the loop goes here\n}                           //ends the while-loop\n</code></pre> <p>Note</p> <ul> <li>Will the code in the loop be executed at least once? (that's a post-test loop)</li> <li>Can the code in the loop be skipped entirely? (that's a pre-test loop)</li> </ul>","boost":1},{"location":"programming/inputvalidation/","title":"Input Validation - Index","text":"<ul> <li> <p>getValidNumber() Template Input Validation</p> </li> <li> <p>isInvalid() Template Input Validation</p> </li> <li> <p>One-Function Input Validation Model</p> </li> <li> <p>Two-function Input Validation Model</p> </li> <li> <p>Validating String Data</p> </li> <li> <p>Examples of Common String Library Functions</p> </li> <li> <p>Common Input Values To Test For</p> </li> </ul>","boost":1},{"location":"programming/inputvalidation/common-input-values-to-test-for/","title":"Common Input Values To Test For","text":"<p>Data input is a common process that most programs have to do. As a programmer, it\u2019s your responsibility to test your code and make sure it works as required.</p>","boost":1},{"location":"programming/inputvalidation/common-input-values-to-test-for/#for-string-data-test-for","title":"For String data, test for","text":"<ul> <li><code>null</code> (no entry at all)</li> <li><code>space</code> or <code>spaces</code></li> <li>data that does not meet the program's expectations. For example, instead of <code>Y</code> or <code>N</code>, the user enters <code>abc</code></li> </ul>","boost":1},{"location":"programming/inputvalidation/common-input-values-to-test-for/#for-numeric-data-test-for","title":"For numeric data, test for","text":"<ul> <li><code>null</code> (no entry at all)</li> <li><code>space</code> or <code>spaces</code></li> <li>non-numeric data such as <code>abc</code></li> <li>negative numbers</li> <li>zero</li> <li>negative zero</li> <li>a decimal number such as <code>3.1415</code></li> <li>a number that is out of range. For example, entering 15 for the number of the month</li> <li>a number that is not reasonable for the data. For example, entering an age of 3541, or an age of -3</li> </ul>","boost":1},{"location":"programming/inputvalidation/common-input-values-to-test-for/#for-yes-or-no-data-test-for","title":"For Yes or No data, test for","text":"<ul> <li><code>null</code> (no entry at all)</li> <li><code>space</code> or <code>spaces</code></li> <li>data that does not meet the program's expectations. For example, instead of <code>Y</code> or <code>N</code>, the user enters <code>abc</code></li> </ul> <p>Yes, you must test ALL these conditions for EVERY input! Your users certainly will. Don\u2019t assume your code has been written perfectly. ALWAYS test your code to verify you are the genius you think you are.</p> <p>It\u2019s been estimated that 80% of every program is input validation and data scrubbing. If you use the standard input validation routines, you will write better code and finish faster.</p>","boost":1},{"location":"programming/inputvalidation/examples-of-common-string-library-functions/","title":"Examples of Common String Library Functions","text":"Java <pre><code>    theLength = myString.length()\n    If firstString.equalsToIgnoreCase(secondString)\n    If firstString.compareTo(secondString)\n    If firstString.compareToIgnoreCase(secondString)\n    If firstString.contains(\"xxx\")\n    If firstString.startsWith(\"Jan\")\n    myString = myString.trim()\n</code></pre>","boost":1},{"location":"programming/inputvalidation/getvalidnumber-template-input-validation/","title":"getValidNumber() Function Template Input Validation","text":"<pre><code>// Pseudocode\n// Change this function to meet the program\u2019s requirements\nFunction Integer getValidNumber (String msg, Integer low, Integer high, Integer sentinel)\n    Declare Integer newValue\n\n    newValue = getInteger(msg)\n\n    //continue looping while the function isInvalid(...) returns true\n    While isInvalid(newValue, low, high, sentinel)\n        Display \"Invalid Value\"\n        newValue = getInteger(msg)\n    End While\n\n    Return newValue //returns a good value\n\nEnd Function\n</code></pre>","boost":1},{"location":"programming/inputvalidation/isinvalid-template-input-validation/","title":"isInvalid() Function Template Input Validation","text":"<pre><code>// Pseudocode\n// Change this function to meet the program\u2019s requirements\n\nFunction Boolean isInvalid (Integer newValue, Integer low,\n                            Integer high, Integer sentinel)\n    If newValue == sentinel\n        Return false // returning false since this is valid\n    End If\n\n    If newValue &lt; low\n      Return true // returning true since invalid\n    End If\n\n    If newValue &gt; high\n        Return true // returning true to keep looping\n    End If\n\n    If newValue MOD 2 = 0 //add as many conditions\n                          // as needed for the problem\n        Return true //in this case \u2018even\u2019 numbers are invalid\n    End If\n\n    Return false //the value of newValue is OK!\n\nEnd Function\n</code></pre>","boost":1},{"location":"programming/inputvalidation/one-function-input-validation-model/","title":"One-Function Input Validation Model","text":"<p>The below code uses the standard input while-loop with a priming read and a sentinel. Use the One-Function Input Validation model when the input validation condition is simple and does not use more than one AND or OR statement. The below code determines the lowest and highest number entered by the user.</p>","boost":1},{"location":"programming/inputvalidation/one-function-input-validation-model/#main","title":"Main()","text":"<pre><code>// Pseudocode\nDeclare Global Constant Integer SENTINEL = -1\nDeclare Global Constant Integer LOW_VALUE = 0\n\nMain\n    Declare Integer newValue, lowestValue, highestValue\n    String message = \"Enter number &gt; \", LOW_VALUE, \". \", \"Enter \", SENTINEL, \" to quit\"\n\n    newValue = getValidNumber (message) //priming read\n\n    If newValue != SENTINEL //continues while true\n        highestValue = newValue\n        lowestValue = newValue\n\n        While (newValue != SENTINEL)\n\n            If newValue &gt; highestValue\n                highestValue = newValue\n            End If\n\n            If newValue &lt; lowestValue\n                    lowestValue = newValue\n            End If\n\n            newValue = getValidNumber(message)\n\n        End While\n\n        Display \"Highest value= \", highestValue\n        Display \"Lowest value = \", lowestValue\n    Else\n        Display \"No numbers entered.\"\n    End If\n\nEnd Main\n</code></pre>","boost":1},{"location":"programming/inputvalidation/one-function-input-validation-model/#getvalidnumber-the-one-function-input-validation-routine","title":"getValidNumber() - The One-Function Input Validation Routine","text":"<pre><code>// Pseudocode\n// The One-Function Input Validation routine!\n\nFunction Integer getValidNumber (String msg)\n    Declare Integer newValue\n    newValue = getInteger(msg) //the priming read\n\n    //loop while the input value is invalid\n    While newValue &lt; LOW_VALUE AND newValue != SENTINEL\n        Display \"Invalid Value\"\n        newValue = getInteger(msg)\n    End While\n    Return newValue //returns a good value\nEnd Function\n</code></pre> <p>The while loop in <code>getValidNumber(...)</code> continues while the condition is true - in this case, it is true because the data is invalid. The condition should continue when invalid values are found, not valid values.</p>","boost":1},{"location":"programming/inputvalidation/two-function-input-validation-model/","title":"Two-function Input Validation Model","text":"<p>When the validation condition becomes complicated, use the below two-function input validation model. The function shown below, the <code>getValidNumber(...)</code> model, is good for validating almost anything. Study it and be able to easily reproduce it when you need to validate input\u2014and input could mean data from a user\u2019s keyboard, a file being read, a random number function, or even the movement of holographic lightsabers.</p> <p>The below code counts the number of odd numbers between <code>10</code> and <code>100</code> entered by the user and displays the count to the user at the end of the program.</p>","boost":1},{"location":"programming/inputvalidation/two-function-input-validation-model/#main","title":"Main()","text":"<pre><code>// Pseudocode\nMain\n    Declare Constant Integer LOW = 10\n    Declare Constant Integer HIGH = 100\n    Declare Constant Integer SENTINEL = -99\n\n    Declare Integer newValue\n    Declare Integer counter = 0\n\n    String message = \"Enter an odd number from \", LOW, \"-\", HIGH, \", \", SENTINEL, \" to quit\"\n\n    //priming read\n    newValue = getValidNumber(message, LOW, HIGH, SENTINEL)\n\n    While (newValue != SENTINEL) //continues while true\n\n        counter++\n\n        newValue = getValidNumber(message, LOW, HIGH, SENTINEL)\n\n    End While\n\n    Display counter + \" numbers were entered.\"\n\nEnd Main\n</code></pre> <p>Don\u2019t add any other code such as if-statements or while-loops inside the `getValidNumber(...) function. Use this coding structure as shown.</p>","boost":1},{"location":"programming/inputvalidation/two-function-input-validation-model/#getvalidnumber","title":"getValidNumber()","text":"<pre><code>// Pseudocode\nFunction Integer getValidNumber (String msg,\n                                  Integer low,\n                                  Integer high,\n                                  Integer sentinel)\n    Declare Integer newValue\n\n    newValue = getInteger(msg)\n\n    //continue looping while the function isInvalid(\u2026) returns true\n    While isInvalid(newValue, low, high, sentinel)\n        Display \"Invalid Value\"\n        newValue = getInteger(msg)\n    End While\n\n    Return newValue //returns a good value\n\nEnd Function\n</code></pre>","boost":1},{"location":"programming/inputvalidation/two-function-input-validation-model/#isinvalid","title":"isInvalid()","text":"<pre><code>// Pseudocode\n//Change this function to meet the program\u2019s requirements\nFunction Boolean isInvalid (Integer newValue, Integer low,\n                            Integer high, Integer sentinel)\n    If newValue == sentinel\n        Return false // returning false since this is valid\n    End If\n\n    If newValue &lt; low\n      Return true // returning true since invalid\n    End If\n\n    If newValue &gt; high\n        Return true // returning true to keep looping\n    End If\n\n    If newValue MOD 2 = 0 //add as many conditions\n                          // as needed for the problem\n        Return true //in this case \u2018even\u2019 numbers are invalid\n    End If\n\n    Return false //the value of newValue is OK!\n\nEnd Function\n</code></pre> <p>Those are the two input validation models to know. You should be able to create similar functions for validating string input by following the sample code above.</p> <p>Note</p> <p>The above code confuses some people because the value True is being returned when the data is invalid. (It is True that the data is invalid). Be sure you understand this code so you can reproduce it easily!</p>","boost":1},{"location":"programming/inputvalidation/validating-string-data/","title":"Validating String Data","text":"<p>To validate String data, you may have to make the inputted value lowercase (or uppercase) and then compare. In some languages, you can use an ignorecase function in the comparison instead.</p> <p>With a little bit of thought and research into String library functions, you would come up with a better method with fewer lines of code such as this:</p> <pre><code>// Pseudocode\nupperCaseDataEntry = toUpperCase(dataEntry) //convert to upper case\nIf upperCaseDataEntry == \"Y\"\n    OR upperCaseDataEntry == \"YE\"\n    OR upperCaseDataEntry == \"YES\"\n    OR upperCaseDataEntry == \"N\"\n    OR upperCaseDataEntry == \"NO\"\nThen\n    //etc.\n</code></pre> <p>Note</p> <p>In some languages, like Java, you can\u2019t use <code>==</code> to compare Strings. In Java you have to use the String <code>equals()</code> function: <pre><code>// Java\nif (myString.equals(\"B\")) {\n    //etc.\n</code></pre></p>","boost":1},{"location":"programming/menus/","title":"Menus - Index","text":"<ul> <li>Practice Menu</li> </ul>","boost":1},{"location":"programming/menus/practicemenu/","title":"Practice Menu","text":"","boost":1},{"location":"programming/menus/practicemenu/#practice-menu-in-java","title":"Practice Menu In Java","text":"<pre><code>/*******************************************************************************************************************\n  * PracticeMenu.java\n  * \n  * To Do: \n  *    Add a sub-menu to the main menu\n  *    Create all the sub-menu elements needed\n  *    Test all the menu options\n  * \n  *******************************************************************************************************************/\npublic class PracticeMenu {\n\n    public static void main(String[] mainArgs) {\n        final int DISPLAY_HELLO = 1;\n        final int DISPLAY_PI = 2;\n        final int DISPLAY_SUB_MENU_01 = 3;\n        final int EXIT = 4;\n\n        int menuSelection = 0; \n        do {\n            displayMainMenu();\n            menuSelection = getInteger(\"Enter your Selection\");    \n\n            switch (menuSelection) {\n                case DISPLAY_HELLO: \n                    displayHello();\n                    break;\n                case DISPLAY_PI:\n                    displayPI();\n                    break;\n                case DISPLAY_SUB_MENU_01:\n                    processSubMenu();\n                    break;\n                case EXIT:\n                    break;\n                default:\n                    System.err.println(\"Invalid menu number. Please try again.\"); \n                    break;\n            }\n        } \n        while (menuSelection != EXIT);\n        System.out.println(\"Goodbye!\");\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    private static void displayMainMenu() {\n        System.out.println(\"\");\n        System.out.println(\"****************************************\");\n        System.err.println(\"          Main Menu         \");\n        System.out.println(\"****************************************\");\n        System.out.println(\"       1. Display Hello\");\n        System.out.println(\"       2. Display PI\");\n        System.out.println(\"       3. Display Sub Menu\");\n        System.out.println(\"       4. Exit\");\n        System.out.println(\"\");\n    }\n\n    private static void displayHello () {\n        System.out.println(\"Hello\");        \n    }\n    private static void displayPI () {\n        System.out.println(\"pi = 3.1415 etc...\");        \n    }\n\n    //------------------------------------------------------------------------\n\n    private static void processSubMenu(){\n\n        final int SUB_MENU_DISPLAY_NAME = 1;\n        final int SUB_MENU_DISPLAY_RANDOM_NUMBER = 2;\n        final int SUB_MENU_EXIT = 3;\n\n        int subMenuSelection = 0;\n\n        displaySubMenu();\n        subMenuSelection = getInteger(\"Enter your Selection\");    \n\n        switch (subMenuSelection) {\n            case SUB_MENU_DISPLAY_NAME: \n                displayName();\n                processSubMenu();\n                break;\n            case SUB_MENU_DISPLAY_RANDOM_NUMBER:\n                displayRandomNumber();\n                processSubMenu();\n                break;\n            case SUB_MENU_EXIT:\n                break;\n            default:\n                System.err.println(\"Invalid menu number. Please try again.\"); \n                break;\n        }\n\n        //copy code to here\n        //on option 3, return to the main menu\n    }\n\n    //add sub menu methods here\n\n    private static void displaySubMenu() {\n        System.out.println(\"\");\n        System.out.println(\"****************************************\");\n        System.err.println(\"          SubMenu Options \");\n        System.out.println(\"****************************************\");\n        System.out.println(\"       1. Display a Name \");\n        System.out.println(\"       2. Display a random number\");\n        System.out.println(\"       3. Return to Main Menu\");\n        System.out.println(\"\");\n    }\n\n    private static void displayName() {\n        String name = getString(\"What is your name? \");\n        System.out.println(name);\n    }\n\n    private static void displayRandomNumber() {\n        int randomNumber = getRandomNumber(0, 100);\n        System.out.println(randomNumber);\n    }\n\n}\n</code></pre>","boost":1},{"location":"programming/methods/","title":"Methods - Index","text":"<p>Methods can be used to define reusable code as well as to organize and simplify coding.</p> <ul> <li>The getString() Method</li> <li>The getInteger() Method</li> <li>The getDouble() Method</li> <li>The getYorN() Method</li> <li>The closeScanner() Method</li> <li>The getRandomNumber() Method</li> <li>Generalized Input Functions</li> <li>Methods Terminology</li> </ul>","boost":1},{"location":"programming/methods/closescanner/","title":"The closeScanner() Method","text":"PseduocodeJava <pre><code>Method Real closeScanner()\n    If Scanner is not null\n        Close scanner\n    Else\n        Display \"Error\"\n    End If\n\nEnd Method\n</code></pre> <pre><code>/** Closes the scanner.\n */\npublic static void closeScanner() {\ntry { \n    if(keyboard != null) {\n        keyboard.close(); \n    }\n} \ncatch (Exception e) { // (Exception) catches all errors java might throw here\n    System.err.println(\"Error closing reader.\");\n}\n}\n</code></pre>","boost":1},{"location":"programming/methods/generalized-input-method-in-java/","title":"Generalized Input Methods In Java","text":"","boost":1},{"location":"programming/methods/generalized-input-method-in-java/#generalizedinputmethodsjava","title":"GeneralizedInputMethods.java","text":"<pre><code>//-------------------------------------------------------------------\n// Generalized Input Functions In Java\n// This program gets input from a user using Scanner. \n// Use at your own risk. No guarantee this code works \n// in all situations.\n//-------------------------------------------------------------------\n\nimport java.util.Scanner;\n\npublic class Input {\n   // Putting the Scanner object here makes it global so it does not\n   // have to be passed to modules.\n   static Scanner keyboard = new Scanner(System.in);\n\n   public static void main(String[] args) {\n      /** Main () -\n        * This program demonstrates various generalized input routines. \n        * This program also demonstrates generating a random number.\n        * @param args Arguments can be passed to this program but \n        * they are not used. \n        */\n\n      do {\n         String stringData = getString(\"Please enter a word or two\");\n         System.out.println(\"This is what you entered: \" + stringData);\n\n         int intData = getInteger(\"Please enter an integer\");     \n         System.out.println(\"This is what you entered: \" + intData);\n\n         //Generating random numbers. \n         for (int i = 0; i &lt; 5; i++) {\n            System.out.println(\"random number \" + (i + 1) \n             + \": \" + getRandomNumber(0, 100));\n         }\n\n      } while (getYorN(\"\\nDo you want to start over? (y/n)\"));\n\n      //close the Scanner\n      closeScanner();\n\n      System.out.println(\"Program Terminating Normally\");\n   }//end of main\n\n   public static void displayGoodbye(){\n       System.out.println(\"Goodbye!\");\n   }\n\n   //////////////////////////////////////////////////////////////////\n   // GENERALIZED INPUT FUNCTIONS \n   //////////////////////////////////////////////////////////////////\n   /** Gets a String from the keyboard. Rejects null entry or any \n     * number of spaces.\n     * @param msg is the text that will be displayed the user to\n     * ask them to enter a value.\n     * @return Returns a String from the keyboard. \n     */ \n   public static String getString(String msg) {\n      String answer = \"\";\n      System.out.println(msg);\n      try {\n         answer = keyboard.nextLine(); \n      }\n      catch (Exception e) {\n         System.err.println(\"Error reading input from user. \" \n           + Ending program.\");\n         System.exit(-1);\n      } \n\n      while (answer.replace(\" \", \"\").equals(\"\")) {\n         System.err.println(\"Error: Missing input.\");\n         try {\n            System.out.println(msg);\n            answer = keyboard.nextLine(); \n         }\n         catch (Exception e) {\n            System.err.println(\"Error reading input from user. \"\n             + Ending program.\");\n            System.exit(-1);\n         } \n      }\n      return answer;            \n   }\n\n   //----------------------------------------------------------------\n   /** Gets an Integer from the keyboard. Rejects null, spaces and\n     * non-integers.\n     * @param msg is the text that will be displayed the user to ask\n     * them to enter a number.\n     * @return Returns an int from the keyboard. \n     */  \n   public static int getInteger(String msg) {\n      System.out.println(msg);\n      while (!keyboard.hasNextInt()) {\n         keyboard.nextLine();\n         System.err.println(\"Invalid integer. Try again.\");\n      }\n      int number = keyboard.nextInt();\n      keyboard.nextLine(); //flushes the buffer\n      return number;\n   }\n\n   //----------------------------------------------------------------\n   /** Gets a Double from the keyboard. Rejects null, spaces and\n     * non-numbers.\n     * @param msg is the text that will be displayed the user to\n     * ask them to enter a number.\n     * @return Returns a double from the keyboard. \n     */ \n   public static double getDouble(String msg) {\n      System.out.println(msg);\n      while (!keyboard.hasNextDouble()) {\n         keyboard.nextLine();\n         System.err.println(\"Invalid number. Try again.\");\n      }\n      double number = keyboard.nextDouble();\n      keyboard.nextLine(); //flushes the buffer\n      return number;\n   }\n\n   //----------------------------------------------------------------\n   /** Gets a Yes or No answer from the keyboard. Calls getString\n     * to rejects null input and spaces.\n     * @param msg is the text that will be displayed the user.\n     * @return Returns a boolean value. True = yes; False = no. \n     */ \n   public static boolean getYorN(String msg) {\n      String answer = getString(msg);\n\n      while (answer.compareToIgnoreCase(\"y\")   != 0 \n          &amp;&amp; answer.compareToIgnoreCase(\"yes\") != 0 \n          &amp;&amp; answer.compareToIgnoreCase(\"n\")   != 0 \n          &amp;&amp; answer.compareToIgnoreCase(\"no\")  != 0) {\n\n         if (answer.replace(\" \", \"\").equals(\"\")) {\n            System.err.println(\"Error: Missing y/n input.\");\n         } else {\n            if (answer.compareToIgnoreCase(\"y\")   != 0 \n             &amp;&amp; answer.compareToIgnoreCase(\"yes\") != 0 \n             &amp;&amp; answer.compareToIgnoreCase(\"n\")   != 0 \n             &amp;&amp; answer.compareToIgnoreCase(\"no\")  != 0) {\n               System.err.println(\"Error: Unexpected input.\");\n            }\n         }\n         answer = getString(msg);\n      } \n\n      if  (answer.compareToIgnoreCase(\"y\")   == 0  \n        || answer.compareToIgnoreCase(\"yes\") == 0) {\n         return true;\n      } \n      else {\n         return false;\n      }\n   }\n\n   //----------------------------------------------------------------\n   /** Closes the scanner.\n     */ \n   public static void closeScanner() {\n      try { \n         if(keyboard != null) {\n            keyboard.close(); \n         }\n      } \n     // (Exception) catches all errors java might throw here\n      catch (Exception e) { \n         System.err.println(\"Error closing reader.\");\n      }\n   }\n   //----------------------------------------------------------------\n   /** Generates a random number between low and high, inclusive.\n     * @param low is the smallest number that will be randomly \n     * generated.\n     * @param high is the largest number that will be randomly \n     * generated.\n     * @return Returns the random number as an integer.\n     */\n   public static int getRandomNumber (int low, int high) {\n      return (int)(Math.random() * ((high + 1) - low)) + low;\n   }\n\n}//end of class\n</code></pre>","boost":1},{"location":"programming/methods/getdouble/","title":"The getDouble() Method","text":"PseduocodeJava <pre><code>// getReal() function in pesudocode\n\nFunction Real getReal (String msg)\n    Declare Real newValue\n\n    Display msg\n    Input newValue\n\n    While newValue is not a Real number\n        Display \"Invalid number.\"\n        Display msg\n        Input newValue\n    End While\n\n    Return newValue\nEnd Function\n</code></pre> <pre><code>/** Gets a Double from the keyboard. Rejects null, spaces and non-numbers.\n * @param msg is the text that will be displayed the user to ask them to enter a number.\n * @return Returns a double from the keyboard. \n */ \npublic static double getDouble(String msg) {\n  System.out.println(msg);\n  while (!keyboard.hasNextDouble()) {\n  keyboard.nextLine();\n  System.err.println(\"Invalid number. Try again.\");\n  }\n  double number = keyboard.nextDouble();\n  keyboard.nextLine(); //flushes the buffer\n  return number;\n}\n</code></pre>","boost":1},{"location":"programming/methods/getinteger/","title":"The getInteger() Method","text":"PseduocodeJava <pre><code>// getInteger() method in pesudocode\n\nMethod Integer getInteger (String msg)\n    Declare Integer newValue\n\n    Display msg\n    Input newValue\n\n    While newValue is not an Integer\n        Display \"Invalid number.\"\n        Display msg\n        Input newValue\n    End While\n\n    Return newValue\nEnd Method\n</code></pre> <pre><code>/** Gets an Integer from the keyboard. Rejects null, spaces and non-integers.\n * @param msg is the text that will be displayed the user to ask them to enter a number.\n * @return Returns an int from the keyboard. \n */  \npublic static int getInteger(String msg) {\n    System.out.println(msg);\n    while (!keyboard.hasNextInt()) {\n        keyboard.nextLine();\n        System.err.println(\"Invalid integer. Try again.\");\n    }\n    int number = keyboard.nextInt();\n    keyboard.nextLine(); //flushes the buffer\n    return number;\n}\n</code></pre>","boost":1},{"location":"programming/methods/getrandomnumber/","title":"The getRandomNumber() Method","text":"","boost":1},{"location":"programming/methods/getrandomnumber/#developing-a-getrandomnumber-method","title":"Developing a getRandomNumber Method","text":"<p>All programming languages have a way to generate a random number. Well, that\u2019s not quite true. No software can generate a truly random number\u2014the closest software can do is to generate a good-enough random number.</p> <p>Here is a pseudocode method to get a random number:</p> <pre><code>randomNumber = Math.random()\n</code></pre> <p>The Math function will return a value from 0 to 1, not including 1. But what if you want an integer from 0 to 100? The calling program will have to convert the return value using a mathematical formula such as this:</p> <pre><code>Declare Integer randomNumber\nrandomNumber = Math.random() * 100\n</code></pre> <p>Every time a program needs a random number that does not start with 0, such as a random number from 10 to 20, you will have to write a conversion in the program over and over again. That\u2019s a waste of your valuable time. To generalize the function, let\u2019s do those conversions in a getRandomNumber() method instead.</p> <p>This is a method in pseudocode named getRandomNumber (low, high) that will pass the lowest and the highest value the program wants generated, and then use those values to generate and return a random number between those numbers, inclusive.</p> <p>To solve this: first try just using the low value to restrict the random number, then work on restricting the formula to the high value.</p> <p>getRandomNumnber IPO (Input Processing Output) Chart</p> Input Processing Output Two integers: low and high Generate a random number between the low and high numbers, inclusive of each Return a random number between the input parameters, inclusive <p>Assume <code>Math.Random()</code> returns a Real number from 0 to 1, not including the number 1. And it will come in handy to remember the concept of integer truncation for this problem!</p> <p>Note: Truncating Real Numbers</p> <p>Integers are round numbers. If you set an integer to a Real number, the decimal portion of the number is discarded. This comes in handy in programming so it is something to be aware of.</p> <p>Here is one solution:</p>","boost":1},{"location":"programming/methods/getrandomnumber/#getrandomnumber-method-in-pseudocode","title":"getRandomNumber() Method in Pseudocode","text":"<pre><code>Method Integer getRandomNumber(Integer low, Integer high)\n    Declare Integer randomNbr\n\n    randomNbr = (Math.random() * ((high + 1) - low)) + low;\n\n    Return randomNbr\nEnd Method\n</code></pre> <p>Let\u2019s test that code by plugging in some sample numbers.</p> <p>When we want a random number from 11 to 22, including 11 and 22, here is how the math works out:</p> <pre><code>(Math.random() * ((22 + 1) - 11)) + 11\n(Math.random() * (23 \u2013 11)) + 11\n(Math.random() * 12) + 11\n</code></pre> <p>Now let\u2019s imagine the Math.random function returns extreme values: 0 and then .999</p> <p>First let\u2019s plug in 0:</p> <pre><code>(0 * 12) + 11\n(0) + 11\n11\n</code></pre> <p>So, the number 11 is the lowest value that will be returned.</p> <p>Now let\u2019s plug in .999:</p> <pre><code>(.999 * 12) + 11\n(11.998) + 11\n22.998\n22\n</code></pre> <p>And returning an Integer will strip off the numbers to the right of the decimal, so 22 is the highest value that will be returned.</p>","boost":1},{"location":"programming/methods/getrandomnumber/#getrandomnumber-method-in-java","title":"getRandomNumber() Method in Java","text":"<pre><code>/** Generates a random number between low and high, inclusive.\n * @param low is the smallest number that will be randomly generated.\n * @param high is the largest number that will be randomly generated.\n * @return Returns the random number as an integer.\n */\npublic static int getRandomNumber (int low, int high) {\n  return (int)(Math.random() * ((high + 1) - low)) + low;\n}\n</code></pre>","boost":1},{"location":"programming/methods/getstring/","title":"The getString() Method","text":"PseduocodeJava <pre><code>Method String getString (String msg)\n    Declare String newValue\n\n    Display msg\n    Input newValue\n\n    While newValue is null or spaces\n        Display \"Error: Missing input.\"\n        Display msg\n        Input newValue\n    End While\n\n    Return newValue\nEnd Method\n</code></pre> <pre><code>/** Gets a String from the keyboard. Rejects null entry or any \n * number of spaces.\n * @param msg is the text that will be displayed the user to\n * ask them to enter a value.\n * @return Returns a String from the keyboard. \n*/ \n\npublic static String getString(String msg) {\n    String answer = \"\";\n    System.out.println(msg);\n    try {\n        answer = keyboard.nextLine(); \n    } catch (Exception e) {\n        System.err.println(\"Error reading input from user. \" \n            + Ending program.\");\n        System.exit(-1);\n    } \n\n    while (answer.replace(\" \", \"\").equals(\"\")) {\n        System.err.println(\"Error: Missing input.\");\n        try {\n            System.out.println(msg);\n            answer = keyboard.nextLine(); \n        } catch (Exception e) {\n            System.err.println(\"Error reading input from user. \"\n                + Ending program.\");\n            System.exit(-1);\n        } \n    }\n    return answer;            \n}\n</code></pre>","boost":1},{"location":"programming/methods/getyorn/","title":"The getYorN() Method","text":"<p>The below method asks the user to enter <code>Y</code> or <code>N</code> using the generalized <code>getString()</code> method</p> PseduocodeJava <pre><code>Method Boolean getYesOrNo (String msg)\n    Declare String newValue\n\n    Display msg\n    newValue = getString(msg)\n\n    While uppercase(newValue) is not \"Y\"\n    AND uppercase(newValue) is not \"N\"\n\n        Display \"Invalid entry. Should be Y or N\"\n        newValue = getString(msg)\n\n    End While\n\n    If newValue is \"Y\" Then\n        Return true\n    End If\n    Return false // newVaLUE IS \"N\"\nEnd Method\n</code></pre> <pre><code>/** Gets a Yes or No answer from the keyboard. Calls getString\n * to rejects null input and spaces.\n * @param msg is the text that will be displayed the user.\n * @return Returns a boolean value. True = yes; False = no. \n*/ \n\npublic static boolean getYorN(String msg) {\nString answer = getString(msg);\n\nwhile (answer.compareToIgnoreCase(\"y\")   != 0 \n    &amp;&amp; answer.compareToIgnoreCase(\"yes\") != 0 \n    &amp;&amp; answer.compareToIgnoreCase(\"n\")   != 0 \n    &amp;&amp; answer.compareToIgnoreCase(\"no\")  != 0) {\n\n    if (answer.replace(\" \", \"\").equals(\"\")) {\n        System.err.println(\"Error: Missing y/n input.\");\n    } else {\n        if (answer.compareToIgnoreCase(\"y\")   != 0 \n        &amp;&amp; answer.compareToIgnoreCase(\"yes\") != 0 \n        &amp;&amp; answer.compareToIgnoreCase(\"n\")   != 0 \n        &amp;&amp; answer.compareToIgnoreCase(\"no\")  != 0) {\n            System.err.println(\"Error: Unexpected input.\");\n            }\n        }\n        answer = getString(msg);\n    } \n\n    if  (answer.compareToIgnoreCase(\"y\")   == 0  \n        || answer.compareToIgnoreCase(\"yes\") == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n</code></pre> <p>Notice that <code>getYesOrNo()</code> uses <code>getString()</code>. Why is that? Because <code>getString()</code> is a generalized input method that can return any kind of string such as <code>Y</code> or <code>N</code>.</p>","boost":1},{"location":"programming/methods/getyorn/#the-getstring-method-in-pseduocode-used-in-the-getyorn-method","title":"The getString() Method in Pseduocode used in The getYorN() Method","text":"PseduocodeJava <pre><code>Method String getString (String msg)\n    Declare String newValue\n\n    Display msg\n    Input newValue\n\n    While newValue is null or spaces\n        Display \"Error: Missing input.\"\n        Display msg\n        Input newValue\n    End While\n\n    Return newValue\nEnd Method\n</code></pre> <pre><code>/** Gets a String from the keyboard. Rejects null entry or any \n * number of spaces.\n * @param msg is the text that will be displayed the user to\n * ask them to enter a value.\n * @return Returns a String from the keyboard. \n*/ \n\npublic static String getString(String msg) {\n    String answer = \"\";\n    System.out.println(msg);\n    try {\n        answer = keyboard.nextLine(); \n    } catch (Exception e) {\n        System.err.println(\"Error reading input from user. \" \n            + Ending program.\");\n        System.exit(-1);\n    } \n\n    while (answer.replace(\" \", \"\").equals(\"\")) {\n        System.err.println(\"Error: Missing input.\");\n        try {\n            System.out.println(msg);\n            answer = keyboard.nextLine(); \n        } catch (Exception e) {\n            System.err.println(\"Error reading input from user. \"\n                + Ending program.\");\n            System.exit(-1);\n        } \n    }\n    return answer;            \n}\n</code></pre>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/","title":"Modules and Functions Terminology","text":"","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#method","title":"Method","text":"<p>Another name for module or function used in object-oriented programming. A method definition consists of its method name, parameters, return value type, and body.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#method-header","title":"Method header","text":"<p>The first line of a group of lines of code that are called and executed. The method header specifies the modifiers, return value type, method name, and parameters of the method.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#return-variable-type","title":"Return variable type","text":"<p>The variable type of the variable being returned from a function to the calling statement.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#ipo-chart","title":"IPO Chart","text":"<p>Input-Processing-Output. The sequence of tasks in a well-structured program.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#function","title":"Function","text":"<p>A group of code that returns a value to the calling statement.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#function-header","title":"Function header","text":"<p>The first line of a group of lines of code that returns a value to the calling statement.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#calling-statement","title":"Calling statement","text":"<p>The statement used to start a function. After the function ends, control of the program returns to the calling statement.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#parameters","title":"Parameters","text":"<p>Data passed to a module or function. See Arguments.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#return","title":"Return","text":"<p>Used to return from a function to the calling statement. Usually returns a value.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#local-variable","title":"Local variable","text":"<p>A local variable is declared in a function and is only known in that function. Its scope is local.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#local-constant","title":"Local constant","text":"<p>A local constant is declared in a function and is only known in that function. Its scope is local.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#pass-by-reference","title":"Pass by reference","text":"<p>This refers to passing a variable to a module or function so the code inside the module or function can update the variable\u2019s value. In Java this is only possible for arrays.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#pass-by-value","title":"Pass by value","text":"<p>This refers to passing the value of a variable to a module or function so the variable is local in scope. The code inside the module of function cannot change the original variable in the calling routine.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#arguments","title":"Arguments","text":"<p>A list of variables being passed to a module or function. See parameters.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#scope","title":"Scope","text":"<p>Refers to where a variable or constant can be used. See global and local.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#local-scope","title":"Local scope","text":"<p>The scope of a variable or constant. Local scope is limited to the function where the variable or constant is declared.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#hierarchy-chart","title":"Hierarchy Chart","text":"<p>A chart of modules and functions in a program. Used for design and for documentation.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#global-variables","title":"Global variables","text":"<p>A variable known to the entire program must be declared globally. Do not create global variables unless approved by your teacher or manager. Global variables make debugging difficult.</p>","boost":1},{"location":"programming/methods/methods-and-functions-terminology/#global-constant","title":"Global constant","text":"<p>A constant known to the entire program must be declared globally. OK to use because they do not change.</p>","boost":1},{"location":"programming/oop/","title":"Object-Oriented Programming (OOP) - Index","text":"<ul> <li>Object-Oriented Programming</li> <li>Object-Oriented Programming Terminology</li> <li>Object-Oriented Programming Review Questions</li> </ul>","boost":1},{"location":"programming/oop/object-oriented-programming/","title":"Object-Oriented Programming (OOP)","text":"<p>What are objects? An employee, a hero, a house, a television remote - just about anything you can picture in the real world can be simulated as a software object. Object-Oriented Programming (OOP) is another way of looking at software.</p>","boost":1},{"location":"programming/oop/object-oriented-programming/#classes-and-objects","title":"Classes and Objects","text":"<p>The class (file) is the blueprint for creating an actual object. A good analogy is a house\u2019s set of blueprints and the actual house itself. You can look at a blueprint (the class), but you can\u2019t actually walk into it. You have to build the actual house first (the object, also called an instance of the class).</p> <p>Key Concept</p> <p>Classes and Objects do not run by themselves. They just are. Very Zen. Objects need to be created and used in a Driver Program. The Driver Program does all the work of creating objects, validating input data, telling the object to change its data, printing its data, and more.</p> <p>Here is some code from a driver program that creates a House object:</p> <pre><code>// Pseudocode\n//The below line creates a variable, myHouse, of the type House.\n//myHouse has been named, but it doesn\u2019t exist yet.\n//Note that House is a variable type like String or Integer.\n//But it is a variable type YOU created!\nDeclare House myHouse\n\n//The below line creates the actual object, myHouse, of the type House.\nmyHouse = New House( )\n</code></pre> <p>Now you can do things to myHouse like store and change data. You can move in furniture and walk around in it, metaphorically speaking.</p> <pre><code>// Pseudocode\n//The below line creates a variable, myHouse, of the type House\n//and it creates the actual object, myHouse, of the type House\n//all in one line.\nDeclare House myHouse = New House( )\n\n//Creating another house object called yourHouse:\nDeclare House yourHouse = New House( )\n</code></pre> <p>An array of objects can be created like this:</p> <pre><code>// Pseudocode\nDeclare Person [ ] people = New Person [10]\n</code></pre> <p>This doesn\u2019t create the Person objects - it creates an array of 10 elements to hold Person objects. A program could create the first object in the array like this:</p> <pre><code>// Pseudocode\npeople[0] = New Person( )\n</code></pre>","boost":1},{"location":"programming/oop/object-oriented-programming/#constructors","title":"Constructors","text":"<p>When an object is created, a method in the class called its constructor is executed. Look at this line of code:</p> <pre><code>// Pseudocode\nHouse myHouse = New House ()\n</code></pre> <p>See the <code>( )</code>? That means that is a method, right? That\u2019s the constructor. A constructor that does not have any arguments is called a no-arg constructor. (No arguments, get it?)</p> <p>In the House class, you would find this:</p> <pre><code>// Pseudocode\nClass House\n    //The No-Arg Constructor\n    Public Module House ( )\n        //Code that usually initializes data in the object\n    End Module\nEnd Class\n</code></pre> <p>And check this out: (creating an object with 2 arguments!)</p> <pre><code>// Pseudocode\nmyHouse = New House (nbrOfBedrooms, nbrOfBathrooms)\n</code></pre> <p>See the fields in the \"<code>( )</code>\"? That means that is a method, right? That\u2019s a constructor. And in the House class and object, you would expect to find a constructor that brings in two values as parameters. And you do, as seen below!</p> <pre><code>// Pseudocode\nClass House\n    Declare Private Integer numberOfBedrooms\n    Declare Private Integer numberOfBathrooms\n    //The No-Arg Constructor\n    Public Module House ( )\n        //Code that usually initializes data in the object\n        numberOfBedrooms = 0\n        numberOfBathrooms = 0\n    End Module\n\n    //A Constructor accepting two parameters\n    Public Module House (Integer bedrooms, Integer bathrooms)\n        //Code that usually initializes data in the object\n        numberOfBedrooms = bedrooms\n        numberOfBathrooms = bathrooms\n    End Module\nEnd Class\n</code></pre> <p>Notice in the class above, the data fields are private. That means other programs cannot update the fields directly, but they can use public methods in the class to update the fields\u2019 values. This is done for security and to follow the OOP principle of encapsulation. The objects created from the class are responsible for the data stored in them. The object has final say about how and when its data can be updated. This is very important for objects that hold money, security clearances, bitcoins, or anything else that should be secure.</p>","boost":1},{"location":"programming/oop/object-oriented-programming/#getters-and-setters","title":"Getters and Setters","text":"<p>In OOP, objects keep their data private, which means no other program can directly change the data. Other programs must use public methods called getters and setters to get and set data in the object.</p> <p>Key Concept</p> <p>A famous saying you must understand: Private fields, Public methods</p> <p>It means just what it says! Fields are private, methods are public!</p> <p>Notice below that the getter does not need an input parameter, but the setter does. Another program is calling the setter to set a field to something new - so there must be an input parameter.</p> <pre><code>// Pseudocode\nClass House\n    Declare Private Integer numberOfBedrooms\n    Declare Private Integer numberOfBathrooms\n\n    Public Module House ( )\n        //Code that usually initializes data in the object\n        numberOfBedrooms = 0\n        numberOfBathrooms = 0\n    End Module\n\n    //Getters\n    Public String Function getBedrooms ()\n        Return numberOfBedrooms\n    End Function\n\n    Public String Function getBathrooms ()\n        Return numberOfBathrooms\n    End Function\n\n    //Setters\n    Public Module setBedrooms (Integer nbrBedrooms)\n        numberOfBedrooms = nbrBedrooms\n    End Module\n\n    Public Module setBathrooms (Integer nbrBathrooms)\n        numberOfBathrooms = nbrBathrooms\n    End Module\nEnd Class\n</code></pre> <p>The below method is also a setter. Because the incoming variable name is the same as the field name in the class, using \"this\" tells the computer to use the field name for the object instead of the local variable name in the parameter list.</p> <pre><code>// Pseudocode\nPublic Module setBedrooms (Integer numberOfBedrooms)\n    this.numberOfBedrooms = numberOfBedrooms\nEnd Module\n</code></pre>","boost":1},{"location":"programming/oop/object-oriented-programming/#common-mistakes-with-getters-and-setters","title":"Common mistakes with getters and setters","text":"<p>In the below code the local variable numberOfBedrooms is set to itself. This setter needed .this as shown above.</p> <pre><code>// Pseudocode - Common Mistake\nPublic Module setBedrooms (Integer numberOfBedrooms)\n    numberOfBedrooms = numberOfBedrooms\nEnd Module\n</code></pre> <p>In the below two routines the programmer didn\u2019t think through what a getter and setter should do. They tried to memorize the form without understanding the function.</p> <pre><code>// Pseudocode - Common Mistake\nPublic String Function getName (String name)//name not used\n    Return userName\nEnd Function\n\nPublic Module setName ()\n    userName = name //name is not defined\nEnd Module\n</code></pre> <p>If you understand what getters and setters are supposed to do, you don\u2019t have to memorize so much.</p>","boost":1},{"location":"programming/oop/object-oriented-programming/#inheritance","title":"Inheritance","text":"<p>The concept of inheritance allows a class to extend an existing class. The \u2018top\u2019 class is called the superclass. The class that inherits is the subclass. The subclass can use any data fields or methods in the superclass without having them in the subclass. This enables the programmer to change code in one place, the superclass, and all the subclasses will effectively change also.</p> <p>Below is a classic example of inheritance. Beagle inherits characteristics from Dog which inherits characteristics from Animal. Persian inherits data and methods from the Cat class which inherits data and methods from the Animal class.</p> <p></p> <p>Inheritance can be determined by saying two classes are in an is-a relationship. A beagle is-a dog. Therefore, the Beagle class extends the Dog class. A Persian is not a Dog so it does not inherit anything from the Dog class. But a Persian is a Cat which is an Animal, so Persian inherits from Animal.</p> <p>The Animal, Dog, Beagle, Poodle, Cat, and Persian classes can all be created as objects. Here is how the classes are extended and how a method in Animal can be used in Dog and Beagle objects:</p> <pre><code>// Pseudocode\nPublic Class Animal\n    Private String name\n\n    //Constructors\n    Public Module Animal ()\n        name = \"undefined\"\n    End Module\n\n    Public Module Animal (String n)\n        name = n\n    End Module\n\n    //getters and setters\n    Public Module setName(String n)\n        name = n\n    End Module\n\n    Public Function String getname()\n        Return name\n    End Function\nEnd Class\n</code></pre> <p>Note</p> <p>If the function <code>setName()</code> is not in Beagle, but it is in Dog, the function in Dog will be executed. If the function is not in Dog, but it is in Animal, the function in Animal will be executed.</p> <p>Note that Beagle does not contain a <code>name</code> field, but Animal does. So, because Beagle extends Dog which extends Animal, Beagle does have a name field where his name is stored.</p> <pre><code>// Pseudocode\nPublic Class Dog extends Animal\n    //Constructors\n    Public Module Dog ()\n        setName(\"Undefined in Dog\")\n    End Module\n\n    Public Module Dog (String name)\n        setName(name)\n    End Module\nEnd Class\n</code></pre> <p>Note</p> <p>There are two constructors in all three classes.</p> <pre><code>// Pseudocode\nPublic Class Beagle extends Dog\n    //Constructors\n    Public Module Beagle ()\n        setName(\"Undefined in Beagle\")\n    End Module\n\n    Public Module Beagle (String name)\n        setName(name)\n    End Module\nEnd Class\n</code></pre> <p>Note</p> <p>In a driver program, here is how objects could be created: <pre><code>// Pseudocode\nAnimal myAnimal = New Animal ()\nDog myDog = New Dog()\nDog yourDog = New Dog(\"Fido\")\n</code></pre></p>","boost":1},{"location":"programming/oop/object-oriented-programming/#overriding-a-method","title":"Overriding a Method","text":"<p>If the superclass and the subclass have a method named the same, the subclass overrides the superclass and the computer uses the subclass's method and not the superclass's.</p> <pre><code>// Pseudocode\nPublic Class Employee\n    Private Integer salary\n\n    //no-arg constructor\n    Public Method Employee ()\n        salary = 0\n    End Method\n\n    //constructor with an argument\n    //The \u201cthis.\u201d Is used to set the instance variable\n    Public Method Employee (String salary)\n        this.salary = salary\n    End Method\n\n    Public Method setSalary (Integer newSalary)\n        salary = newSalary\n    End Method\n\n    Public Method updateSalary (Integer increment) //overridden!\n        salary = salary + increment * 2\n    End Method\nEnd Class\n</code></pre> <pre><code>// Pseudocode\nPublic Class SalariedEmployee extends Employee\n    Public Method Employee ()\n        //no code. Uses the superclass's constructor\n    End Method\n\n    Public Method updateSalary (Integer increment) //this is used!\n        salary = salary + increment * 2\n    End Method\nEnd Class\n</code></pre> <p>In OOP, when a SalariedEmployee object is created as shown above, both the SalariedEmployee's constructor and the Employee's constructor are executed.</p> <p>But, when a program runs the SalariedEmployee's <code>updateSalary(...)</code> method, the computer only runs the <code>updateSalary(...)</code> method in the SalariedEmployee object. The subclass overrides the superclass's method and effectively replaces it. This allows salaried employees to have a different method from the Employee superclass's method.</p> <p>When a program runs the <code>setSalary(...)</code> method for a SalariedEmployee, the computer sees the method is not in the SalariedEmployee class, so it looks for it in the Employee class. This allows the subclass to inherit methods in the superclass without having to duplicate the code in the subclass. That\u2019s inheritance!</p>","boost":1},{"location":"programming/oop/object-oriented-programming/#overloading-a-method","title":"Overloading a Method","text":"<p>A program may have two or more methods named the same when they have different parameter lists. You have already seen this when a class contains a no-arg constructor AND a constructor with the same name that accepts at least one parameter.</p> <p>Overloading is possible for methods other than just constructors too. For example, this is allowed:</p> <pre><code>// Pseudocode\nMain\n    Declare Real playerHealth = 0\n    playerHealth = calculateHealth()\n    playerHealth = calculateHealth(-.1)\n    //This is a code snippet. Other code is not shown.\nEnd Main\n\nFunction Real calculateHealth ()\n    Return (playerHealth * .9)\nEnd Method\n\nFunction Real calculateHealth (Real pctToChange)\n    Return (playerHealth + (playerHealth * pctToChange))\nEnd Method\n</code></pre> <p>The computer will know which method to run because the parameter list is different.</p> <p>Note that the parameter list must be different enough for the computer to tell there is a difference. For example, this will not work:</p> <pre><code>// Pseudocode - Do not do this\nFunction Real calculateHealth (Real decreaseAmount)\n    Return (playerHealth \u2013 decreaseAmount)\nEnd Method\n\nFunction Real calculateHealth (Real increaseAmount)\n    Return (playerHealth + increaseAmount)\nEnd Method\n</code></pre> <p>But the below code will work since the computer can distinguish which function to use by the number of parameters or by the sequence of the incoming variable type(s):</p> <pre><code>// Pseudocode\nFunction Real calculateHealth (Real decreaseAmount)\n    Return (playerHealth \u2013 decreaseAmount)\nEnd Method\n\nFunction Real calculateHealth (Integer increaseAmount)\n    Return (playerHealth + increaseAmount)\nEnd Method\n\nFunction Real calculateHealth (Real increaseAmount, Integer bonus)\n    Return (playerHealth + increaseAmount + bonus)\nEnd Method\n</code></pre>","boost":1},{"location":"programming/oop/object-oriented-programming/#unified-modeling-language-uml","title":"Unified Modeling Language (UML)","text":"<p>The Unified Modeling Language is used by analysts and programmers to communicate with each other by using a standard methodology to describe an Object-Oriented group of classes and programs. The top section is the name of the class and therefore the file. The middle section lists the fields. The bottom section lists the methods in the class and the required parameters for each method. A negative sign (-) means private, and a plus sign (+) means public.</p> <p>The Student class extends the Person class - in other words, Student inherits the fields and methods from the Person class.</p> <p></p> <p>Note</p> <p>\"-\" means private \"+\" means public</p> <p>!! note</p> <pre><code>The arrow means extends (inheritance).\nStudent extends Person.\n</code></pre>","boost":1},{"location":"programming/oop/object-oriented-programming/#accessing-an-object","title":"Accessing an Object","text":"<p>Here are two instances of a class being created in a driver program:</p> <p><code>Person person1 = New Person ( )</code></p> <p><code>Person person2 = New Person (\"Janet\")</code></p> <p>Then the driver program can call methods in the object by using the object\u2019s variable name, like this:</p> <p><code>person1.setName(\"Bob\")</code></p> <p><code>name = person2.getName()</code></p>","boost":1},{"location":"programming/oop/object-oriented-programming/#a-full-oop-example","title":"A Full OOP Example","text":"<p>Using the Person and Student Objects from the prior section, we will need a driver program to create and use the objects.</p> <p>Here are the specifications for the PersonDriver Program: (what it should do)</p> <ol> <li>Create the first Person object using the constructor with all the parameters</li> <li>Create the second Person object using the no-arg constructor</li> <li>Set the first and last name of the second Person object using setters</li> <li>Display the full names of each Person.</li> <li>Create the first Student object using the constructor with all the parameters</li> <li>Create the second Student object using the no-arg constructor</li> <li>Set the first and last name of the second Student object using setters.</li> <li>Display the full names of each Student.</li> <li>Display the full names of each Student which should show the sID (studentID) also.</li> </ol> <p>Can you imagine the code for each of the above classes and the driver program?</p> <p>Try to describe the code for each item to someone out loud.</p> <p>Coding Exercise:</p> <p>Write the above classes and the driver program in pseudocode.</p> <p>Compare your code to the code below.</p> <p>(If you can\u2019t write it in pseudocode, you don\u2019t really understand it.)</p> <p>First, let\u2019s create the superclass:</p> <pre><code>// Pseudocode\npublic Class Person\n\n    //data fields or properties\n    Private String firstName    //note that fields in\n    Private String lastName     // classes are global\n\n    //No-arg constructor\n    Public Module Person()\n        firstName = \"NA\"\n        lastName = \"NA\"\n    End Module\n\n    //Another Constructor\n    Public Module Person(String fName, String lName)\n        firstName = fName\n        lastName = lName\n    End Module\n\n    //Setters\n    Public Module setFirstName (String fName)\n        firstName = fName\n    End Module\n\n    Public Module setLastName (String lName)\n        lastName = lName\n    End Module\n\n    //Getters are functions because they return data\n    Public Function String getFirstName()\n        Return firstName\n    End Function\n\n    Public Function String getLastName()\n        Return lastName\n    End Function\n\n    Public Function String getFullName()\n        Return (firstName, \" \", lastName)\n    End Function\n\nEnd Class\n</code></pre> <p>Next, let\u2019s create a subclass that will inherit from the Person superclass:</p> <pre><code>// Pseudocode\npublic Class Student extends Person\n\n    //data fields or properties\n    Private String studentID\n\n    //No-arg constructor\n    Public Module Student(){\n        setFirstName(\"NA\")  //Calls the superclass setter\n        setLastName(\"NA\")   //Calls the superclass setter\n        studentID = \"NA\"\n    End Module\n\n    //Constructor\n    Public Module Student(String fName,\n        String lName,\n        String sID)\n        setFirstName(fName) //Calls the superclass setter\n        setLastName(lName) //Calls the superclass setter\n        studentID = sID;\n    End Module\n\n    //Setters\n    Public Module setStudentID (String sID)\n        studentID = sID;\n    End Module\n\n    //Getters\n    Public Function String getStudentID()\n        Return studentID;\n    End Function\n\n    //This method overrides getFullName() in Person.\n    Public String getFullName()\n        Return (super.getFullName(), \": \", studentID)\n    End Function\n\nEnd Class\n</code></pre> <p>Notice that in <code>setFullName()</code> the <code>super.getFullName()</code> tells the computer to use the superclass\u2019s method. So the <code>Student</code> class uses both its own <code>getFullName()</code> method and the superclass\u2019s. The <code>Student</code> class adds the student ID to the full name.</p> <p>Now, let\u2019s create a basic Driver Program that will create 2 person objects and 2 student objects:</p> <pre><code>// Pseudocode\nPublic Class PersonDriver\n    Public Module Main()\n        //Create the first person object p1\n        Person p1 = New Person(\n            getString(\"Enter the first name\"),\n            getString(\"Enter the last name\"))\n\n        //Create the second person object p2\n        // using a no-arg constructor\n        Person p2 = New Person()\n\n        //Use setters to set data for p2\n        p2.setFirstName(getString(\"Enter the first name\"))\n        p2.setLastName (getString(\"Enter the last name\"))\n\n        Display p1.getFullName() //Using a getter for p1\n        Display p2.getFullName() //Using a getter for p2\n\n        //Create the first student object s1\n        Student s1 = New Student(\n            getString(\"Enter the first name\"),\n            getString(\"Enter the last name\"),\n            getString(\"Enter the Student ID\"))\n\n        //Create the second student object s2\n        // using a no-arg constructor\n        Student s2 = New Student()\n\n        //Use setters to set the data for s2\n        s2.setFirstName (getString(\"Enter the first name\"))\n        s2.setLastName (getString(\"Enter the last name\"))\n        s2.setStudentID (getString(\"Enter the Student ID\"))\n\n        Display s1.getFullName() //Using a getter for s1\n        Display s2.getFullName() //Using a getter for s2\n\n    End Module\nEnd Class\n</code></pre> <p>The above code is all well and good if we have only a few objects to create, but it would become unwieldy if we had hundreds or thousands of objects. How can we organize this better?</p> <p>With an Array! (But you knew that.)</p> <pre><code>// Pseudocode\nProgram: PersonDriverWithAnArray\n\n    Private Person [] people = New Person[4];   //Global array\n\n    Public Module main()\n\n        //Create the objects in a loop\n        Declare Integer i\n\n        for i = 0 to 1 Step 1 //There are 2 person objects\n            people[i] = New Person()\n\n            Display \"Person #\", i\n            //Create the person\u2019s fields using setters\n            people[i].setFirstName(getString(\"First name?\"))\n            people[i].setLastName(getString(\"Last name?\"))\n        End For\n\n        for j = 2 to 3 Step 1 //There are 2 Student objects\n            people[i] = New Student()\n\n            Display \"Student #\", i\n            //Create the student\u2019s fields using setters\n            people[i].setFirstName(getString(\"First name?\"))\n        people[i].setLastName(getString(\"Last name?\"))\n        End For\n\n        Display \" \"\n\n        //Print all the full names in a loop using a getter\n        for i = 0 to people.length \u2013 1 Step 1\n            Display people[i].getFullName()\n        End For\n\n        //Illustrate polymorphism\n        for i = 0 to people.length \u2013 1 Step 1\n            displayInfo(people[i])\n        End For\n    End of Module\n\n    // Note the below module accepts Person objects\n    // but it will also accept any object that\n    // inherits from Person such as Student: Polymorphism!\n    Public Module displayInfo(Person p)\n        Display p.getFullName()\n    End Module\n\nEnd of Program\n</code></pre> <p>Polymorphism. One of my favorite words. Notice above that the <code>displayInfo(...)</code> method takes in a Person as a parameter. But the program is sending to it both Person and Student objects. Because Student extends Person the computer will know what to do with each type of object. That\u2019s polymorphism!</p> <p>For the above example to work, the method <code>getFullName()</code> must exist in the superclass as well as in the subclasses.</p>","boost":1},{"location":"programming/oop/object-oriented-programming/#can-you-do-this","title":"Can You Do This?","text":"<p>From your knowledge of OOP concepts and principles, write the below classes and the driver program.</p> <p></p> <p>Fly extends Insect.</p> <p>Specifications for the InsectDriver Program:</p> <ol> <li>Create the first Insect object using the constructor with all the parameters</li> <li>Create the second Insect object using the no-arg constructor</li> <li>Set the fields of the second Insect object using setters</li> <li>Display the fields of each Insect.</li> <li>Create the first Fly object using the constructor with all the parameters</li> <li>Create the second Fly object using the no-arg constructor</li> <li>Set the fields of the second Fly object using setters.</li> <li>Display the fields of each fly.</li> </ol>","boost":1},{"location":"programming/oop/oop-review-questions/","title":"Object-Oriented Programming Review Questions","text":"<p>You should be able to answer these questions, discuss their meaning, and give examples. Pretend you are in a job interview - you should know the answers, right?</p> <ol> <li>What is a class?</li> <li>What is an object?</li> <li>What are getters and setters?</li> <li>What is encapsulation?</li> <li>What is a constructor and when is it executed?</li> <li>What is inheritance? Give an example.</li> <li>What is a superclass? Give an example.</li> <li>What is a subclass? Give an example.</li> <li>What is overriding a method? Give an example.</li> <li>What is overloading a method? Give an example.</li> <li>What is UML?</li> <li>What is polymorphism? Give an example.</li> </ol>","boost":1},{"location":"programming/oop/oop-terminology/","title":"Object-Oriented Programming (OOP) Terminology","text":"<p>Object-Oriented Programming (OOP) Terminology You Should Know</p> <p>Class: The blueprint for an object, not the actual object.</p> <p>Object: An object is created from the Class. It contains actual data and methods for the object.</p> <p>Method: Another name for module or function.</p> <p>Getter: A function. A program calls a getter to get the value of a field.</p> <p>Setter: A module. A program calls a setter to set a field to a value.</p> <p>Field: A word Object-Oriented Programming (OOP) uses instead of variable.</p> <p>Private Fields: Variables in a class are set to private so other programs can\u2019t update them directly.</p> <p>Public Methods: Methods are public so other programs can use public methods to get or set fields in that program.</p> <p>Constructor: A method named for the class that is automatically run when the object is created. It usually initializes the object\u2019s fields. A class/object can have multiple constructors.</p> <p>Encapsulation: Combining data and code into one object.</p> <p>UML: Unified Modeling Language. Like Input, Processing, and Output (IPO) Charts and Hierarchy Charts, UML is used to design object oriented classes and programs.</p> <p>Inheritance: A class can \u2018extend\u2019 another class which allows it to use the data fields and methods in the superclass.</p> <p>Superclass: The general class, such as <code>Dog</code>. A subclass extends a superclass.</p> <p>Subclass: The specialized class, such as <code>Beagle</code>. <code>Beagle</code> extends <code>Dog</code>. A subclass extends the superclass.</p> <p>Polymorphism: An object\u2019s ability to take on many forms.</p>","boost":1},{"location":"programming/resources/","title":"Resources - Index","text":"","boost":1},{"location":"programming/resources/#java","title":"Java","text":"<ul> <li>Java Programming Resources</li> <li>Installing The Java Development Kit JDK</li> <li>Glossary</li> </ul>","boost":1},{"location":"programming/resources/#eclipse-ide","title":"Eclipse IDE","text":"<ul> <li>Eclipse IDE: How To Find Matching Brackets and Missing Brackets</li> </ul>","boost":1},{"location":"programming/resources/#writing","title":"Writing","text":"<ul> <li>Di\u00e1taxis: A systematic approach to technical documentation authoring</li> </ul>","boost":1},{"location":"programming/resources/diataxis-a-systematic-approach-to-technical-documentation-authoring/","title":"Di\u00e1taxis: A systematic approach to technical documentation authoring","text":"<p>Di\u00e1taxis is a way of thinking about and doing documentation.</p> <p>It prescribes approaches to content, architecture and form that emerge from a systematic approach to understanding the needs of documentation users.</p> <p>Di\u00e1taxis identifies four distinct needs, and four corresponding forms of documentation - tutorials, how-to guides, technical reference and explanation. It places them in a systematic relationship, and proposes that documentation should itself be organised around the structures of those needs.</p> <p>Website: https://diataxis.fr/</p>","boost":1},{"location":"programming/resources/eclipse-ide-how-to-find-matching-brackets-and-missing-brackets/","title":"Eclipse IDE - How To Find Matching Brackets and Missing Brackets","text":"","boost":1},{"location":"programming/resources/eclipse-ide-how-to-find-matching-brackets-and-missing-brackets/#3-ways-to-find-matching-missing-brackets-in-eclipse-ide","title":"3 Ways To Find Matching / Missing Brackets In Eclipse IDE","text":"<p>Note</p> <p>Eclipse IDE 2024-03 on Windows was used for this document.</p>","boost":1},{"location":"programming/resources/eclipse-ide-how-to-find-matching-brackets-and-missing-brackets/#1-in-the-eclipse-ide","title":"1. In the Eclipse IDE","text":"<ol> <li>In your source code in the Eclipse IDE, go to the bracket you want to match, then use your keyboard <code>CTRL</code> + <code>SHIFT</code> + <code>P</code> to go to the matching bracket in your source code.</li> </ol>","boost":1},{"location":"programming/resources/eclipse-ide-how-to-find-matching-brackets-and-missing-brackets/#2-eclipse-ide-preferences-highlight-matching-brackets","title":"2. Eclipse IDE Preferences - Highlight Matching Brackets","text":"<ol> <li> <p>Open the Eclipse IDE.</p> </li> <li> <p>From the top menu bar, click on <code>Window</code>, then from the pull down <code>Window</code> menu, click on <code>Preferences</code> from the <code>Window</code> menu.</p> </li> <li> <p>In the <code>Preferences</code> popup window, click on little carrot arrow <code>&gt;</code> next to <code>Java</code> in the left side menu of the <code>Preferences</code> popup window. </p> </li> <li> <p>Next, In the <code>Preferences</code> popup window, under <code>Java</code> in the left side menu of the <code>Preferences</code> popup window, click on the word <code>Editor</code> in the left side menu of the <code>Preferences</code> popup window.</p> </li> <li> <p>Make sure <code>Bracket highlighting</code> checkbox is checked and that the MAtching bracket radio button is selected.</p> </li> </ol> <p>Note</p> <p>Matching bracket - you must have cursor right next to the bracket and it will highlight only the corresponding bracket.</p> <p>Matching bracket and caret location - same as matching bracket, only it will highlight both brackets.</p> <p>Enclosing brackets - highlight both brackets that enclosing the place where your cursor is located.</p> <ol> <li> <p>To make it slightly easier to see, you might want to change the <code>Appearance color options:</code> of <code>Matching brackets highlight</code> to the <code>Color:</code> red.</p> </li> <li> <p>In the <code>Preferences</code> popup window, click on the <code>Apply and Close</code> button in the lower right of the <code>Preferences/Editor</code> popup window.</p> </li> </ol>","boost":1},{"location":"programming/resources/eclipse-ide-how-to-find-matching-brackets-and-missing-brackets/#3-installing-the-bracketeer2-plugin-in-eclipse-ide","title":"3. Installing The Bracketeer2 Plugin in Eclipse IDE","text":"<ol> <li> <p>Open the Eclipse IDE.</p> </li> <li> <p>From the top menu bar, click on <code>Help</code>, then from the pull down <code>Help</code> menu, click on <code>Eclipse Marketplace</code> from the <code>Help</code> menu.</p> </li> <li> <p>From the <code>Eclipse Marketplace</code> popup window, on the <code>Search</code> tab, in the <code>Find:</code> box, type <code>Bracketeer</code> and then hit the <code>Enter</code> key on your keyboard.</p> </li> <li> <p>From the <code>Eclipse Marketplace</code> popup window, click on the <code>Install</code> button in the <code>Bracketeer2 2.0.0</code> search results window pane.</p> </li> <li> <p>From the <code>Eclipse Marketplace/Confirm Selected Features</code> popup window, make sure under the <code>Bracketeer2 2.0.0</code> folder that <code>Bracketeer2 (required)</code> has a checkmark and that <code>Bracketeer JDT support</code> has a checkmark. </p> </li> </ol> <p>Note</p> <p><code>Bracketeer2 (required)</code> is required, <code>Bracketeer JDT support</code> is for use with Java, and <code>Bracketeer CDT support</code> is for use with C/C++. </p> <ol> <li> <p>After the checkboxes are selected, click on the <code>Confirm</code> button located just right of center in the bottom of the <code>Eclipse Marketplace/Confirm Selected Features</code> popup window.</p> </li> <li> <p>In the <code>Eclipse Marketplace/Review Licenses</code> popup window, click on the <code>Finish</code> button located right of center in the bottom of the <code>Eclipse Marketplace/Review Licenses</code> popup window.</p> </li> <li> <p>In the <code>Trust Artifacts</code> popup window, make sure the checkbox is selected for <code>Unsigned</code>. The list items in the bottom half of the <code>Trust Artifacts</code> popup window should now be in bold font and highlighted.</p> </li> <li> <p>In the <code>Trust Artifacts</code> popup window, click on the <code>Trust Selected</code> button in the lower right of the <code>Trust Artifacts</code> popup window.</p> </li> <li> <p>After the installation of the plugin has been completed, you will be prompted to restart the Eclipse IDE. Make sure you have saved all your work in Eclipse IDE before restarting the Eclipse IDE.</p> </li> </ol> <p>Note</p> <p>Bracketeer2 project page at the Eclipse Marketplace website: https://marketplace.eclipse.org/content/bracketeer2</p> <p>Bracketeer2 GitHub repository: https://github.com/gnl42/Bracketeer2</p>","boost":1},{"location":"programming/resources/glossary/","title":"Glossary","text":"<p>In Progress</p> <p>A B</p>","boost":1},{"location":"programming/resources/glossary/#a","title":"A","text":"","boost":1},{"location":"programming/resources/glossary/#abstract","title":"abstract","text":"<p>A Java reserved word that serves as a modifier for classes, interfaces, and methods. An abstract class cannot be instantiated and is used to specify bodiless abstract methods that are given definitions by derived classes. Interfaces are inherently abstract.</p>","boost":1},{"location":"programming/resources/glossary/#abstract-class","title":"abstract class","text":"<p>Same as abstract. A Java reserved word that serves as a modifier for classes, interfaces, and methods. An abstract class cannot be instantiated and is used to specify bodiless abstract methods that are given definitions by derived classes. Interfaces are inherently abstract.</p>","boost":1},{"location":"programming/resources/glossary/#abstract-data-type-adt","title":"abstract data type (ADT)","text":"<p>A collection of data and the operations that are defined on those data. An abstract data type might be implemented in a variety of ways, but the interface operations are consistent.</p>","boost":1},{"location":"programming/resources/glossary/#abstract-method","title":"abstract method","text":"<p>Same as abstract. A Java reserved word that serves as a modifier for classes, interfaces, and methods. An abstract class cannot be instantiated and is used to specify bodiless abstract methods that are given definitions by derived classes. Interfaces are inherently abstract</p>","boost":1},{"location":"programming/resources/glossary/#abstract-windowing-toolkit-awt","title":"Abstract Windowing Toolkit (AWT)","text":"<p>The package in the Java API (java.awt) that contains classes related to graphics and GUIs. See also Swing</p>","boost":1},{"location":"programming/resources/glossary/#abstraction","title":"abstraction","text":"<p>The concept of hiding details. If the right details are hidden at the right times, abstraction can significantly help control complexity and focus attention on appropriate issues.</p>","boost":1},{"location":"programming/resources/glossary/#adt","title":"ADT","text":"<p>abstract data type (ADT) - A collection of data and the operations that are defined on those data. An abstract data type might be implemented in a variety of ways, but the interface operations are consistent.</p>","boost":1},{"location":"programming/resources/glossary/#aggregate-object","title":"aggregate object","text":"<p>An object that contains variables that are references to other objects. See also has-a relationship.</p>","boost":1},{"location":"programming/resources/glossary/#aggregation","title":"aggregation","text":"<p>Something that is composed, at least in part, of other things. See also aggregate object.</p>","boost":1},{"location":"programming/resources/glossary/#algorithm","title":"algorithm","text":"<p>A step-by-step process for solving a problem. A program is based on one or more algorithms.</p>","boost":1},{"location":"programming/resources/glossary/#alias","title":"alias","text":"<p>A reference to an object that is currently also referred to by another reference. Each reference is an alias of the other.</p>","boost":1},{"location":"programming/resources/glossary/#analog","title":"analog","text":"<p>A representation that is in direct proportion to the source of the information. See also digital.</p>","boost":1},{"location":"programming/resources/glossary/#animation","title":"animation","text":"<p>A series of images or drawings that gives the appearance of movement when displayed in order at a particular speed.</p>","boost":1},{"location":"programming/resources/glossary/#api","title":"API","text":"<p>Stands for application programming interface (API). A set of classes that defines services for a programmer. Not part of the language itself, but often relied on to perform even basic tasks. See also class library.</p>","boost":1},{"location":"programming/resources/glossary/#applet","title":"applet","text":"<p>A Java program that is linked into an HTML document and is then retrieved and executed using a Web browser, as opposed to a stand-alone Java application.</p>","boost":1},{"location":"programming/resources/glossary/#appletviewer","title":"appletviewer","text":"<p>A software tool that interprets and displays Java applets through links in HTML documents. Part of the Java Development Kit.</p>","boost":1},{"location":"programming/resources/glossary/#application","title":"application","text":"<p>(1) A generic term for any program. (2) A Java program that can be run without the use of a Web browser, as opposed to a Java applet.</p>","boost":1},{"location":"programming/resources/glossary/#application-programming-interface-api","title":"application programming interface (API)","text":"<p>A set of classes that defines services for a programmer. Not part of the language itself, but often relied on to perform even basic tasks. See also class library.</p>","boost":1},{"location":"programming/resources/glossary/#arc-angle","title":"arc angle","text":"<p>In the definition of an arc, the radial distance that defines the arc\u2019s length. See also start angle.</p>","boost":1},{"location":"programming/resources/glossary/#architectural-design","title":"architectural design","text":"<p>A high-level design that identifies the large portions of a software system and key data structures. See also detailed design.</p>","boost":1},{"location":"programming/resources/glossary/#architecture","title":"architecture","text":"<p>Refers to computer architecture. The structure and interaction of the hardware components of a computer.</p>","boost":1},{"location":"programming/resources/glossary/#architecture-neutral","title":"architecture neutral","text":"<p>Not specific to any particular hardware platform. Java code is considered architecture neutral because it is compiled into bytecode and then interpreted on any machine with a Java interpreter. See also bytecode.</p>","boost":1},{"location":"programming/resources/glossary/#arithmetic-operator","title":"arithmetic operator","text":"<p>An operator that performs a basic arithmetic computation, such as addition or multiplication.</p>","boost":1},{"location":"programming/resources/glossary/#arithmetic-promotion","title":"arithmetic promotion","text":"<p>The act of promoting the type of a numeric operand to be consistent with the other operand.</p>","boost":1},{"location":"programming/resources/glossary/#array","title":"array","text":"<p>A programming language construct used to store an ordered list of primitive values or objects. Each element in the array is referenced using a numeric index from '0' to 'N\u20131', where 'N' is the size of the array.</p>","boost":1},{"location":"programming/resources/glossary/#array-element","title":"array element","text":"<p>A value or object that is stored in an array.</p>","boost":1},{"location":"programming/resources/glossary/#array-element-type","title":"array element type","text":"<p>The type of the values or objects that are stored in an array.</p>","boost":1},{"location":"programming/resources/glossary/#ascii","title":"ASCII","text":"<p>A popular character set used by many programming languages. ASCII stands for American Standard Code for Information Interchange. It is a subset of the Unicode character set, which is used by Java.</p>","boost":1},{"location":"programming/resources/glossary/#assembly-language","title":"assembly language","text":"<p>A low-level language that uses mnemonics to represent program commands.</p>","boost":1},{"location":"programming/resources/glossary/#assert","title":"assert","text":"<p>A Java reserved word that is used to make an assertion that a condition is fulfilled. See also assertion.</p>","boost":1},{"location":"programming/resources/glossary/#assertion","title":"assertion","text":"<p>A programming language construct that is used to declare a programmatic assumption (that is usually true). Assertions are used by JUnit for the purposes of unit testing. See also JUnit, unit testing.</p>","boost":1},{"location":"programming/resources/glossary/#assignment-conversion","title":"assignment conversion","text":"<p>Some data types can be converted to another data type in an assignment statement. See widening conversion.</p>","boost":1},{"location":"programming/resources/glossary/#assignment-operator","title":"assignment operator","text":"<p>An operator that results in an assignment to a variable. The = operator performs basic assignment. Many other assignment operators, such as the *= operator, perform additional operations prior to the assignment.</p>","boost":1},{"location":"programming/resources/glossary/#association","title":"association","text":"<p>A relationship between two classes in which one uses the other or is related to it in some way. See also operator association, use relationship.</p>","boost":1},{"location":"programming/resources/glossary/#asymptotic-complexity","title":"asymptotic complexity","text":"<p>The order, or dominant term, of a growth function. See also dominant term, growth function.</p>","boost":1},{"location":"programming/resources/glossary/#awt","title":"AWT","text":"<p>Abstract Windowing Toolkit (AWT). The package in the Java API (java.awt) that contains classes related to graphics and GUIs. See also Swing.</p>","boost":1},{"location":"programming/resources/glossary/#b","title":"B","text":"","boost":1},{"location":"programming/resources/glossary/#background-color","title":"background color","text":"<p>(1) The color of the background of a GUI component. (2) The color of the background of an HTML page. See also foreground color.</p>","boost":1},{"location":"programming/resources/glossary/#bag","title":"bag","text":"<p>A collection that facilitates the selection of random elements from a group. See also collection.</p>","boost":1},{"location":"programming/resources/installing-the-java-development-kit/","title":"Java - Installing the Java Development Kit (JDK)","text":"<p>If you have never installed the JDK (Java Development Kit) or the JRE (Java Runtime Environment) on to your computer before, may I suggest that you choose to install from one of these sources:</p> <p>Note</p> <p>I installed the latest LTS (Long Term Suppoerted) version of Eclipse Adoptium's Temurin. Other LTS verison are 8, 11, and 17. While the JDK does include the JRE (Java Runtime Environment), you are able to install the JRE seperatly on your system if you so choose.</p> <p>Tip</p> <p>If you are developing from multiple computers for homework, such as a school computer as well as a personal computer, install the same version of the JDK as well as from the same source such as Oracle Java, Eclipse Adoptium, etc., as the school computer has installed. It will might make your life a little easier.</p> <p>You will need Adminstrator privledges if you are installing the Java Development Kit (JDK) on a Windows Operating System. Make sure you have the adminstrator's username and password available to you before installing.</p>","boost":1},{"location":"programming/resources/installing-the-java-development-kit/#installer-sources-for-the-jdk-and-the-jre-for-windows-mac-linux-etc","title":"Installer Sources for the JDK and the JRE for Windows, Mac, Linux, Etc.","text":"<ul> <li> <p>Eclipse Adoptium's Temurin</p> </li> <li> <p>Amazon Corretto</p> </li> <li> <p>Azul Zulu</p> </li> <li> <p>IBM Semeru Runtimes</p> </li> <li> <p>Microsoft Build of OpenJDK</p> </li> <li> <p>Oracle Java SE</p> </li> <li> <p>Red Hat build of OpenJDK</p> </li> <li> <p>SapMachine</p> </li> </ul>","boost":1},{"location":"programming/resources/java-programming-resources/","title":"Java Programming Resources","text":"<p>The Official Java Documentation from Oracle</p> <p>This is the resource that professional developers use.</p> <p>Go to this resource to find:</p> <ol> <li>The official documentation for Java Programmers</li> <li> <p>Information about all Java Classes</p> </li> <li> <p>The Official Java Documentation: Version 21</p> </li> <li>The Official Java Documentation: Version 17</li> <li>The Official Java Documentation: Version 11</li> <li>The Official Java Documentation: Version 8</li> </ol>","boost":1},{"location":"programming/resources/java-programming-resources/#other-great-resources","title":"Other Great Resources","text":"<p>Logic Lambda Videos</p> <p>https://www.youtube.com/@logiclambda</p> <p>Programming in Java Computer Science: An Interdisciplinary Approach (using Java)</p> <p>https://introcs.cs.princeton.edu/java/home/</p> <p>Oracle Java Tutorials Version 8</p> <p>http://docs.oracle.com/javase/tutorial/index.html</p> <p>TutorialsPoint Java Tutorials</p> <p>https://www.tutorialspoint.com/java/index.htm</p> <p>TutorialsPoint Java8 Tutorial</p> <p>https://www.tutorialspoint.com/java8/index.htm</p> <p>Derek Banas Java Video Tutorial</p> <p>https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19</p> <p>Nathan S Java Videos</p> <p>https://www.youtube.com/@nathanschutz4095/</p> <p>Beginners Programming - Beginners Java Playlist</p> <p>https://www.youtube.com/playlist?list=PL9J7I-bSsj4FlFrxVAncSFTZLX7adIyRQ</p> <p>Beginners Programming - Intermediate Java Playlist</p> <p>https://www.youtube.com/playlist?list=PL9J7I-bSsj4Fb57M5asi0wxvmSR3o8Yll</p> <p>Margret Posch Java Basics</p> <p>https://www.youtube.com/playlist?list=PL5OtzItldO_S-0Hnuyg-PnBwZnHvu2fWm</p> <p>JetBrains Academy - Java For Beginners</p> <p>https://academy.jetbrains.com/ https://plugins.jetbrains.com/plugin/18905-java-for-beginners</p>","boost":1},{"location":"programming/resources/java-programming-resources/#data-structures-algorithms","title":"Data Structures &amp; Algorithms","text":"<p>EECS.berkeley.edu: CS61B -- Data Structures (Prof. Jonathan Shewchuk)</p> <p>https://people.eecs.berkeley.edu/~jrs/61b/</p> <p>OCW.MIT.edu: Introduction to Algorithms (Prof. Erik Demaine &amp; Prof. Srini Devadas)</p> <p>https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/index.htm</p> <p>TutorialsPoint Data Structures &amp; Algorithm Basic Concepts</p> <p>https://www.tutorialspoint.com/data_structures_algorithms/data_structures_basics.htm</p> <p>CS.USFca.edu: Data Structure Visualizations</p> <p>https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</p>","boost":1},{"location":"programming/ternary/","title":"Ternary - Index","text":"<ul> <li>Enhanced For Loops</li> <li>Enhanced If Statements</li> </ul>","boost":1},{"location":"programming/ternary/ternary-enhanced-for-loops-short-form-for-loops-examples/","title":"Enhanced For Loops","text":"<p>The usual way to step through all the elements of an array in order is with a \"standard\" for loop, for example,</p> <pre><code>for (int i = 0; i &lt; myArray.length; i++) {\n    System.out.println(myArray[i]);\n}\n</code></pre> <p>The so-called enhanced for loop is a simpler way to do this same thing. (The colon in the syntax can be read as \"in.\")</p> <pre><code>for (int myValue : myArray) {\n    System.out.println(myValue);\n}\n</code></pre> <p>The enhanced for loop was introduced in Java 5 as a simpler way to iterate through all the elements of a Collection (Collections are not covered in these pages). It can also be used for arrays, as in the above example, but this is not the original purpose.</p> <p>Enhanced for loops are simple but inflexible. They can be used when you wish to step through the elements of the array in first-to-last order, and you do not need to know the index of the current element. In all other cases, the \"standard\" for loop should be preferred.</p> <p>Two additional statement types, break and continue, can also control the behavior of enhanced for loops.</p> <p>Source: https://www.cis.upenn.edu/~matuszek/General/JavaSyntax/enhanced-for-loops.html</p> <p>Other examples... The Java ternary operator examples | alvinalexander.com</p>","boost":1},{"location":"programming/ternary/ternary-enhanced-if-statements-short-form-if-statments-examples/","title":"Enhanced If Statements (Short Form If Statements) Ternary Operator Examples","text":"","boost":1},{"location":"programming/ternary/ternary-enhanced-if-statements-short-form-if-statments-examples/#if-then-else","title":"if-then-else","text":"<p>I'm always forgeting how to use the ?: ternary operator. This supplemental answer is a quick reminder. It is shorthand for <code>if-then-else</code>.</p> <pre><code>myVariable = (testCondition) ? someValue : anotherValue;\n</code></pre> <p>where</p> <ul> <li><code>()</code> holds the <code>if</code></li> <li><code>?</code> means <code>then</code></li> <li><code>:</code> means <code>else</code></li> </ul> <p>It is the same as</p> <pre><code>if (testCondition) {\n    myVariable = someValue;\n} else {\n    myVariable = anotherValue;\n}\n</code></pre>","boost":1},{"location":"programming/ternary/ternary-enhanced-if-statements-short-form-if-statments-examples/#if-else-if-else","title":"if, else if, else","text":"<p>You can write <code>if, else if, else</code> statements in short form. For example:</p> <pre><code>Boolean isCapital = city.isCapital(); //Object Boolean (not boolean)\nString isCapitalName = isCapital == null ? \"\" : isCapital ? \"Capital\" : \"City\";\n</code></pre> <p>This is short form of:</p> <pre><code>Boolean isCapital = city.isCapital();\nString isCapitalName;\nif(isCapital == null) {\n    isCapitalName = \"\";\n} else if(isCapital) {\n    isCapitalName = \"Capital\";\n} else {\n    isCapitalName = \"City\";\n}\n</code></pre> <p>Source: Short form for Java if statement - Stack Overflow</p> <p>Other Examples... The Java ternary operator examples / alvinalexander.com</p>","boost":1}]}